export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        root: {
            /** Format: uri-template */
            current_user_url: string;
            /** Format: uri-template */
            current_user_authorizations_html_url: string;
            /** Format: uri-template */
            authorizations_url: string;
            /** Format: uri-template */
            code_search_url: string;
            /** Format: uri-template */
            commit_search_url: string;
            /** Format: uri-template */
            emails_url: string;
            /** Format: uri-template */
            emojis_url: string;
            /** Format: uri-template */
            events_url: string;
            /** Format: uri-template */
            feeds_url: string;
            /** Format: uri-template */
            followers_url: string;
            /** Format: uri-template */
            following_url: string;
            /** Format: uri-template */
            gists_url: string;
            /**
             * Format: uri-template
             * @deprecated
             */
            hub_url?: string;
            /** Format: uri-template */
            issue_search_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            label_search_url: string;
            /** Format: uri-template */
            notifications_url: string;
            /** Format: uri-template */
            organization_url: string;
            /** Format: uri-template */
            organization_repositories_url: string;
            /** Format: uri-template */
            organization_teams_url: string;
            /** Format: uri-template */
            public_gists_url: string;
            /** Format: uri-template */
            rate_limit_url: string;
            /** Format: uri-template */
            repository_url: string;
            /** Format: uri-template */
            repository_search_url: string;
            /** Format: uri-template */
            current_user_repositories_url: string;
            /** Format: uri-template */
            starred_url: string;
            /** Format: uri-template */
            starred_gists_url: string;
            /** Format: uri-template */
            topic_search_url?: string;
            /** Format: uri-template */
            user_url: string;
            /** Format: uri-template */
            user_organizations_url: string;
            /** Format: uri-template */
            user_repositories_url: string;
            /** Format: uri-template */
            user_search_url: string;
        };
        /**
         * @description The package's language or package management ecosystem.
         * @enum {string}
         */
        "security-advisory-ecosystems": "rubygems" | "npm" | "pip" | "maven" | "nuget" | "composer" | "go" | "rust" | "erlang" | "actions" | "pub" | "other" | "swift";
        /** @description A vulnerability describing the product and its affected versions within a GitHub Security Advisory. */
        vulnerability: {
            /** @description The name of the package affected by the vulnerability. */
            package: {
                ecosystem: components["schemas"]["security-advisory-ecosystems"];
                /** @description The unique package name within its ecosystem. */
                name: string | null;
            } | null;
            /** @description The range of the package versions affected by the vulnerability. */
            vulnerable_version_range: string | null;
            /** @description The package version that resolves the vulnerability. */
            first_patched_version: string | null;
            /** @description The functions in the package that are affected by the vulnerability. */
            readonly vulnerable_functions: string[] | null;
        };
        "cvss-severities": {
            cvss_v3?: {
                /** @description The CVSS 3 vector string. */
                vector_string: string | null;
                /** @description The CVSS 3 score. */
                readonly score: number | null;
            } | null;
            cvss_v4?: {
                /** @description The CVSS 4 vector string. */
                vector_string: string | null;
                /** @description The CVSS 4 score. */
                readonly score: number | null;
            } | null;
        } | null;
        /** @description The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
        "security-advisory-epss": {
            percentage?: number;
            percentile?: number;
        } | null;
        /**
         * Simple User
         * @description A GitHub user.
         */
        "simple-user": {
            name?: string | null;
            email?: string | null;
            /** @example octocat */
            login: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example MDQ6VXNlcjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /** @example 41d064eb2195891e12d0413f63227ea7 */
            gravatar_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/followers
             */
            followers_url: string;
            /** @example https://api.github.com/users/octocat/following{/other_user} */
            following_url: string;
            /** @example https://api.github.com/users/octocat/gists{/gist_id} */
            gists_url: string;
            /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
            starred_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/orgs
             */
            organizations_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repos_url: string;
            /** @example https://api.github.com/users/octocat/events{/privacy} */
            events_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/received_events
             */
            received_events_url: string;
            /** @example User */
            type: string;
            site_admin: boolean;
            /** @example "2020-07-09T00:17:55Z" */
            starred_at?: string;
            /** @example public */
            user_view_type?: string;
        };
        /**
         * @description The type of credit the user is receiving.
         * @enum {string}
         */
        "security-advisory-credit-types": "analyst" | "finder" | "reporter" | "coordinator" | "remediation_developer" | "remediation_reviewer" | "remediation_verifier" | "tool" | "sponsor" | "other";
        /** @description A GitHub Security Advisory. */
        "global-advisory": {
            /** @description The GitHub Security Advisory ID. */
            readonly ghsa_id: string;
            /** @description The Common Vulnerabilities and Exposures (CVE) ID. */
            readonly cve_id: string | null;
            /** @description The API URL for the advisory. */
            readonly url: string;
            /**
             * Format: uri
             * @description The URL for the advisory.
             */
            readonly html_url: string;
            /**
             * Format: uri
             * @description The API URL for the repository advisory.
             */
            readonly repository_advisory_url: string | null;
            /** @description A short summary of the advisory. */
            summary: string;
            /** @description A detailed description of what the advisory entails. */
            description: string | null;
            /**
             * @description The type of advisory.
             * @enum {string}
             */
            readonly type: "reviewed" | "unreviewed" | "malware";
            /**
             * @description The severity of the advisory.
             * @enum {string}
             */
            severity: "critical" | "high" | "medium" | "low" | "unknown";
            /**
             * Format: uri
             * @description The URL of the advisory's source code.
             */
            source_code_location: string | null;
            readonly identifiers: {
                /**
                 * @description The type of identifier.
                 * @enum {string}
                 */
                type: "CVE" | "GHSA";
                /** @description The identifier value. */
                value: string;
            }[] | null;
            references: string[] | null;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was published, in ISO 8601 format.
             */
            readonly published_at: string;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was last updated, in ISO 8601 format.
             */
            readonly updated_at: string;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
             */
            readonly github_reviewed_at: string | null;
            /**
             * Format: date-time
             * @description The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
             *     This field is only populated when the advisory is imported from the National Vulnerability Database.
             */
            readonly nvd_published_at: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was withdrawn, in ISO 8601 format.
             */
            readonly withdrawn_at: string | null;
            /** @description The products and respective version ranges affected by the advisory. */
            vulnerabilities: components["schemas"]["vulnerability"][] | null;
            cvss: {
                /** @description The CVSS vector. */
                vector_string: string | null;
                /** @description The CVSS score. */
                readonly score: number | null;
            } | null;
            cvss_severities?: components["schemas"]["cvss-severities"];
            epss?: components["schemas"]["security-advisory-epss"];
            cwes: {
                /** @description The Common Weakness Enumeration (CWE) identifier. */
                cwe_id: string;
                /** @description The name of the CWE. */
                readonly name: string;
            }[] | null;
            /** @description The users who contributed to the advisory. */
            readonly credits: {
                user: components["schemas"]["simple-user"];
                type: components["schemas"]["security-advisory-credit-types"];
            }[] | null;
        };
        /**
         * Basic Error
         * @description Basic Error
         */
        "basic-error": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
        };
        /**
         * Validation Error Simple
         * @description Validation Error Simple
         */
        "validation-error-simple": {
            message: string;
            documentation_url: string;
            errors?: string[];
        };
        /**
         * Enterprise
         * @description An enterprise on GitHub.
         */
        enterprise: {
            /** @description A short description of the enterprise. */
            description?: string | null;
            /**
             * Format: uri
             * @example https://github.com/enterprises/octo-business
             */
            html_url: string;
            /**
             * Format: uri
             * @description The enterprise's website URL.
             */
            website_url?: string | null;
            /**
             * @description Unique identifier of the enterprise
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the enterprise.
             * @example Octo Business
             */
            name: string;
            /**
             * @description The slug url identifier for the enterprise.
             * @example octo-business
             */
            slug: string;
            /**
             * Format: date-time
             * @example 2019-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2019-01-26T19:14:43Z
             */
            updated_at: string | null;
            /** Format: uri */
            avatar_url: string;
        };
        /**
         * GitHub app
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        integration: {
            /**
             * @description Unique identifier of the GitHub app
             * @example 37
             */
            id: number;
            /**
             * @description The slug name of the GitHub app
             * @example probot-owners
             */
            slug?: string;
            /** @example MDExOkludGVncmF0aW9uMQ== */
            node_id: string;
            /** @example "Iv1.25b5d1e65ffc4022" */
            client_id?: string;
            owner: components["schemas"]["simple-user"] | components["schemas"]["enterprise"];
            /**
             * @description The name of the GitHub app
             * @example Probot Owners
             */
            name: string;
            /** @example The description of the app. */
            description: string | null;
            /**
             * Format: uri
             * @example https://example.com
             */
            external_url: string;
            /**
             * Format: uri
             * @example https://github.com/apps/super-ci
             */
            html_url: string;
            /**
             * Format: date-time
             * @example 2017-07-08T16:18:44-04:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2017-07-08T16:18:44-04:00
             */
            updated_at: string;
            /**
             * @description The set of permissions for the GitHub app
             * @example {
             *       "issues": "read",
             *       "deployments": "write"
             *     }
             */
            permissions: {
                issues?: string;
                checks?: string;
                metadata?: string;
                contents?: string;
                deployments?: string;
            } & {
                [key: string]: string;
            };
            /**
             * @description The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
             * @example [
             *       "label",
             *       "deployment"
             *     ]
             */
            events: string[];
            /**
             * @description The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
             * @example 5
             */
            installations_count?: number;
        } | null;
        /**
         * Format: uri
         * @description The URL to which the payloads will be delivered.
         * @example https://example.com/webhook
         */
        "webhook-config-url": string;
        /**
         * @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
         * @example "json"
         */
        "webhook-config-content-type": string;
        /**
         * @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
         * @example "********"
         */
        "webhook-config-secret": string;
        "webhook-config-insecure-ssl": string | number;
        /**
         * Webhook Configuration
         * @description Configuration object of the webhook
         */
        "webhook-config": {
            url?: components["schemas"]["webhook-config-url"];
            content_type?: components["schemas"]["webhook-config-content-type"];
            secret?: components["schemas"]["webhook-config-secret"];
            insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        };
        /**
         * Simple webhook delivery
         * @description Delivery made by a webhook, without request and response information.
         */
        "hook-delivery-item": {
            /**
             * Format: int64
             * @description Unique identifier of the webhook delivery.
             * @example 42
             */
            id: number;
            /**
             * @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
             * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
             */
            guid: string;
            /**
             * Format: date-time
             * @description Time when the webhook delivery occurred.
             * @example 2021-05-12T20:33:44Z
             */
            delivered_at: string;
            /**
             * @description Whether the webhook delivery is a redelivery.
             * @example false
             */
            redelivery: boolean;
            /**
             * @description Time spent delivering.
             * @example 0.03
             */
            duration: number;
            /**
             * @description Describes the response returned after attempting the delivery.
             * @example failed to connect
             */
            status: string;
            /**
             * @description Status code received when delivery was made.
             * @example 502
             */
            status_code: number;
            /**
             * @description The event that triggered the delivery.
             * @example issues
             */
            event: string;
            /**
             * @description The type of activity for the event that triggered the delivery.
             * @example opened
             */
            action: string | null;
            /**
             * Format: int64
             * @description The id of the GitHub App installation associated with this event.
             * @example 123
             */
            installation_id: number | null;
            /**
             * Format: int64
             * @description The id of the repository associated with this event.
             * @example 123
             */
            repository_id: number | null;
            /**
             * Format: date-time
             * @description Time when the webhook delivery was throttled.
             * @example 2021-05-12T20:33:44Z
             */
            throttled_at?: string | null;
        };
        /**
         * Scim Error
         * @description Scim Error
         */
        "scim-error": {
            message?: string | null;
            documentation_url?: string | null;
            detail?: string | null;
            status?: number;
            scimType?: string | null;
            schemas?: string[];
        };
        /**
         * Validation Error
         * @description Validation Error
         */
        "validation-error": {
            message: string;
            documentation_url: string;
            errors?: {
                resource?: string;
                field?: string;
                message?: string;
                code: string;
                index?: number;
                value?: (string | null) | (number | null) | (string[] | null);
            }[];
        };
        /**
         * Webhook delivery
         * @description Delivery made by a webhook.
         */
        "hook-delivery": {
            /**
             * @description Unique identifier of the delivery.
             * @example 42
             */
            id: number;
            /**
             * @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
             * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
             */
            guid: string;
            /**
             * Format: date-time
             * @description Time when the delivery was delivered.
             * @example 2021-05-12T20:33:44Z
             */
            delivered_at: string;
            /**
             * @description Whether the delivery is a redelivery.
             * @example false
             */
            redelivery: boolean;
            /**
             * @description Time spent delivering.
             * @example 0.03
             */
            duration: number;
            /**
             * @description Description of the status of the attempted delivery
             * @example failed to connect
             */
            status: string;
            /**
             * @description Status code received when delivery was made.
             * @example 502
             */
            status_code: number;
            /**
             * @description The event that triggered the delivery.
             * @example issues
             */
            event: string;
            /**
             * @description The type of activity for the event that triggered the delivery.
             * @example opened
             */
            action: string | null;
            /**
             * @description The id of the GitHub App installation associated with this event.
             * @example 123
             */
            installation_id: number | null;
            /**
             * @description The id of the repository associated with this event.
             * @example 123
             */
            repository_id: number | null;
            /**
             * Format: date-time
             * @description Time when the webhook delivery was throttled.
             * @example 2021-05-12T20:33:44Z
             */
            throttled_at?: string | null;
            /**
             * @description The URL target of the delivery.
             * @example https://www.example.com
             */
            url?: string;
            request: {
                /** @description The request headers sent with the webhook delivery. */
                headers: {
                    [key: string]: unknown;
                } | null;
                /** @description The webhook payload. */
                payload: {
                    [key: string]: unknown;
                } | null;
            };
            response: {
                /** @description The response headers received when the delivery was made. */
                headers: {
                    [key: string]: unknown;
                } | null;
                /** @description The response payload received. */
                payload: string | null;
            };
        };
        /**
         * Integration Installation Request
         * @description Request to install an integration on a target
         */
        "integration-installation-request": {
            /**
             * @description Unique identifier of the request installation.
             * @example 42
             */
            id: number;
            /** @example MDExOkludGVncmF0aW9uMQ== */
            node_id?: string;
            account: components["schemas"]["simple-user"] | components["schemas"]["enterprise"];
            requester: components["schemas"]["simple-user"];
            /**
             * Format: date-time
             * @example 2022-07-08T16:18:44-04:00
             */
            created_at: string;
        };
        /**
         * App Permissions
         * @description The permissions granted to the user access token.
         * @example {
         *       "contents": "read",
         *       "issues": "read",
         *       "deployments": "write",
         *       "single_file": "read"
         *     }
         */
        "app-permissions": {
            /**
             * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
             * @enum {string}
             */
            actions?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
             * @enum {string}
             */
            administration?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for checks on code.
             * @enum {string}
             */
            checks?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to create, edit, delete, and list Codespaces.
             * @enum {string}
             */
            codespaces?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
             * @enum {string}
             */
            contents?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage Dependabot secrets.
             * @enum {string}
             */
            dependabot_secrets?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for deployments and deployment statuses.
             * @enum {string}
             */
            deployments?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for managing repository environments.
             * @enum {string}
             */
            environments?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
             * @enum {string}
             */
            issues?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
             * @enum {string}
             */
            metadata?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for packages published to GitHub Packages.
             * @enum {string}
             */
            packages?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
             * @enum {string}
             */
            pages?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
             * @enum {string}
             */
            pull_requests?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
             * @enum {string}
             */
            repository_custom_properties?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage the post-receive hooks for a repository.
             * @enum {string}
             */
            repository_hooks?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage repository projects, columns, and cards.
             * @enum {string}
             */
            repository_projects?: "read" | "write" | "admin";
            /**
             * @description The level of permission to grant the access token to view and manage secret scanning alerts.
             * @enum {string}
             */
            secret_scanning_alerts?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage repository secrets.
             * @enum {string}
             */
            secrets?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage security events like code scanning alerts.
             * @enum {string}
             */
            security_events?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage just a single file.
             * @enum {string}
             */
            single_file?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for commit statuses.
             * @enum {string}
             */
            statuses?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage Dependabot alerts.
             * @enum {string}
             */
            vulnerability_alerts?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to update GitHub Actions workflow files.
             * @enum {string}
             */
            workflows?: "write";
            /**
             * @description The level of permission to grant the access token for organization teams and members.
             * @enum {string}
             */
            members?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage access to an organization.
             * @enum {string}
             */
            organization_administration?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for custom repository roles management.
             * @enum {string}
             */
            organization_custom_roles?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for custom organization roles management.
             * @enum {string}
             */
            organization_custom_org_roles?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for custom property management.
             * @enum {string}
             */
            organization_custom_properties?: "read" | "write" | "admin";
            /**
             * @description The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
             * @enum {string}
             */
            organization_copilot_seat_management?: "write";
            /**
             * @description The level of permission to grant the access token to view and manage announcement banners for an organization.
             * @enum {string}
             */
            organization_announcement_banners?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view events triggered by an activity in an organization.
             * @enum {string}
             */
            organization_events?: "read";
            /**
             * @description The level of permission to grant the access token to manage the post-receive hooks for an organization.
             * @enum {string}
             */
            organization_hooks?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
             * @enum {string}
             */
            organization_personal_access_tokens?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
             * @enum {string}
             */
            organization_personal_access_token_requests?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for viewing an organization's plan.
             * @enum {string}
             */
            organization_plan?: "read";
            /**
             * @description The level of permission to grant the access token to manage organization projects and projects public preview (where available).
             * @enum {string}
             */
            organization_projects?: "read" | "write" | "admin";
            /**
             * @description The level of permission to grant the access token for organization packages published to GitHub Packages.
             * @enum {string}
             */
            organization_packages?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage organization secrets.
             * @enum {string}
             */
            organization_secrets?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
             * @enum {string}
             */
            organization_self_hosted_runners?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage users blocked by the organization.
             * @enum {string}
             */
            organization_user_blocking?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage team discussions and related comments.
             * @enum {string}
             */
            team_discussions?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage the email addresses belonging to a user.
             * @enum {string}
             */
            email_addresses?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage the followers belonging to a user.
             * @enum {string}
             */
            followers?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage git SSH keys.
             * @enum {string}
             */
            git_ssh_keys?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage GPG keys belonging to a user.
             * @enum {string}
             */
            gpg_keys?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage interaction limits on a repository.
             * @enum {string}
             */
            interaction_limits?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage the profile settings belonging to a user.
             * @enum {string}
             */
            profile?: "write";
            /**
             * @description The level of permission to grant the access token to list and manage repositories a user is starring.
             * @enum {string}
             */
            starring?: "read" | "write";
        };
        /**
         * Simple User
         * @description A GitHub user.
         */
        "nullable-simple-user": {
            name?: string | null;
            email?: string | null;
            /** @example octocat */
            login: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example MDQ6VXNlcjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /** @example 41d064eb2195891e12d0413f63227ea7 */
            gravatar_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/followers
             */
            followers_url: string;
            /** @example https://api.github.com/users/octocat/following{/other_user} */
            following_url: string;
            /** @example https://api.github.com/users/octocat/gists{/gist_id} */
            gists_url: string;
            /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
            starred_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/orgs
             */
            organizations_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repos_url: string;
            /** @example https://api.github.com/users/octocat/events{/privacy} */
            events_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/received_events
             */
            received_events_url: string;
            /** @example User */
            type: string;
            site_admin: boolean;
            /** @example "2020-07-09T00:17:55Z" */
            starred_at?: string;
            /** @example public */
            user_view_type?: string;
        } | null;
        /**
         * Installation
         * @description Installation
         */
        installation: {
            /**
             * @description The ID of the installation.
             * @example 1
             */
            id: number;
            account: (components["schemas"]["simple-user"] | components["schemas"]["enterprise"]) | null;
            /**
             * @description Describe whether all repositories have been selected or there's a selection involved
             * @enum {string}
             */
            repository_selection: "all" | "selected";
            /**
             * Format: uri
             * @example https://api.github.com/app/installations/1/access_tokens
             */
            access_tokens_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/installation/repositories
             */
            repositories_url: string;
            /**
             * Format: uri
             * @example https://github.com/organizations/github/settings/installations/1
             */
            html_url: string;
            /** @example 1 */
            app_id: number;
            /** @example Iv1.ab1112223334445c */
            client_id?: string;
            /** @description The ID of the user or organization this token is being scoped to. */
            target_id: number;
            /** @example Organization */
            target_type: string;
            permissions: components["schemas"]["app-permissions"];
            events: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** @example config.yaml */
            single_file_name: string | null;
            /** @example true */
            has_multiple_single_files?: boolean;
            /** @example [
             *       "config.yml",
             *       ".github/issue_TEMPLATE.md"
             *     ] */
            single_file_paths?: string[];
            /** @example github-actions */
            app_slug: string;
            suspended_by: components["schemas"]["nullable-simple-user"];
            /** Format: date-time */
            suspended_at: string | null;
            /** @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com" */
            contact_email?: string | null;
        };
        /**
         * License Simple
         * @description License Simple
         */
        "nullable-license-simple": {
            /** @example mit */
            key: string;
            /** @example MIT License */
            name: string;
            /**
             * Format: uri
             * @example https://api.github.com/licenses/mit
             */
            url: string | null;
            /** @example MIT */
            spdx_id: string | null;
            /** @example MDc6TGljZW5zZW1pdA== */
            node_id: string;
            /** Format: uri */
            html_url?: string;
        } | null;
        /**
         * Repository
         * @description A repository on GitHub.
         */
        repository: {
            /**
             * Format: int64
             * @description Unique identifier of the repository
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Team Environment
             */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            /** @example git:github.com/octocat/Hello-World.git */
            git_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            /** @example git@github.com:octocat/Hello-World.git */
            ssh_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            /** @example https://github.com/octocat/Hello-World.git */
            clone_url: string;
            /**
             * Format: uri
             * @example git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            /**
             * Format: uri
             * @example https://svn.github.com/octocat/Hello-World
             */
            svn_url: string;
            /**
             * Format: uri
             * @example https://github.com
             */
            homepage: string | null;
            language: string | null;
            /** @example 9 */
            forks_count: number;
            /** @example 80 */
            stargazers_count: number;
            /** @example 80 */
            watchers_count: number;
            /**
             * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
             * @example 108
             */
            size: number;
            /**
             * @description The default branch of the repository.
             * @example master
             */
            default_branch: string;
            /** @example 0 */
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             * @example true
             */
            is_template: boolean;
            topics?: string[];
            /**
             * @description Whether issues are enabled.
             * @default true
             * @example true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             * @example true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             * @example true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @deprecated
             * @description Whether downloads are enabled.
             * @default true
             * @example true
             */
            has_downloads: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             * @example true
             */
            has_discussions: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             * @example true
             */
            allow_rebase_merge: boolean;
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             * @example true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to allow Auto-merge to be used on pull requests.
             * @default false
             * @example false
             */
            allow_auto_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             * @example false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
             * @default false
             * @example false
             */
            allow_update_branch: boolean;
            /**
             * @deprecated
             * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default: boolean;
            /**
             * @description The default value for a squash merge commit title:
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            /**
             * @description The default value for a squash merge commit message:
             *
             *     - `PR_BODY` - default to the pull request's body.
             *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @description The default value for a merge commit message.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `PR_BODY` - default to the pull request's body.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             * @example true
             */
            allow_merge_commit: boolean;
            /** @description Whether to allow forking this repo */
            allow_forking?: boolean;
            /**
             * @description Whether to require contributors to sign off on web-based commits
             * @default false
             */
            web_commit_signoff_required: boolean;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            /** @example "2020-07-09T00:17:42Z" */
            starred_at?: string;
            /** @description Whether anonymous git access is enabled for this repository */
            anonymous_access_enabled?: boolean;
            /** @description The status of the code search index for this repository */
            code_search_index_status?: {
                lexical_search_ok?: boolean;
                lexical_commit_sha?: string;
            };
        };
        /**
         * Installation Token
         * @description Authentication token for a GitHub App installed on a user or org.
         */
        "installation-token": {
            token: string;
            expires_at: string;
            permissions?: components["schemas"]["app-permissions"];
            /** @enum {string} */
            repository_selection?: "all" | "selected";
            repositories?: components["schemas"]["repository"][];
            /** @example README.md */
            single_file?: string;
            /** @example true */
            has_multiple_single_files?: boolean;
            /** @example [
             *       "config.yml",
             *       ".github/issue_TEMPLATE.md"
             *     ] */
            single_file_paths?: string[];
        };
        /** Scoped Installation */
        "nullable-scoped-installation": {
            permissions: components["schemas"]["app-permissions"];
            /**
             * @description Describe whether all repositories have been selected or there's a selection involved
             * @enum {string}
             */
            repository_selection: "all" | "selected";
            /** @example config.yaml */
            single_file_name: string | null;
            /** @example true */
            has_multiple_single_files?: boolean;
            /** @example [
             *       "config.yml",
             *       ".github/issue_TEMPLATE.md"
             *     ] */
            single_file_paths?: string[];
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repositories_url: string;
            account: components["schemas"]["simple-user"];
        } | null;
        /**
         * Authorization
         * @description The authorization for an OAuth app, GitHub App, or a Personal Access Token.
         */
        authorization: {
            /** Format: int64 */
            id: number;
            /** Format: uri */
            url: string;
            /** @description A list of scopes that this authorization is in. */
            scopes: string[] | null;
            token: string;
            token_last_eight: string | null;
            hashed_token: string | null;
            app: {
                client_id: string;
                name: string;
                /** Format: uri */
                url: string;
            };
            note: string | null;
            /** Format: uri */
            note_url: string | null;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
            fingerprint: string | null;
            user?: components["schemas"]["nullable-simple-user"];
            installation?: components["schemas"]["nullable-scoped-installation"];
            /** Format: date-time */
            expires_at: string | null;
        };
        /**
         * Simple Classroom Repository
         * @description A GitHub repository view for Classroom
         */
        "simple-classroom-repository": {
            /**
             * @description A unique identifier of the repository.
             * @example 1296269
             */
            id: number;
            /**
             * @description The full, globally unique name of the repository.
             * @example octocat/Hello-World
             */
            full_name: string;
            /**
             * Format: uri
             * @description The URL to view the repository on GitHub.com.
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /**
             * @description The GraphQL identifier of the repository.
             * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /** @description Whether the repository is private. */
            private: boolean;
            /**
             * @description The default branch for the repository.
             * @example main
             */
            default_branch: string;
        };
        /**
         * Organization Simple for Classroom
         * @description A GitHub organization.
         */
        "simple-classroom-organization": {
            /** @example 1 */
            id: number;
            /** @example github */
            login: string;
            /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/github
             */
            html_url: string;
            /** @example Github - Code thigns happen here */
            name: string | null;
            /** @example https://github.com/images/error/octocat_happy.gif */
            avatar_url: string;
        };
        /**
         * Classroom
         * @description A GitHub Classroom classroom
         */
        classroom: {
            /**
             * @description Unique identifier of the classroom.
             * @example 42
             */
            id: number;
            /**
             * @description The name of the classroom.
             * @example Programming Elixir
             */
            name: string;
            /**
             * @description Whether classroom is archived.
             * @example false
             */
            archived: boolean;
            organization: components["schemas"]["simple-classroom-organization"];
            /**
             * @description The URL of the classroom on GitHub Classroom.
             * @example https://classroom.github.com/classrooms/1-programming-elixir
             */
            url: string;
        };
        /**
         * Classroom Assignment
         * @description A GitHub Classroom assignment
         */
        "classroom-assignment": {
            /**
             * @description Unique identifier of the repository.
             * @example 42
             */
            id: number;
            /**
             * @description Whether an accepted assignment creates a public repository.
             * @example true
             */
            public_repo: boolean;
            /**
             * @description Assignment title.
             * @example Intro to Binaries
             */
            title: string;
            /**
             * @description Whether it's a group assignment or individual assignment.
             * @example individual
             * @enum {string}
             */
            type: "individual" | "group";
            /**
             * @description The link that a student can use to accept the assignment.
             * @example https://classroom.github.com/a/Lx7jiUgx
             */
            invite_link: string;
            /**
             * @description Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
             * @example true
             */
            invitations_enabled: boolean;
            /**
             * @description Sluggified name of the assignment.
             * @example intro-to-binaries
             */
            slug: string;
            /**
             * @description Whether students are admins on created repository when a student accepts the assignment.
             * @example true
             */
            students_are_repo_admins: boolean;
            /**
             * @description Whether feedback pull request will be created when a student accepts the assignment.
             * @example true
             */
            feedback_pull_requests_enabled: boolean;
            /**
             * @description The maximum allowable teams for the assignment.
             * @example 0
             */
            max_teams: number | null;
            /**
             * @description The maximum allowable members per team.
             * @example 0
             */
            max_members: number | null;
            /**
             * @description The selected editor for the assignment.
             * @example codespaces
             */
            editor: string;
            /**
             * @description The number of students that have accepted the assignment.
             * @example 25
             */
            accepted: number;
            /**
             * @description The number of students that have submitted the assignment.
             * @example 10
             */
            submitted: number;
            /**
             * @description The number of students that have passed the assignment.
             * @example 10
             */
            passing: number;
            /**
             * @description The programming language used in the assignment.
             * @example elixir
             */
            language: string;
            /**
             * Format: date-time
             * @description The time at which the assignment is due.
             * @example 2011-01-26T19:06:43Z
             */
            deadline: string | null;
            starter_code_repository: components["schemas"]["simple-classroom-repository"];
            classroom: components["schemas"]["classroom"];
        };
        /**
         * Simple Classroom User
         * @description A GitHub user simplified for Classroom.
         */
        "simple-classroom-user": {
            /** @example 1 */
            id: number;
            /** @example octocat */
            login: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
        };
        /**
         * Simple Classroom
         * @description A GitHub Classroom classroom
         */
        "simple-classroom": {
            /**
             * @description Unique identifier of the classroom.
             * @example 42
             */
            id: number;
            /**
             * @description The name of the classroom.
             * @example Programming Elixir
             */
            name: string;
            /**
             * @description Returns whether classroom is archived or not.
             * @example false
             */
            archived: boolean;
            /**
             * @description The url of the classroom on GitHub Classroom.
             * @example https://classroom.github.com/classrooms/1-programming-elixir
             */
            url: string;
        };
        /**
         * Simple Classroom Assignment
         * @description A GitHub Classroom assignment
         */
        "simple-classroom-assignment": {
            /**
             * @description Unique identifier of the repository.
             * @example 42
             */
            id: number;
            /**
             * @description Whether an accepted assignment creates a public repository.
             * @example true
             */
            public_repo: boolean;
            /**
             * @description Assignment title.
             * @example Intro to Binaries
             */
            title: string;
            /**
             * @description Whether it's a Group Assignment or Individual Assignment.
             * @example individual
             * @enum {string}
             */
            type: "individual" | "group";
            /**
             * @description The link that a student can use to accept the assignment.
             * @example https://classroom.github.com/a/Lx7jiUgx
             */
            invite_link: string;
            /**
             * @description Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
             * @example true
             */
            invitations_enabled: boolean;
            /**
             * @description Sluggified name of the assignment.
             * @example intro-to-binaries
             */
            slug: string;
            /**
             * @description Whether students are admins on created repository on accepted assignment.
             * @example true
             */
            students_are_repo_admins: boolean;
            /**
             * @description Whether feedback pull request will be created on assignment acceptance.
             * @example true
             */
            feedback_pull_requests_enabled: boolean;
            /**
             * @description The maximum allowable teams for the assignment.
             * @example 0
             */
            max_teams?: number | null;
            /**
             * @description The maximum allowable members per team.
             * @example 0
             */
            max_members?: number | null;
            /**
             * @description The selected editor for the assignment.
             * @example codespaces
             */
            editor: string;
            /**
             * @description The number of students that have accepted the assignment.
             * @example 25
             */
            accepted: number;
            /**
             * @description The number of students that have submitted the assignment.
             * @example 10
             */
            submitted: number;
            /**
             * @description The number of students that have passed the assignment.
             * @example 10
             */
            passing: number;
            /**
             * @description The programming language used in the assignment.
             * @example elixir
             */
            language: string;
            /**
             * Format: date-time
             * @description The time at which the assignment is due.
             * @example 2011-01-26T19:06:43Z
             */
            deadline: string | null;
            classroom: components["schemas"]["simple-classroom"];
        };
        /**
         * Classroom Accepted Assignment
         * @description A GitHub Classroom accepted assignment
         */
        "classroom-accepted-assignment": {
            /**
             * @description Unique identifier of the repository.
             * @example 42
             */
            id: number;
            /**
             * @description Whether an accepted assignment has been submitted.
             * @example true
             */
            submitted: boolean;
            /**
             * @description Whether a submission passed.
             * @example true
             */
            passing: boolean;
            /**
             * @description Count of student commits.
             * @example 5
             */
            commit_count: number;
            /**
             * @description Most recent grade.
             * @example 10/10
             */
            grade: string;
            students: components["schemas"]["simple-classroom-user"][];
            repository: components["schemas"]["simple-classroom-repository"];
            assignment: components["schemas"]["simple-classroom-assignment"];
        };
        /**
         * Classroom Assignment Grade
         * @description Grade for a student or groups GitHub Classroom assignment
         */
        "classroom-assignment-grade": {
            /** @description Name of the assignment */
            assignment_name: string;
            /** @description URL of the assignment */
            assignment_url: string;
            /** @description URL of the starter code for the assignment */
            starter_code_url: string;
            /** @description GitHub username of the student */
            github_username: string;
            /** @description Roster identifier of the student */
            roster_identifier: string;
            /** @description Name of the student's assignment repository */
            student_repository_name: string;
            /** @description URL of the student's assignment repository */
            student_repository_url: string;
            /** @description Timestamp of the student's assignment submission */
            submission_timestamp: string;
            /** @description Number of points awarded to the student */
            points_awarded: number;
            /** @description Number of points available for the assignment */
            points_available: number;
            /** @description If a group assignment, name of the group the student is in */
            group_name?: string;
        };
        /**
         * Code Of Conduct
         * @description Code Of Conduct
         */
        "code-of-conduct": {
            /** @example contributor_covenant */
            key: string;
            /** @example Contributor Covenant */
            name: string;
            /**
             * Format: uri
             * @example https://api.github.com/codes_of_conduct/contributor_covenant
             */
            url: string;
            /** @example # Contributor Covenant Code of Conduct
             *
             *     ## Our Pledge
             *
             *     In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
             *
             *     ## Our Standards
             *
             *     Examples of behavior that contributes to creating a positive environment include:
             *
             *     * Using welcoming and inclusive language
             *     * Being respectful of differing viewpoints and experiences
             *     * Gracefully accepting constructive criticism
             *     * Focusing on what is best for the community
             *     * Showing empathy towards other community members
             *
             *     Examples of unacceptable behavior by participants include:
             *
             *     * The use of sexualized language or imagery and unwelcome sexual attention or advances
             *     * Trolling, insulting/derogatory comments, and personal or political attacks
             *     * Public or private harassment
             *     * Publishing others' private information, such as a physical or electronic address, without explicit permission
             *     * Other conduct which could reasonably be considered inappropriate in a professional setting
             *
             *     ## Our Responsibilities
             *
             *     Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
             *                       to any instances of unacceptable behavior.
             *
             *     Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
             *
             *     ## Scope
             *
             *     This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
             *                       posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
             *
             *     ## Enforcement
             *
             *     Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
             *
             *     Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
             *
             *     ## Attribution
             *
             *     This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).
             *      */
            body?: string;
            /** Format: uri */
            html_url: string | null;
        };
        /** @description A code security configuration */
        "code-security-configuration": {
            /** @description The ID of the code security configuration */
            id?: number;
            /** @description The name of the code security configuration. Must be unique within the organization. */
            name?: string;
            /**
             * @description The type of the code security configuration.
             * @enum {string}
             */
            target_type?: "global" | "organization" | "enterprise";
            /** @description A description of the code security configuration */
            description?: string;
            /**
             * @description The enablement status of GitHub Advanced Security
             * @enum {string}
             */
            advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
            /**
             * @description The enablement status of Dependency Graph
             * @enum {string}
             */
            dependency_graph?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of Automatic dependency submission
             * @enum {string}
             */
            dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
            /** @description Feature options for Automatic dependency submission */
            dependency_graph_autosubmit_action_options?: {
                /** @description Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
                labeled_runners?: boolean;
            };
            /**
             * @description The enablement status of Dependabot alerts
             * @enum {string}
             */
            dependabot_alerts?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of Dependabot security updates
             * @enum {string}
             */
            dependabot_security_updates?: "enabled" | "disabled" | "not_set";
            /** @description Feature options for code scanning */
            code_scanning_options?: {
                /** @description Whether to allow repos which use advanced setup */
                allow_advanced?: boolean | null;
            } | null;
            /**
             * @description The enablement status of code scanning default setup
             * @enum {string}
             */
            code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
            /** @description Feature options for code scanning default setup */
            code_scanning_default_setup_options?: {
                /**
                 * @description Whether to use labeled runners or standard GitHub runners.
                 * @enum {string|null}
                 */
                runner_type?: "standard" | "labeled" | "not_set" | null;
                /** @description The label of the runner to use for code scanning when runner_type is 'labeled'. */
                runner_label?: string | null;
            } | null;
            /**
             * @description The enablement status of code scanning delegated alert dismissal
             * @enum {string}
             */
            code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of secret scanning
             * @enum {string}
             */
            secret_scanning?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of secret scanning push protection
             * @enum {string}
             */
            secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of secret scanning delegated bypass
             * @enum {string}
             */
            secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
            /** @description Feature options for secret scanning delegated bypass */
            secret_scanning_delegated_bypass_options?: {
                /** @description The bypass reviewers for secret scanning delegated bypass */
                reviewers?: {
                    /** @description The ID of the team or role selected as a bypass reviewer */
                    reviewer_id: number;
                    /**
                     * @description The type of the bypass reviewer
                     * @enum {string}
                     */
                    reviewer_type: "TEAM" | "ROLE";
                }[];
            };
            /**
             * @description The enablement status of secret scanning validity checks
             * @enum {string}
             */
            secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of secret scanning non-provider patterns
             * @enum {string}
             */
            secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of Copilot secret scanning
             * @enum {string}
             */
            secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of secret scanning delegated alert dismissal
             * @enum {string}
             */
            secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enablement status of private vulnerability reporting
             * @enum {string}
             */
            private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
            /**
             * @description The enforcement status for a security configuration
             * @enum {string}
             */
            enforcement?: "enforced" | "unenforced";
            /**
             * Format: uri
             * @description The URL of the configuration
             */
            url?: string;
            /**
             * Format: uri
             * @description The URL of the configuration
             */
            html_url?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** @description Security Configuration feature options for code scanning */
        "code-scanning-options": {
            /** @description Whether to allow repos which use advanced setup */
            allow_advanced?: boolean | null;
        } | null;
        /** @description Feature options for code scanning default setup */
        "code-scanning-default-setup-options": {
            /**
             * @description Whether to use labeled runners or standard GitHub runners.
             * @enum {string}
             */
            runner_type?: "standard" | "labeled" | "not_set";
            /** @description The label of the runner to use for code scanning default setup when runner_type is 'labeled'. */
            runner_label?: string | null;
        } | null;
        /** @description A list of default code security configurations */
        "code-security-default-configurations": {
            /**
             * @description The visibility of newly created repositories for which the code security configuration will be applied to by default
             * @enum {unknown}
             */
            default_for_new_repos?: "public" | "private_and_internal" | "all";
            configuration?: components["schemas"]["code-security-configuration"];
        }[];
        /**
         * Simple Repository
         * @description A GitHub repository.
         */
        "simple-repository": {
            /**
             * Format: int64
             * @description A unique identifier of the repository.
             * @example 1296269
             */
            id: number;
            /**
             * @description The GraphQL identifier of the repository.
             * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Hello-World
             */
            name: string;
            /**
             * @description The full, globally unique, name of the repository.
             * @example octocat/Hello-World
             */
            full_name: string;
            owner: components["schemas"]["simple-user"];
            /** @description Whether the repository is private. */
            private: boolean;
            /**
             * Format: uri
             * @description The URL to view the repository on GitHub.com.
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /**
             * @description The repository description.
             * @example This your first repo!
             */
            description: string | null;
            /** @description Whether the repository is a fork. */
            fork: boolean;
            /**
             * Format: uri
             * @description The URL to get more information about the repository from the GitHub API.
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /**
             * @description A template for the API URL to download the repository as an archive.
             * @example https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * @description A template for the API URL to list the available assignees for issues in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * @description A template for the API URL to create or retrieve a raw Git blob in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * @description A template for the API URL to get information about branches in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * @description A template for the API URL to get information about collaborators of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * @description A template for the API URL to get information about comments on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * @description A template for the API URL to get information about commits on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * @description A template for the API URL to compare two commits or refs.
             * @example https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * @description A template for the API URL to get the contents of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * Format: uri
             * @description A template for the API URL to list the contributors to the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @description The API URL to list the deployments of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @description The API URL to list the downloads on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @description The API URL to list the events of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @description The API URL to list the forks of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /**
             * @description A template for the API URL to get information about Git commits of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * @description A template for the API URL to get information about Git refs of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * @description A template for the API URL to get information about Git tags of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            /**
             * @description A template for the API URL to get information about issue comments on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * @description A template for the API URL to get information about issue events on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * @description A template for the API URL to get information about issues on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * @description A template for the API URL to get information about deploy keys on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * @description A template for the API URL to get information about labels of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * Format: uri
             * @description The API URL to get information about the languages of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @description The API URL to merge branches in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /**
             * @description A template for the API URL to get information about milestones of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * @description A template for the API URL to get information about notifications on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * @description A template for the API URL to get information about pull requests on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * @description A template for the API URL to get information about releases on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            /**
             * Format: uri
             * @description The API URL to list the stargazers on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /**
             * @description A template for the API URL to get information about statuses of a commit.
             * @example https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * Format: uri
             * @description The API URL to list the subscribers on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @description The API URL to subscribe to notifications for this repository.
             * @example https://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @description The API URL to get information about tags on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @description The API URL to list the teams on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /**
             * @description A template for the API URL to create or retrieve a raw Git tree of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            /**
             * Format: uri
             * @description The API URL to list the hooks on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
        };
        /** @description Repositories associated with a code security configuration and attachment status */
        "code-security-configuration-repositories": {
            /**
             * @description The attachment status of the code security configuration on the repository.
             * @enum {string}
             */
            status?: "attached" | "attaching" | "detached" | "removed" | "enforced" | "failed" | "updating" | "removed_by_enterprise";
            repository?: components["schemas"]["simple-repository"];
        };
        /** @description The security alert number. */
        "alert-number": number;
        /** @description Details for the vulnerable package. */
        "dependabot-alert-package": {
            /** @description The package's language or package management ecosystem. */
            readonly ecosystem: string;
            /** @description The unique package name within its ecosystem. */
            readonly name: string;
        };
        /** @description Details pertaining to one vulnerable version range for the advisory. */
        "dependabot-alert-security-vulnerability": {
            package: components["schemas"]["dependabot-alert-package"];
            /**
             * @description The severity of the vulnerability.
             * @enum {string}
             */
            readonly severity: "low" | "medium" | "high" | "critical";
            /** @description Conditions that identify vulnerable versions of this vulnerability's package. */
            readonly vulnerable_version_range: string;
            /** @description Details pertaining to the package version that patches this vulnerability. */
            readonly first_patched_version: {
                /** @description The package version that patches this vulnerability. */
                readonly identifier: string;
            } | null;
        };
        /** @description Details for the GitHub Security Advisory. */
        "dependabot-alert-security-advisory": {
            /** @description The unique GitHub Security Advisory ID assigned to the advisory. */
            readonly ghsa_id: string;
            /** @description The unique CVE ID assigned to the advisory. */
            readonly cve_id: string | null;
            /** @description A short, plain text summary of the advisory. */
            readonly summary: string;
            /** @description A long-form Markdown-supported description of the advisory. */
            readonly description: string;
            /** @description Vulnerable version range information for the advisory. */
            readonly vulnerabilities: components["schemas"]["dependabot-alert-security-vulnerability"][];
            /**
             * @description The severity of the advisory.
             * @enum {string}
             */
            readonly severity: "low" | "medium" | "high" | "critical";
            /** @description Details for the advisory pertaining to the Common Vulnerability Scoring System. */
            readonly cvss: {
                /** @description The overall CVSS score of the advisory. */
                readonly score: number;
                /** @description The full CVSS vector string for the advisory. */
                readonly vector_string: string | null;
            };
            cvss_severities?: components["schemas"]["cvss-severities"];
            epss?: components["schemas"]["security-advisory-epss"];
            /** @description Details for the advisory pertaining to Common Weakness Enumeration. */
            readonly cwes: {
                /** @description The unique CWE ID. */
                readonly cwe_id: string;
                /** @description The short, plain text name of the CWE. */
                readonly name: string;
            }[];
            /** @description Values that identify this advisory among security information sources. */
            readonly identifiers: {
                /**
                 * @description The type of advisory identifier.
                 * @enum {string}
                 */
                readonly type: "CVE" | "GHSA";
                /** @description The value of the advisory identifer. */
                readonly value: string;
            }[];
            /** @description Links to additional advisory information. */
            readonly references: {
                /**
                 * Format: uri
                 * @description The URL of the reference.
                 */
                readonly url: string;
            }[];
            /**
             * Format: date-time
             * @description The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            readonly published_at: string;
            /**
             * Format: date-time
             * @description The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            readonly updated_at: string;
            /**
             * Format: date-time
             * @description The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            readonly withdrawn_at: string | null;
        };
        /**
         * Format: uri
         * @description The REST API URL of the alert resource.
         */
        "alert-url": string;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        "alert-html-url": string;
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "alert-created-at": string;
        /**
         * Format: date-time
         * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "alert-updated-at": string;
        /**
         * Format: date-time
         * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "alert-dismissed-at": string | null;
        /**
         * Format: date-time
         * @description The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "alert-fixed-at": string | null;
        /**
         * Format: date-time
         * @description The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "alert-auto-dismissed-at": string | null;
        /** @description A Dependabot alert. */
        "dependabot-alert-with-repository": {
            number: components["schemas"]["alert-number"];
            /**
             * @description The state of the Dependabot alert.
             * @enum {string}
             */
            readonly state: "auto_dismissed" | "dismissed" | "fixed" | "open";
            /** @description Details for the vulnerable dependency. */
            readonly dependency: {
                package?: components["schemas"]["dependabot-alert-package"];
                /** @description The full path to the dependency manifest file, relative to the root of the repository. */
                readonly manifest_path?: string;
                /**
                 * @description The execution scope of the vulnerable dependency.
                 * @enum {string|null}
                 */
                readonly scope?: "development" | "runtime" | null;
                /**
                 * @description The vulnerable dependency's relationship to your project.
                 *
                 *     > [!NOTE]
                 *     > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
                 *
                 * @enum {string|null}
                 */
                readonly relationship?: "unknown" | "direct" | "transitive" | null;
            };
            security_advisory: components["schemas"]["dependabot-alert-security-advisory"];
            security_vulnerability: components["schemas"]["dependabot-alert-security-vulnerability"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            created_at: components["schemas"]["alert-created-at"];
            updated_at: components["schemas"]["alert-updated-at"];
            dismissed_at: components["schemas"]["alert-dismissed-at"];
            dismissed_by: components["schemas"]["nullable-simple-user"];
            /**
             * @description The reason that the alert was dismissed.
             * @enum {string|null}
             */
            dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | null;
            /** @description An optional comment associated with the alert's dismissal. */
            dismissed_comment: string | null;
            fixed_at: components["schemas"]["alert-fixed-at"];
            auto_dismissed_at?: components["schemas"]["alert-auto-dismissed-at"];
            repository: components["schemas"]["simple-repository"];
        };
        /**
         * Format: date-time
         * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "nullable-alert-updated-at": string | null;
        /**
         * @description Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
         * @enum {string}
         */
        "secret-scanning-alert-state": "open" | "resolved";
        /**
         * @description **Required when the `state` is `resolved`.** The reason for resolving the alert.
         * @enum {string|null}
         */
        "secret-scanning-alert-resolution": "false_positive" | "wont_fix" | "revoked" | "used_in_tests" | null;
        /** @description Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
        "secret-scanning-location-commit": {
            /**
             * @description The file path in the repository
             * @example /example/secrets.txt
             */
            path: string;
            /** @description Line number at which the secret starts in the file */
            start_line: number;
            /** @description Line number at which the secret ends in the file */
            end_line: number;
            /** @description The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
            start_column: number;
            /** @description The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
            end_column: number;
            /**
             * @description SHA-1 hash ID of the associated blob
             * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
             */
            blob_sha: string;
            /** @description The API URL to get the associated blob resource */
            blob_url: string;
            /**
             * @description SHA-1 hash ID of the associated commit
             * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
             */
            commit_sha: string;
            /** @description The API URL to get the associated commit resource */
            commit_url: string;
        };
        /** @description Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki. */
        "secret-scanning-location-wiki-commit": {
            /**
             * @description The file path of the wiki page
             * @example /example/Home.md
             */
            path: string;
            /** @description Line number at which the secret starts in the file */
            start_line: number;
            /** @description Line number at which the secret ends in the file */
            end_line: number;
            /** @description The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII. */
            start_column: number;
            /** @description The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII. */
            end_column: number;
            /**
             * @description SHA-1 hash ID of the associated blob
             * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
             */
            blob_sha: string;
            /**
             * @description The GitHub URL to get the associated wiki page
             * @example https://github.com/octocat/Hello-World/wiki/Home/302c0b7e200761c9dd9b57e57db540ee0b4293a5
             */
            page_url: string;
            /**
             * @description SHA-1 hash ID of the associated commit
             * @example 302c0b7e200761c9dd9b57e57db540ee0b4293a5
             */
            commit_sha: string;
            /**
             * @description The GitHub URL to get the associated wiki commit
             * @example https://github.com/octocat/Hello-World/wiki/_compare/302c0b7e200761c9dd9b57e57db540ee0b4293a5
             */
            commit_url: string;
        };
        /** @description Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue. */
        "secret-scanning-location-issue-title": {
            /**
             * Format: uri
             * @description The API URL to get the issue where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
             */
            issue_title_url: string;
        };
        /** @description Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue. */
        "secret-scanning-location-issue-body": {
            /**
             * Format: uri
             * @description The API URL to get the issue where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
             */
            issue_body_url: string;
        };
        /** @description Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue. */
        "secret-scanning-location-issue-comment": {
            /**
             * Format: uri
             * @description The API URL to get the issue comment where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451
             */
            issue_comment_url: string;
        };
        /** @description Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion. */
        "secret-scanning-location-discussion-title": {
            /**
             * Format: uri
             * @description The URL to the discussion where the secret was detected.
             * @example https://github.com/community/community/discussions/39082
             */
            discussion_title_url: string;
        };
        /** @description Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion. */
        "secret-scanning-location-discussion-body": {
            /**
             * Format: uri
             * @description The URL to the discussion where the secret was detected.
             * @example https://github.com/community/community/discussions/39082#discussion-4566270
             */
            discussion_body_url: string;
        };
        /** @description Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion. */
        "secret-scanning-location-discussion-comment": {
            /**
             * Format: uri
             * @description The API URL to get the discussion comment where the secret was detected.
             * @example https://github.com/community/community/discussions/39082#discussioncomment-4158232
             */
            discussion_comment_url: string;
        };
        /** @description Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request. */
        "secret-scanning-location-pull-request-title": {
            /**
             * Format: uri
             * @description The API URL to get the pull request where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/2846
             */
            pull_request_title_url: string;
        };
        /** @description Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request. */
        "secret-scanning-location-pull-request-body": {
            /**
             * Format: uri
             * @description The API URL to get the pull request where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/2846
             */
            pull_request_body_url: string;
        };
        /** @description Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request. */
        "secret-scanning-location-pull-request-comment": {
            /**
             * Format: uri
             * @description The API URL to get the pull request comment where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451
             */
            pull_request_comment_url: string;
        };
        /** @description Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request. */
        "secret-scanning-location-pull-request-review": {
            /**
             * Format: uri
             * @description The API URL to get the pull request review where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/2846/reviews/80
             */
            pull_request_review_url: string;
        };
        /** @description Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request. */
        "secret-scanning-location-pull-request-review-comment": {
            /**
             * Format: uri
             * @description The API URL to get the pull request review comment where the secret was detected.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/12
             */
            pull_request_review_comment_url: string;
        };
        /** @description Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request.
         *      */
        "nullable-secret-scanning-first-detected-location": (components["schemas"]["secret-scanning-location-commit"] | components["schemas"]["secret-scanning-location-wiki-commit"] | components["schemas"]["secret-scanning-location-issue-title"] | components["schemas"]["secret-scanning-location-issue-body"] | components["schemas"]["secret-scanning-location-issue-comment"] | components["schemas"]["secret-scanning-location-discussion-title"] | components["schemas"]["secret-scanning-location-discussion-body"] | components["schemas"]["secret-scanning-location-discussion-comment"] | components["schemas"]["secret-scanning-location-pull-request-title"] | components["schemas"]["secret-scanning-location-pull-request-body"] | components["schemas"]["secret-scanning-location-pull-request-comment"] | components["schemas"]["secret-scanning-location-pull-request-review"] | components["schemas"]["secret-scanning-location-pull-request-review-comment"]) | null;
        "organization-secret-scanning-alert": {
            number?: components["schemas"]["alert-number"];
            created_at?: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["nullable-alert-updated-at"];
            url?: components["schemas"]["alert-url"];
            html_url?: components["schemas"]["alert-html-url"];
            /**
             * Format: uri
             * @description The REST API URL of the code locations for this alert.
             */
            locations_url?: string;
            state?: components["schemas"]["secret-scanning-alert-state"];
            resolution?: components["schemas"]["secret-scanning-alert-resolution"];
            /**
             * Format: date-time
             * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            resolved_at?: string | null;
            resolved_by?: components["schemas"]["nullable-simple-user"];
            /** @description The type of secret that secret scanning detected. */
            secret_type?: string;
            /** @description User-friendly name for the detected secret, matching the `secret_type`.
             *     For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)." */
            secret_type_display_name?: string;
            /** @description The secret that was detected. */
            secret?: string;
            repository?: components["schemas"]["simple-repository"];
            /** @description Whether push protection was bypassed for the detected secret. */
            push_protection_bypassed?: boolean | null;
            push_protection_bypassed_by?: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            push_protection_bypassed_at?: string | null;
            push_protection_bypass_request_reviewer?: components["schemas"]["nullable-simple-user"];
            /** @description An optional comment when reviewing a push protection bypass. */
            push_protection_bypass_request_reviewer_comment?: string | null;
            /** @description An optional comment when requesting a push protection bypass. */
            push_protection_bypass_request_comment?: string | null;
            /**
             * Format: uri
             * @description The URL to a push protection bypass request.
             */
            push_protection_bypass_request_html_url?: string | null;
            /** @description The comment that was optionally added when this alert was closed */
            resolution_comment?: string | null;
            /**
             * @description The token status as of the latest validity check.
             * @enum {string}
             */
            validity?: "active" | "inactive" | "unknown";
            /** @description Whether the secret was publicly leaked. */
            publicly_leaked?: boolean | null;
            /** @description Whether the detected secret was found in multiple repositories in the same organization or enterprise. */
            multi_repo?: boolean | null;
            /** @description A boolean value representing whether or not alert is base64 encoded */
            is_base64_encoded?: boolean | null;
            first_location_detected?: components["schemas"]["nullable-secret-scanning-first-detected-location"];
            /** @description A boolean value representing whether or not the token in the alert was detected in more than one location. */
            has_more_locations?: boolean;
        };
        /**
         * Actor
         * @description Actor
         */
        actor: {
            id: number;
            login: string;
            display_login?: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            avatar_url: string;
        };
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        "nullable-milestone": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/milestones/v1.0
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
             */
            labels_url: string;
            /** @example 1002604 */
            id: number;
            /** @example MDk6TWlsZXN0b25lMTAwMjYwNA== */
            node_id: string;
            /**
             * @description The number of the milestone.
             * @example 42
             */
            number: number;
            /**
             * @description The state of the milestone.
             * @default open
             * @example open
             * @enum {string}
             */
            state: "open" | "closed";
            /**
             * @description The title of the milestone.
             * @example v1.0
             */
            title: string;
            /** @example Tracking milestone for version 1.0 */
            description: string | null;
            creator: components["schemas"]["nullable-simple-user"];
            /** @example 4 */
            open_issues: number;
            /** @example 8 */
            closed_issues: number;
            /**
             * Format: date-time
             * @example 2011-04-10T20:09:31Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2014-03-03T18:58:10Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2013-02-12T13:22:01Z
             */
            closed_at: string | null;
            /**
             * Format: date-time
             * @example 2012-10-09T23:39:01Z
             */
            due_on: string | null;
        } | null;
        /**
         * Issue Type
         * @description The type of issue.
         */
        "issue-type": {
            /** @description The unique identifier of the issue type. */
            id: number;
            /** @description The node identifier of the issue type. */
            node_id: string;
            /** @description The name of the issue type. */
            name: string;
            /** @description The description of the issue type. */
            description: string | null;
            /**
             * @description The color of the issue type.
             * @enum {string|null}
             */
            color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
            /**
             * Format: date-time
             * @description The time the issue type created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The time the issue type last updated.
             */
            updated_at?: string;
            /** @description The enabled state of the issue type. */
            is_enabled?: boolean;
        } | null;
        /**
         * GitHub app
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        "nullable-integration": {
            /**
             * @description Unique identifier of the GitHub app
             * @example 37
             */
            id: number;
            /**
             * @description The slug name of the GitHub app
             * @example probot-owners
             */
            slug?: string;
            /** @example MDExOkludGVncmF0aW9uMQ== */
            node_id: string;
            /** @example "Iv1.25b5d1e65ffc4022" */
            client_id?: string;
            owner: components["schemas"]["simple-user"] | components["schemas"]["enterprise"];
            /**
             * @description The name of the GitHub app
             * @example Probot Owners
             */
            name: string;
            /** @example The description of the app. */
            description: string | null;
            /**
             * Format: uri
             * @example https://example.com
             */
            external_url: string;
            /**
             * Format: uri
             * @example https://github.com/apps/super-ci
             */
            html_url: string;
            /**
             * Format: date-time
             * @example 2017-07-08T16:18:44-04:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2017-07-08T16:18:44-04:00
             */
            updated_at: string;
            /**
             * @description The set of permissions for the GitHub app
             * @example {
             *       "issues": "read",
             *       "deployments": "write"
             *     }
             */
            permissions: {
                issues?: string;
                checks?: string;
                metadata?: string;
                contents?: string;
                deployments?: string;
            } & {
                [key: string]: string;
            };
            /**
             * @description The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
             * @example [
             *       "label",
             *       "deployment"
             *     ]
             */
            events: string[];
            /**
             * @description The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
             * @example 5
             */
            installations_count?: number;
        } | null;
        /**
         * author_association
         * @description How the author is associated with the repository.
         * @example OWNER
         * @enum {string}
         */
        "author-association": "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
        /** Reaction Rollup */
        "reaction-rollup": {
            /** Format: uri */
            url: string;
            total_count: number;
            "+1": number;
            "-1": number;
            laugh: number;
            confused: number;
            heart: number;
            hooray: number;
            eyes: number;
            rocket: number;
        };
        /** Sub-issues Summary */
        "sub-issues-summary": {
            total: number;
            completed: number;
            percent_completed: number;
        };
        /**
         * Issue
         * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
         */
        issue: {
            /** Format: int64 */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue
             * @example https://api.github.com/repositories/42/issues/1
             */
            url: string;
            /** Format: uri */
            repository_url: string;
            labels_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            /**
             * @description Number uniquely identifying the issue within its repository
             * @example 42
             */
            number: number;
            /**
             * @description State of the issue; either 'open' or 'closed'
             * @example open
             */
            state: string;
            /**
             * @description The reason for the current state
             * @example not_planned
             * @enum {string|null}
             */
            state_reason?: "completed" | "reopened" | "not_planned" | "duplicate" | null;
            /**
             * @description Title of the issue
             * @example Widget creation fails in Safari on OS X 10.8
             */
            title: string;
            /**
             * @description Contents of the issue
             * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
             */
            body?: string | null;
            user: components["schemas"]["nullable-simple-user"];
            /**
             * @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
             * @example [
             *       "bug",
             *       "registration"
             *     ]
             */
            labels: (string | {
                /** Format: int64 */
                id?: number;
                node_id?: string;
                /** Format: uri */
                url?: string;
                name?: string;
                description?: string | null;
                color?: string | null;
                default?: boolean;
            })[];
            assignee: components["schemas"]["nullable-simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            milestone: components["schemas"]["nullable-milestone"];
            locked: boolean;
            active_lock_reason?: string | null;
            comments: number;
            pull_request?: {
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                diff_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                patch_url: string | null;
                /** Format: uri */
                url: string | null;
            };
            /** Format: date-time */
            closed_at: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            draft?: boolean;
            closed_by?: components["schemas"]["nullable-simple-user"];
            body_html?: string;
            body_text?: string;
            /** Format: uri */
            timeline_url?: string;
            type?: components["schemas"]["issue-type"];
            repository?: components["schemas"]["repository"];
            performed_via_github_app?: components["schemas"]["nullable-integration"];
            author_association: components["schemas"]["author-association"];
            reactions?: components["schemas"]["reaction-rollup"];
            sub_issues_summary?: components["schemas"]["sub-issues-summary"];
        };
        /**
         * Issue Comment
         * @description Comments provide a way for people to collaborate on an issue.
         */
        "issue-comment": {
            /**
             * Format: int64
             * @description Unique identifier of the issue comment
             * @example 42
             */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue comment
             * @example https://api.github.com/repositories/42/issues/comments/1
             */
            url: string;
            /**
             * @description Contents of the issue comment
             * @example What version of Safari were you using when you observed this bug?
             */
            body?: string;
            body_text?: string;
            body_html?: string;
            /** Format: uri */
            html_url: string;
            user: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            updated_at: string;
            /** Format: uri */
            issue_url: string;
            author_association: components["schemas"]["author-association"];
            performed_via_github_app?: components["schemas"]["nullable-integration"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Event
         * @description Event
         */
        event: {
            id: string;
            type: string | null;
            actor: components["schemas"]["actor"];
            repo: {
                id: number;
                name: string;
                /** Format: uri */
                url: string;
            };
            org?: components["schemas"]["actor"];
            payload: {
                action?: string;
                issue?: components["schemas"]["issue"];
                comment?: components["schemas"]["issue-comment"];
                pages?: {
                    page_name?: string;
                    title?: string;
                    summary?: string | null;
                    action?: string;
                    sha?: string;
                    html_url?: string;
                }[];
            };
            public: boolean;
            /** Format: date-time */
            created_at: string | null;
        };
        /**
         * Link With Type
         * @description Hypermedia Link with Type
         */
        "link-with-type": {
            href: string;
            type: string;
        };
        /**
         * Feed
         * @description Feed
         */
        feed: {
            /** @example https://github.com/timeline */
            timeline_url: string;
            /** @example https://github.com/{user} */
            user_url: string;
            /** @example https://github.com/octocat */
            current_user_public_url?: string;
            /** @example https://github.com/octocat.private?token=abc123 */
            current_user_url?: string;
            /** @example https://github.com/octocat.private.actor?token=abc123 */
            current_user_actor_url?: string;
            /** @example https://github.com/octocat-org */
            current_user_organization_url?: string;
            /** @example [
             *       "https://github.com/organizations/github/octocat.private.atom?token=abc123"
             *     ] */
            current_user_organization_urls?: string[];
            /** @example https://github.com/security-advisories */
            security_advisories_url?: string;
            /**
             * @description A feed of discussions for a given repository.
             * @example https://github.com/{user}/{repo}/discussions
             */
            repository_discussions_url?: string;
            /**
             * @description A feed of discussions for a given repository and category.
             * @example https://github.com/{user}/{repo}/discussions/categories/{category}
             */
            repository_discussions_category_url?: string;
            _links: {
                timeline: components["schemas"]["link-with-type"];
                user: components["schemas"]["link-with-type"];
                security_advisories?: components["schemas"]["link-with-type"];
                current_user?: components["schemas"]["link-with-type"];
                current_user_public?: components["schemas"]["link-with-type"];
                current_user_actor?: components["schemas"]["link-with-type"];
                current_user_organization?: components["schemas"]["link-with-type"];
                current_user_organizations?: components["schemas"]["link-with-type"][];
                repository_discussions?: components["schemas"]["link-with-type"];
                repository_discussions_category?: components["schemas"]["link-with-type"];
            };
        };
        /**
         * Base Gist
         * @description Base Gist
         */
        "base-gist": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            forks_url: string;
            /** Format: uri */
            commits_url: string;
            id: string;
            node_id: string;
            /** Format: uri */
            git_pull_url: string;
            /** Format: uri */
            git_push_url: string;
            /** Format: uri */
            html_url: string;
            files: {
                [key: string]: {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                    /**
                     * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
                     * @default utf-8
                     */
                    encoding: string;
                };
            };
            public: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            description: string | null;
            comments: number;
            comments_enabled?: boolean;
            user: components["schemas"]["nullable-simple-user"];
            /** Format: uri */
            comments_url: string;
            owner?: components["schemas"]["simple-user"];
            truncated?: boolean;
            forks?: unknown[];
            history?: unknown[];
        };
        /**
         * Public User
         * @description Public User
         */
        "public-user": {
            login: string;
            /** Format: int64 */
            id: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            user_view_type: "public";
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            events_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            site_admin: boolean;
            name: string | null;
            company: string | null;
            blog: string | null;
            location: string | null;
            /** Format: email */
            email: string | null;
            /** Format: email */
            notification_email?: string | null;
            hireable: boolean | null;
            bio: string | null;
            twitter_username?: string | null;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            /** @example 1 */
            private_gists?: number;
            /** @example 2 */
            total_private_repos?: number;
            /** @example 2 */
            owned_private_repos?: number;
            /** @example 1 */
            disk_usage?: number;
            /** @example 3 */
            collaborators?: number;
        };
        /**
         * Gist History
         * @description Gist History
         */
        "gist-history": {
            user?: components["schemas"]["nullable-simple-user"];
            version?: string;
            /** Format: date-time */
            committed_at?: string;
            change_status?: {
                total?: number;
                additions?: number;
                deletions?: number;
            };
            /** Format: uri */
            url?: string;
        };
        /**
         * Gist Simple
         * @description Gist Simple
         */
        "gist-simple": {
            /** @deprecated */
            forks?: {
                id?: string;
                /** Format: uri */
                url?: string;
                user?: components["schemas"]["public-user"];
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[] | null;
            /** @deprecated */
            history?: components["schemas"]["gist-history"][] | null;
            /**
             * Gist
             * @description Gist
             */
            fork_of?: {
                /** Format: uri */
                url: string;
                /** Format: uri */
                forks_url: string;
                /** Format: uri */
                commits_url: string;
                id: string;
                node_id: string;
                /** Format: uri */
                git_pull_url: string;
                /** Format: uri */
                git_push_url: string;
                /** Format: uri */
                html_url: string;
                files: {
                    [key: string]: {
                        filename?: string;
                        type?: string;
                        language?: string;
                        raw_url?: string;
                        size?: number;
                    };
                };
                public: boolean;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                description: string | null;
                comments: number;
                comments_enabled?: boolean;
                user: components["schemas"]["nullable-simple-user"];
                /** Format: uri */
                comments_url: string;
                owner?: components["schemas"]["nullable-simple-user"];
                truncated?: boolean;
                forks?: unknown[];
                history?: unknown[];
            } | null;
            url?: string;
            forks_url?: string;
            commits_url?: string;
            id?: string;
            node_id?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            files?: {
                [key: string]: {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                    truncated?: boolean;
                    content?: string;
                    /**
                     * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
                     * @default utf-8
                     */
                    encoding: string;
                } | null;
            };
            public?: boolean;
            created_at?: string;
            updated_at?: string;
            description?: string | null;
            comments?: number;
            comments_enabled?: boolean;
            user?: string | null;
            comments_url?: string;
            owner?: components["schemas"]["simple-user"];
            truncated?: boolean;
        };
        /**
         * Gist Comment
         * @description A comment made to a gist.
         */
        "gist-comment": {
            /** @example 1 */
            id: number;
            /** @example MDExOkdpc3RDb21tZW50MQ== */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
             */
            url: string;
            /**
             * @description The comment text.
             * @example Body of the attachment
             */
            body: string;
            user: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @example 2011-04-18T23:23:56Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-04-18T23:23:56Z
             */
            updated_at: string;
            author_association: components["schemas"]["author-association"];
        };
        /**
         * Gist Commit
         * @description Gist Commit
         */
        "gist-commit": {
            /**
             * Format: uri
             * @example https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
             */
            url: string;
            /** @example 57a7f021a713b1c5a6a199b54cc514735d2d462f */
            version: string;
            user: components["schemas"]["nullable-simple-user"];
            change_status: {
                total?: number;
                additions?: number;
                deletions?: number;
            };
            /**
             * Format: date-time
             * @example 2010-04-14T02:15:15Z
             */
            committed_at: string;
        };
        /**
         * Gitignore Template
         * @description Gitignore Template
         */
        "gitignore-template": {
            /** @example C */
            name: string;
            /** @example # Object files
             *     *.o
             *
             *     # Libraries
             *     *.lib
             *     *.a
             *
             *     # Shared objects (inc. Windows DLLs)
             *     *.dll
             *     *.so
             *     *.so.*
             *     *.dylib
             *
             *     # Executables
             *     *.exe
             *     *.out
             *     *.app
             *      */
            source: string;
        };
        /**
         * License Simple
         * @description License Simple
         */
        "license-simple": {
            /** @example mit */
            key: string;
            /** @example MIT License */
            name: string;
            /**
             * Format: uri
             * @example https://api.github.com/licenses/mit
             */
            url: string | null;
            /** @example MIT */
            spdx_id: string | null;
            /** @example MDc6TGljZW5zZW1pdA== */
            node_id: string;
            /** Format: uri */
            html_url?: string;
        };
        /**
         * License
         * @description License
         */
        license: {
            /** @example mit */
            key: string;
            /** @example MIT License */
            name: string;
            /** @example MIT */
            spdx_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/licenses/mit
             */
            url: string | null;
            /** @example MDc6TGljZW5zZW1pdA== */
            node_id: string;
            /**
             * Format: uri
             * @example http://choosealicense.com/licenses/mit/
             */
            html_url: string;
            /** @example A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty. */
            description: string;
            /** @example Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders. */
            implementation: string;
            /** @example [
             *       "commercial-use",
             *       "modifications",
             *       "distribution",
             *       "sublicense",
             *       "private-use"
             *     ] */
            permissions: string[];
            /** @example [
             *       "include-copyright"
             *     ] */
            conditions: string[];
            /** @example [
             *       "no-liability"
             *     ] */
            limitations: string[];
            /** @example
             *
             *     The MIT License (MIT)
             *
             *     Copyright (c) [year] [fullname]
             *
             *     Permission is hereby granted, free of charge, to any person obtaining a copy
             *     of this software and associated documentation files (the "Software"), to deal
             *     in the Software without restriction, including without limitation the rights
             *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             *     copies of the Software, and to permit persons to whom the Software is
             *     furnished to do so, subject to the following conditions:
             *
             *     The above copyright notice and this permission notice shall be included in all
             *     copies or substantial portions of the Software.
             *
             *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             *     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             *     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
             *     SOFTWARE.
             *      */
            body: string;
            /** @example true */
            featured: boolean;
        };
        /**
         * Marketplace Listing Plan
         * @description Marketplace Listing Plan
         */
        "marketplace-listing-plan": {
            /**
             * Format: uri
             * @example https://api.github.com/marketplace_listing/plans/1313
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/marketplace_listing/plans/1313/accounts
             */
            accounts_url: string;
            /** @example 1313 */
            id: number;
            /** @example 3 */
            number: number;
            /** @example Pro */
            name: string;
            /** @example A professional-grade CI solution */
            description: string;
            /** @example 1099 */
            monthly_price_in_cents: number;
            /** @example 11870 */
            yearly_price_in_cents: number;
            /**
             * @example FLAT_RATE
             * @enum {string}
             */
            price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
            /** @example true */
            has_free_trial: boolean;
            unit_name: string | null;
            /** @example published */
            state: string;
            /** @example [
             *       "Up to 25 private repositories",
             *       "11 concurrent builds"
             *     ] */
            bullets: string[];
        };
        /**
         * Marketplace Purchase
         * @description Marketplace Purchase
         */
        "marketplace-purchase": {
            url: string;
            type: string;
            id: number;
            login: string;
            organization_billing_email?: string;
            email?: string | null;
            marketplace_pending_change?: {
                is_installed?: boolean;
                effective_date?: string;
                unit_count?: number | null;
                id?: number;
                plan?: components["schemas"]["marketplace-listing-plan"];
            } | null;
            marketplace_purchase: {
                billing_cycle?: string;
                next_billing_date?: string | null;
                is_installed?: boolean;
                unit_count?: number | null;
                on_free_trial?: boolean;
                free_trial_ends_on?: string | null;
                updated_at?: string;
                plan?: components["schemas"]["marketplace-listing-plan"];
            };
        };
        /**
         * Api Overview
         * @description Api Overview
         */
        "api-overview": {
            /** @example true */
            verifiable_password_authentication: boolean;
            ssh_key_fingerprints?: {
                SHA256_RSA?: string;
                SHA256_DSA?: string;
                SHA256_ECDSA?: string;
                SHA256_ED25519?: string;
            };
            /** @example [
             *       "ssh-ed25519 ABCDEFGHIJKLMNOPQRSTUVWXYZ"
             *     ] */
            ssh_keys?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            hooks?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            github_enterprise_importer?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            web?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            api?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            git?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            packages?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            pages?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            importer?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            actions?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            actions_macos?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            codespaces?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            dependabot?: string[];
            /** @example [
             *       "192.0.2.1"
             *     ] */
            copilot?: string[];
            domains?: {
                website?: string[];
                codespaces?: string[];
                copilot?: string[];
                packages?: string[];
                actions?: string[];
                actions_inbound?: {
                    full_domains?: string[];
                    wildcard_domains?: string[];
                };
                artifact_attestations?: {
                    /** @example [
                     *       "example"
                     *     ] */
                    trust_domain?: string;
                    services?: string[];
                };
            };
        };
        "security-and-analysis": {
            /** @description Enable or disable GitHub Advanced Security for the repository.
             *
             *     For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
             *      */
            advanced_security?: {
                /** @enum {string} */
                status?: "enabled" | "disabled";
            };
            code_security?: {
                /** @enum {string} */
                status?: "enabled" | "disabled";
            };
            /** @description Enable or disable Dependabot security updates for the repository. */
            dependabot_security_updates?: {
                /**
                 * @description The enablement status of Dependabot security updates for the repository.
                 * @enum {string}
                 */
                status?: "enabled" | "disabled";
            };
            secret_scanning?: {
                /** @enum {string} */
                status?: "enabled" | "disabled";
            };
            secret_scanning_push_protection?: {
                /** @enum {string} */
                status?: "enabled" | "disabled";
            };
            secret_scanning_non_provider_patterns?: {
                /** @enum {string} */
                status?: "enabled" | "disabled";
            };
            secret_scanning_ai_detection?: {
                /** @enum {string} */
                status?: "enabled" | "disabled";
            };
        } | null;
        /**
         * Minimal Repository
         * @description Minimal Repository
         */
        "minimal-repository": {
            /**
             * Format: int64
             * @example 1296269
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /** @example Hello-World */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            git_url?: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            ssh_url?: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            clone_url?: string;
            mirror_url?: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            svn_url?: string;
            homepage?: string | null;
            language?: string | null;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            /** @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            has_discussions?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at?: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at?: string | null;
            permissions?: {
                admin?: boolean;
                maintain?: boolean;
                push?: boolean;
                triage?: boolean;
                pull?: boolean;
            };
            /** @example admin */
            role_name?: string;
            temp_clone_token?: string;
            delete_branch_on_merge?: boolean;
            subscribers_count?: number;
            network_count?: number;
            code_of_conduct?: components["schemas"]["code-of-conduct"];
            license?: {
                key?: string;
                name?: string;
                spdx_id?: string;
                url?: string;
                node_id?: string;
            } | null;
            /** @example 0 */
            forks?: number;
            /** @example 0 */
            open_issues?: number;
            /** @example 0 */
            watchers?: number;
            allow_forking?: boolean;
            /** @example false */
            web_commit_signoff_required?: boolean;
            security_and_analysis?: components["schemas"]["security-and-analysis"];
            /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
            custom_properties?: {
                [key: string]: unknown;
            };
        };
        /**
         * Thread
         * @description Thread
         */
        thread: {
            id: string;
            repository: components["schemas"]["minimal-repository"];
            subject: {
                title: string;
                url: string;
                latest_comment_url: string;
                type: string;
            };
            reason: string;
            unread: boolean;
            updated_at: string;
            last_read_at: string | null;
            url: string;
            /** @example https://api.github.com/notifications/threads/2/subscription */
            subscription_url: string;
        };
        /**
         * Thread Subscription
         * @description Thread Subscription
         */
        "thread-subscription": {
            /** @example true */
            subscribed: boolean;
            ignored: boolean;
            reason: string | null;
            /**
             * Format: date-time
             * @example 2012-10-06T21:34:12Z
             */
            created_at: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/notifications/threads/1/subscription
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/notifications/threads/1
             */
            thread_url?: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/1
             */
            repository_url?: string;
        };
        /**
         * Organization Simple
         * @description A GitHub organization.
         */
        "organization-simple": {
            /** @example github */
            login: string;
            /** @example 1 */
            id: number;
            /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/repos
             */
            repos_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/events
             */
            events_url: string;
            /** @example https://api.github.com/orgs/github/hooks */
            hooks_url: string;
            /** @example https://api.github.com/orgs/github/issues */
            issues_url: string;
            /** @example https://api.github.com/orgs/github/members{/member} */
            members_url: string;
            /** @example https://api.github.com/orgs/github/public_members{/member} */
            public_members_url: string;
            /** @example https://github.com/images/error/octocat_happy.gif */
            avatar_url: string;
            /** @example A great organization */
            description: string | null;
        };
        /**
         * Simple Repository
         * @description A GitHub repository.
         */
        "nullable-simple-repository": {
            /**
             * Format: int64
             * @description A unique identifier of the repository.
             * @example 1296269
             */
            id: number;
            /**
             * @description The GraphQL identifier of the repository.
             * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Hello-World
             */
            name: string;
            /**
             * @description The full, globally unique, name of the repository.
             * @example octocat/Hello-World
             */
            full_name: string;
            owner: components["schemas"]["simple-user"];
            /** @description Whether the repository is private. */
            private: boolean;
            /**
             * Format: uri
             * @description The URL to view the repository on GitHub.com.
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /**
             * @description The repository description.
             * @example This your first repo!
             */
            description: string | null;
            /** @description Whether the repository is a fork. */
            fork: boolean;
            /**
             * Format: uri
             * @description The URL to get more information about the repository from the GitHub API.
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /**
             * @description A template for the API URL to download the repository as an archive.
             * @example https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * @description A template for the API URL to list the available assignees for issues in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * @description A template for the API URL to create or retrieve a raw Git blob in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * @description A template for the API URL to get information about branches in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * @description A template for the API URL to get information about collaborators of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * @description A template for the API URL to get information about comments on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * @description A template for the API URL to get information about commits on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * @description A template for the API URL to compare two commits or refs.
             * @example https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * @description A template for the API URL to get the contents of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * Format: uri
             * @description A template for the API URL to list the contributors to the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @description The API URL to list the deployments of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @description The API URL to list the downloads on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @description The API URL to list the events of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @description The API URL to list the forks of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /**
             * @description A template for the API URL to get information about Git commits of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * @description A template for the API URL to get information about Git refs of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * @description A template for the API URL to get information about Git tags of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            /**
             * @description A template for the API URL to get information about issue comments on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * @description A template for the API URL to get information about issue events on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * @description A template for the API URL to get information about issues on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * @description A template for the API URL to get information about deploy keys on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * @description A template for the API URL to get information about labels of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * Format: uri
             * @description The API URL to get information about the languages of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @description The API URL to merge branches in the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /**
             * @description A template for the API URL to get information about milestones of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * @description A template for the API URL to get information about notifications on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * @description A template for the API URL to get information about pull requests on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * @description A template for the API URL to get information about releases on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            /**
             * Format: uri
             * @description The API URL to list the stargazers on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /**
             * @description A template for the API URL to get information about statuses of a commit.
             * @example https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * Format: uri
             * @description The API URL to list the subscribers on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @description The API URL to subscribe to notifications for this repository.
             * @example https://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @description The API URL to get information about tags on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @description The API URL to list the teams on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /**
             * @description A template for the API URL to create or retrieve a raw Git tree of the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            /**
             * Format: uri
             * @description The API URL to list the hooks on the repository.
             * @example https://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
        } | null;
        /**
         * Dependabot Repository Access Details
         * @description Information about repositories that Dependabot is able to access in an organization
         */
        "dependabot-repository-access-details": {
            /**
             * @description The default repository access level for Dependabot updates.
             * @example internal
             * @enum {string|null}
             */
            default_level?: "public" | "internal" | null;
            accessible_repositories?: components["schemas"]["nullable-simple-repository"][];
        };
        "billing-usage-report": {
            usageItems?: {
                /** @description Date of the usage line item. */
                date: string;
                /** @description Product name. */
                product: string;
                /** @description SKU name. */
                sku: string;
                /** @description Quantity of the usage line item. */
                quantity: number;
                /** @description Unit type of the usage line item. */
                unitType: string;
                /** @description Price per unit of the usage line item. */
                pricePerUnit: number;
                /** @description Gross amount of the usage line item. */
                grossAmount: number;
                /** @description Discount amount of the usage line item. */
                discountAmount: number;
                /** @description Net amount of the usage line item. */
                netAmount: number;
                /** @description Name of the organization. */
                organizationName: string;
                /** @description Name of the repository. */
                repositoryName?: string;
            }[];
        };
        /**
         * Organization Full
         * @description Organization Full
         */
        "organization-full": {
            /** @example github */
            login: string;
            /** @example 1 */
            id: number;
            /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/repos
             */
            repos_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/events
             */
            events_url: string;
            /** @example https://api.github.com/orgs/github/hooks */
            hooks_url: string;
            /** @example https://api.github.com/orgs/github/issues */
            issues_url: string;
            /** @example https://api.github.com/orgs/github/members{/member} */
            members_url: string;
            /** @example https://api.github.com/orgs/github/public_members{/member} */
            public_members_url: string;
            /** @example https://github.com/images/error/octocat_happy.gif */
            avatar_url: string;
            /** @example A great organization */
            description: string | null;
            /** @example github */
            name?: string;
            /** @example GitHub */
            company?: string;
            /**
             * Format: uri
             * @example https://github.com/blog
             */
            blog?: string;
            /** @example San Francisco */
            location?: string;
            /**
             * Format: email
             * @example octocat@github.com
             */
            email?: string;
            /** @example github */
            twitter_username?: string | null;
            /** @example true */
            is_verified?: boolean;
            /** @example true */
            has_organization_projects: boolean;
            /** @example true */
            has_repository_projects: boolean;
            /** @example 2 */
            public_repos: number;
            /** @example 1 */
            public_gists: number;
            /** @example 20 */
            followers: number;
            /** @example 0 */
            following: number;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /** @example Organization */
            type: string;
            /** @example 100 */
            total_private_repos?: number;
            /** @example 100 */
            owned_private_repos?: number;
            /** @example 81 */
            private_gists?: number | null;
            /** @example 10000 */
            disk_usage?: number | null;
            /**
             * @description The number of collaborators on private repositories.
             *
             *     This field may be null if the number of private repositories is over 50,000.
             * @example 8
             */
            collaborators?: number | null;
            /**
             * Format: email
             * @example org@example.com
             */
            billing_email?: string | null;
            plan?: {
                name: string;
                space: number;
                private_repos: number;
                filled_seats?: number;
                seats?: number;
            };
            default_repository_permission?: string | null;
            /**
             * @description The default branch for repositories created in this organization.
             * @example main
             */
            default_repository_branch?: string | null;
            /** @example true */
            members_can_create_repositories?: boolean | null;
            /** @example true */
            two_factor_requirement_enabled?: boolean | null;
            /** @example all */
            members_allowed_repository_creation_type?: string;
            /** @example true */
            members_can_create_public_repositories?: boolean;
            /** @example true */
            members_can_create_private_repositories?: boolean;
            /** @example true */
            members_can_create_internal_repositories?: boolean;
            /** @example true */
            members_can_create_pages?: boolean;
            /** @example true */
            members_can_create_public_pages?: boolean;
            /** @example true */
            members_can_create_private_pages?: boolean;
            /** @example true */
            members_can_delete_repositories?: boolean;
            /** @example true */
            members_can_change_repo_visibility?: boolean;
            /** @example true */
            members_can_invite_outside_collaborators?: boolean;
            /** @example true */
            members_can_delete_issues?: boolean;
            /** @example true */
            display_commenter_full_name_setting_enabled?: boolean;
            /** @example true */
            readers_can_create_discussions?: boolean;
            /** @example true */
            members_can_create_teams?: boolean;
            /** @example true */
            members_can_view_dependency_insights?: boolean;
            /** @example false */
            members_can_fork_private_repositories?: boolean | null;
            /** @example false */
            web_commit_signoff_required?: boolean;
            /**
             * @deprecated
             * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
             *
             *     Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
             *
             *     This field is only visible to organization owners or members of a team with the security manager role.
             * @example false
             */
            advanced_security_enabled_for_new_repositories?: boolean;
            /**
             * @deprecated
             * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
             *
             *     Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
             *
             *     This field is only visible to organization owners or members of a team with the security manager role.
             * @example false
             */
            dependabot_alerts_enabled_for_new_repositories?: boolean;
            /**
             * @deprecated
             * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
             *
             *     Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
             *
             *     This field is only visible to organization owners or members of a team with the security manager role.
             * @example false
             */
            dependabot_security_updates_enabled_for_new_repositories?: boolean;
            /**
             * @deprecated
             * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
             *
             *     Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
             *
             *     This field is only visible to organization owners or members of a team with the security manager role.
             * @example false
             */
            dependency_graph_enabled_for_new_repositories?: boolean;
            /**
             * @deprecated
             * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
             *
             *     Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
             *
             *     This field is only visible to organization owners or members of a team with the security manager role.
             * @example false
             */
            secret_scanning_enabled_for_new_repositories?: boolean;
            /**
             * @deprecated
             * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
             *
             *     Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
             *
             *     This field is only visible to organization owners or members of a team with the security manager role.
             * @example false
             */
            secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
            /**
             * @description Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
             * @example false
             */
            secret_scanning_push_protection_custom_link_enabled?: boolean;
            /**
             * @description An optional URL string to display to contributors who are blocked from pushing a secret.
             * @example https://github.com/test-org/test-repo/blob/main/README.md
             */
            secret_scanning_push_protection_custom_link?: string | null;
            /**
             * Format: date-time
             * @example 2008-01-14T04:33:35Z
             */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            archived_at: string | null;
            /**
             * @description Controls whether or not deploy keys may be added and used for repositories in the organization.
             * @example false
             */
            deploy_keys_enabled_for_repositories?: boolean;
        };
        "actions-cache-usage-org-enterprise": {
            /** @description The count of active caches across all repositories of an enterprise or an organization. */
            total_active_caches_count: number;
            /** @description The total size in bytes of all active cache items across all repositories of an enterprise or an organization. */
            total_active_caches_size_in_bytes: number;
        };
        /**
         * Actions Cache Usage by repository
         * @description GitHub Actions Cache Usage by repository.
         */
        "actions-cache-usage-by-repository": {
            /**
             * @description The repository owner and name for the cache usage being shown.
             * @example octo-org/Hello-World
             */
            full_name: string;
            /**
             * @description The sum of the size in bytes of all the active cache items in the repository.
             * @example 2322142
             */
            active_caches_size_in_bytes: number;
            /**
             * @description The number of active caches in the repository.
             * @example 3
             */
            active_caches_count: number;
        };
        /**
         * GitHub-hosted runner image details.
         * @description Provides details of a hosted runner image
         */
        "nullable-actions-hosted-runner-pool-image": {
            /**
             * @description The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
             * @example ubuntu-20.04
             */
            id: string;
            /**
             * @description Image size in GB.
             * @example 86
             */
            size_gb: number;
            /**
             * @description Display name for this image.
             * @example 20.04
             */
            display_name: string;
            /**
             * @description The image provider.
             * @enum {string}
             */
            source: "github" | "partner" | "custom";
        } | null;
        /**
         * Github-owned VM details.
         * @description Provides details of a particular machine spec.
         */
        "actions-hosted-runner-machine-spec": {
            /**
             * @description The ID used for the `size` parameter when creating a new runner.
             * @example 8-core
             */
            id: string;
            /**
             * @description The number of cores.
             * @example 8
             */
            cpu_cores: number;
            /**
             * @description The available RAM for the machine spec.
             * @example 32
             */
            memory_gb: number;
            /**
             * @description The available SSD storage for the machine spec.
             * @example 300
             */
            storage_gb: number;
        };
        /**
         * Public IP for a GitHub-hosted larger runners.
         * @description Provides details of Public IP for a GitHub-hosted larger runners
         */
        "public-ip": {
            /**
             * @description Whether public IP is enabled.
             * @example true
             */
            enabled?: boolean;
            /**
             * @description The prefix for the public IP.
             * @example 20.80.208.150
             */
            prefix?: string;
            /**
             * @description The length of the IP prefix.
             * @example 28
             */
            length?: number;
        };
        /**
         * GitHub-hosted hosted runner
         * @description A Github-hosted hosted runner.
         */
        "actions-hosted-runner": {
            /**
             * @description The unique identifier of the hosted runner.
             * @example 5
             */
            id: number;
            /**
             * @description The name of the hosted runner.
             * @example my-github-hosted-runner
             */
            name: string;
            /**
             * @description The unique identifier of the group that the hosted runner belongs to.
             * @example 2
             */
            runner_group_id?: number;
            image_details: components["schemas"]["nullable-actions-hosted-runner-pool-image"];
            machine_size_details: components["schemas"]["actions-hosted-runner-machine-spec"];
            /**
             * @description The status of the runner.
             * @example Ready
             * @enum {string}
             */
            status: "Ready" | "Provisioning" | "Shutdown" | "Deleting" | "Stuck";
            /**
             * @description The operating system of the image.
             * @example linux-x64
             */
            platform: string;
            /**
             * @description The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
             * @default 10
             * @example 5
             */
            maximum_runners: number;
            /**
             * @description Whether public IP is enabled for the hosted runners.
             * @example true
             */
            public_ip_enabled: boolean;
            /** @description The public IP ranges when public IP is enabled for the hosted runners. */
            public_ips?: components["schemas"]["public-ip"][];
            /**
             * Format: date-time
             * @description The time at which the runner was last used, in ISO 8601 format.
             * @example 2022-10-09T23:39:01Z
             */
            last_active_on?: string | null;
        };
        /**
         * GitHub-hosted runner image details.
         * @description Provides details of a hosted runner image
         */
        "actions-hosted-runner-image": {
            /**
             * @description The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
             * @example ubuntu-20.04
             */
            id: string;
            /**
             * @description The operating system of the image.
             * @example linux-x64
             */
            platform: string;
            /**
             * @description Image size in GB.
             * @example 86
             */
            size_gb: number;
            /**
             * @description Display name for this image.
             * @example 20.04
             */
            display_name: string;
            /**
             * @description The image provider.
             * @enum {string}
             */
            source: "github" | "partner" | "custom";
        };
        "actions-hosted-runner-limits": {
            /**
             * Static public IP Limits for GitHub-hosted Hosted Runners.
             * @description Provides details of static public IP limits for GitHub-hosted Hosted Runners
             */
            public_ips: {
                /**
                 * @description The maximum number of static public IP addresses that can be used for Hosted Runners.
                 * @example 50
                 */
                maximum: number;
                /**
                 * @description The current number of static public IP addresses in use by Hosted Runners.
                 * @example 17
                 */
                current_usage: number;
            };
        };
        /**
         * Actions OIDC Subject customization
         * @description Actions OIDC Subject customization
         */
        "oidc-custom-sub": {
            /** @description Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
            include_claim_keys: string[];
        };
        /**
         * Empty Object
         * @description An object without any properties.
         */
        "empty-object": Record<string, never>;
        /**
         * @description The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
         * @enum {string}
         */
        "enabled-repositories": "all" | "none" | "selected";
        /**
         * @description The permissions policy that controls the actions and reusable workflows that are allowed to run.
         * @enum {string}
         */
        "allowed-actions": "all" | "local_only" | "selected";
        /** @description The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
        "selected-actions-url": string;
        "actions-organization-permissions": {
            enabled_repositories: components["schemas"]["enabled-repositories"];
            /** @description The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
            selected_repositories_url?: string;
            allowed_actions?: components["schemas"]["allowed-actions"];
            selected_actions_url?: components["schemas"]["selected-actions-url"];
        };
        "selected-actions": {
            /** @description Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
            github_owned_allowed?: boolean;
            /** @description Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators. */
            verified_allowed?: boolean;
            /** @description Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
             *
             *     > [!NOTE]
             *     > The `patterns_allowed` setting only applies to public repositories. */
            patterns_allowed?: string[];
        };
        /**
         * @description The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
         * @enum {string}
         */
        "actions-default-workflow-permissions": "read" | "write";
        /** @description Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
        "actions-can-approve-pull-request-reviews": boolean;
        "actions-get-default-workflow-permissions": {
            default_workflow_permissions: components["schemas"]["actions-default-workflow-permissions"];
            can_approve_pull_request_reviews: components["schemas"]["actions-can-approve-pull-request-reviews"];
        };
        "actions-set-default-workflow-permissions": {
            default_workflow_permissions?: components["schemas"]["actions-default-workflow-permissions"];
            can_approve_pull_request_reviews?: components["schemas"]["actions-can-approve-pull-request-reviews"];
        };
        "runner-groups-org": {
            id: number;
            name: string;
            visibility: string;
            default: boolean;
            /** @description Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
            selected_repositories_url?: string;
            runners_url: string;
            hosted_runners_url?: string;
            /** @description The identifier of a hosted compute network configuration. */
            network_configuration_id?: string;
            inherited: boolean;
            inherited_allows_public_repositories?: boolean;
            allows_public_repositories: boolean;
            /**
             * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
             * @default false
             */
            workflow_restrictions_read_only: boolean;
            /**
             * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             * @default false
             */
            restricted_to_workflows: boolean;
            /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
            selected_workflows?: string[];
        };
        /**
         * Self hosted runner label
         * @description A label for a self hosted runner
         */
        "runner-label": {
            /** @description Unique identifier of the label. */
            id?: number;
            /** @description Name of the label. */
            name: string;
            /**
             * @description The type of label. Read-only labels are applied automatically when the runner is configured.
             * @enum {string}
             */
            type?: "read-only" | "custom";
        };
        /**
         * Self hosted runners
         * @description A self hosted runner
         */
        runner: {
            /**
             * @description The ID of the runner.
             * @example 5
             */
            id: number;
            /**
             * @description The ID of the runner group.
             * @example 1
             */
            runner_group_id?: number;
            /**
             * @description The name of the runner.
             * @example iMac
             */
            name: string;
            /**
             * @description The Operating System of the runner.
             * @example macos
             */
            os: string;
            /**
             * @description The status of the runner.
             * @example online
             */
            status: string;
            busy: boolean;
            labels: components["schemas"]["runner-label"][];
            ephemeral?: boolean;
        };
        /**
         * Runner Application
         * @description Runner Application
         */
        "runner-application": {
            os: string;
            architecture: string;
            download_url: string;
            filename: string;
            /** @description A short lived bearer token used to download the runner, if needed. */
            temp_download_token?: string;
            sha256_checksum?: string;
        };
        /**
         * Authentication Token
         * @description Authentication Token
         */
        "authentication-token": {
            /**
             * @description The token used for authentication
             * @example v1.1f699f1069f60xxx
             */
            token: string;
            /**
             * Format: date-time
             * @description The time this token expires
             * @example 2016-07-11T22:14:10Z
             */
            expires_at: string;
            /** @example {
             *       "issues": "read",
             *       "deployments": "write"
             *     } */
            permissions?: Record<string, never>;
            /** @description The repositories this token has access to */
            repositories?: components["schemas"]["repository"][];
            /** @example config.yaml */
            single_file?: string | null;
            /**
             * @description Describe whether all repositories have been selected or there's a selection involved
             * @enum {string}
             */
            repository_selection?: "all" | "selected";
        };
        /**
         * Actions Secret for an Organization
         * @description Secrets for GitHub Actions for an organization.
         */
        "organization-actions-secret": {
            /**
             * @description The name of the secret.
             * @example SECRET_TOKEN
             */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * @description Visibility of a secret
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /**
             * Format: uri
             * @example https://api.github.com/organizations/org/secrets/my_secret/repositories
             */
            selected_repositories_url?: string;
        };
        /**
         * ActionsPublicKey
         * @description The public key used for setting Actions Secrets.
         */
        "actions-public-key": {
            /**
             * @description The identifier for the key.
             * @example 1234567
             */
            key_id: string;
            /**
             * @description The Base64 encoded public key.
             * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
            /** @example 2 */
            id?: number;
            /** @example https://api.github.com/user/keys/2 */
            url?: string;
            /** @example ssh-rsa AAAAB3NzaC1yc2EAAA */
            title?: string;
            /** @example 2011-01-26T19:01:12Z */
            created_at?: string;
        };
        /**
         * Actions Variable for an Organization
         * @description Organization variable for GitHub Actions.
         */
        "organization-actions-variable": {
            /**
             * @description The name of the variable.
             * @example USERNAME
             */
            name: string;
            /**
             * @description The value of the variable.
             * @example octocat
             */
            value: string;
            /**
             * Format: date-time
             * @description The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             * @example 2019-01-24T22:45:36.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             * @example 2019-01-24T22:45:36.000Z
             */
            updated_at: string;
            /**
             * @description Visibility of a variable
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /**
             * Format: uri
             * @example https://api.github.com/organizations/org/variables/USERNAME/repositories
             */
            selected_repositories_url?: string;
        };
        /**
         * Campaign state
         * @description Indicates whether a campaign is open or closed
         * @enum {string}
         */
        "campaign-state": "open" | "closed";
        /**
         * Team Simple
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        "nullable-team-simple": {
            /**
             * @description Unique identifier of the team
             * @example 1
             */
            id: number;
            /** @example MDQ6VGVhbTE= */
            node_id: string;
            /**
             * Format: uri
             * @description URL for the team
             * @example https://api.github.com/organizations/1/team/1
             */
            url: string;
            /** @example https://api.github.com/organizations/1/team/1/members{/member} */
            members_url: string;
            /**
             * @description Name of the team
             * @example Justice League
             */
            name: string;
            /**
             * @description Description of the team
             * @example A great team.
             */
            description: string | null;
            /**
             * @description Permission that the team will have for its repositories
             * @example admin
             */
            permission: string;
            /**
             * @description The level of privacy this team should have
             * @example closed
             */
            privacy?: string;
            /**
             * @description The notification setting the team has set
             * @example notifications_enabled
             */
            notification_setting?: string;
            /**
             * Format: uri
             * @example https://github.com/orgs/rails/teams/core
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/1/repos
             */
            repositories_url: string;
            /** @example justice-league */
            slug: string;
            /**
             * @description Distinguished Name (DN) that team maps to within LDAP environment
             * @example uid=example,ou=users,dc=github,dc=com
             */
            ldap_dn?: string;
        } | null;
        /**
         * Team
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        team: {
            id: number;
            node_id: string;
            name: string;
            slug: string;
            description: string | null;
            privacy?: string;
            notification_setting?: string;
            permission: string;
            permissions?: {
                pull: boolean;
                triage: boolean;
                push: boolean;
                maintain: boolean;
                admin: boolean;
            };
            /** Format: uri */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/orgs/rails/teams/core
             */
            html_url: string;
            members_url: string;
            /** Format: uri */
            repositories_url: string;
            parent: components["schemas"]["nullable-team-simple"];
        };
        /**
         * Campaign summary
         * @description The campaign metadata and alert stats.
         */
        "campaign-summary": {
            /** @description The number of the newly created campaign */
            number: number;
            /**
             * Format: date-time
             * @description The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            updated_at: string;
            /** @description The campaign name */
            name?: string;
            /** @description The campaign description */
            description: string;
            /** @description The campaign managers */
            managers: components["schemas"]["simple-user"][];
            /** @description The campaign team managers */
            team_managers?: components["schemas"]["team"][];
            /**
             * Format: date-time
             * @description The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            published_at?: string;
            /**
             * Format: date-time
             * @description The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            ends_at: string;
            /**
             * Format: date-time
             * @description The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
             */
            closed_at?: string | null;
            state: components["schemas"]["campaign-state"];
            /**
             * Format: uri
             * @description The contact link of the campaign.
             */
            contact_link: string | null;
            alert_stats?: {
                /** @description The number of open alerts */
                open_count: number;
                /** @description The number of closed alerts */
                closed_count: number;
                /** @description The number of in-progress alerts */
                in_progress_count: number;
            };
        };
        /** @description The name of the tool used to generate the code scanning analysis. */
        "code-scanning-analysis-tool-name": string;
        /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
        "code-scanning-analysis-tool-guid": string | null;
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        "code-scanning-alert-state-query": "open" | "closed" | "dismissed" | "fixed";
        /**
         * @description Severity of a code scanning alert.
         * @enum {string}
         */
        "code-scanning-alert-severity": "critical" | "high" | "medium" | "low" | "warning" | "note" | "error";
        /**
         * Format: uri
         * @description The REST API URL for fetching the list of instances for an alert.
         */
        "alert-instances-url": string;
        /**
         * @description State of a code scanning alert.
         * @enum {string|null}
         */
        "code-scanning-alert-state": "open" | "dismissed" | "fixed" | null;
        /**
         * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
         * @enum {string|null}
         */
        "code-scanning-alert-dismissed-reason": "false positive" | "won't fix" | "used in tests" | null;
        /** @description The dismissal comment associated with the dismissal of the alert. */
        "code-scanning-alert-dismissed-comment": string | null;
        "code-scanning-alert-rule-summary": {
            /** @description A unique identifier for the rule used to detect the alert. */
            id?: string | null;
            /** @description The name of the rule used to detect the alert. */
            name?: string;
            /**
             * @description The severity of the alert.
             * @enum {string|null}
             */
            severity?: "none" | "note" | "warning" | "error" | null;
            /**
             * @description The security severity of the alert.
             * @enum {string|null}
             */
            security_severity_level?: "low" | "medium" | "high" | "critical" | null;
            /** @description A short description of the rule used to detect the alert. */
            description?: string;
            /** @description A description of the rule used to detect the alert. */
            full_description?: string;
            /** @description A set of tags applicable for the rule. */
            tags?: string[] | null;
            /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
            help?: string | null;
            /** @description A link to the documentation for the rule used to detect the alert. */
            help_uri?: string | null;
        };
        /** @description The version of the tool used to generate the code scanning analysis. */
        "code-scanning-analysis-tool-version": string | null;
        "code-scanning-analysis-tool": {
            name?: components["schemas"]["code-scanning-analysis-tool-name"];
            version?: components["schemas"]["code-scanning-analysis-tool-version"];
            guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
        };
        /** @description The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
         *     `refs/heads/<branch name>` or simply `<branch name>`. */
        "code-scanning-ref": string;
        /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
        "code-scanning-analysis-analysis-key": string;
        /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
        "code-scanning-alert-environment": string;
        /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
        "code-scanning-analysis-category": string;
        /** @description Describe a region within a file for the alert. */
        "code-scanning-alert-location": {
            path?: string;
            start_line?: number;
            end_line?: number;
            start_column?: number;
            end_column?: number;
        };
        /**
         * @description A classification of the file. For example to identify it as generated.
         * @enum {string|null}
         */
        "code-scanning-alert-classification": "source" | "generated" | "test" | "library" | null;
        "code-scanning-alert-instance": {
            ref?: components["schemas"]["code-scanning-ref"];
            analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
            environment?: components["schemas"]["code-scanning-alert-environment"];
            category?: components["schemas"]["code-scanning-analysis-category"];
            state?: components["schemas"]["code-scanning-alert-state"];
            commit_sha?: string;
            message?: {
                text?: string;
            };
            location?: components["schemas"]["code-scanning-alert-location"];
            html_url?: string;
            /** @description Classifications that have been applied to the file that triggered the alert.
             *     For example identifying it as documentation, or a generated file. */
            classifications?: components["schemas"]["code-scanning-alert-classification"][];
        };
        "code-scanning-organization-alert-items": {
            number: components["schemas"]["alert-number"];
            created_at: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["alert-updated-at"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            instances_url: components["schemas"]["alert-instances-url"];
            state: components["schemas"]["code-scanning-alert-state"];
            fixed_at?: components["schemas"]["alert-fixed-at"];
            dismissed_by: components["schemas"]["nullable-simple-user"];
            dismissed_at: components["schemas"]["alert-dismissed-at"];
            dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
            dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
            rule: components["schemas"]["code-scanning-alert-rule-summary"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
            repository: components["schemas"]["simple-repository"];
            dismissal_approved_by?: components["schemas"]["nullable-simple-user"];
        };
        /**
         * Codespace machine
         * @description A description of the machine powering a codespace.
         */
        "nullable-codespace-machine": {
            /**
             * @description The name of the machine.
             * @example standardLinux
             */
            name: string;
            /**
             * @description The display name of the machine includes cores, memory, and storage.
             * @example 4 cores, 16 GB RAM, 64 GB storage
             */
            display_name: string;
            /**
             * @description The operating system of the machine.
             * @example linux
             */
            operating_system: string;
            /**
             * @description How much storage is available to the codespace.
             * @example 68719476736
             */
            storage_in_bytes: number;
            /**
             * @description How much memory is available to the codespace.
             * @example 17179869184
             */
            memory_in_bytes: number;
            /**
             * @description How many cores are available to the codespace.
             * @example 4
             */
            cpus: number;
            /**
             * @description Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
             * @example ready
             * @enum {string|null}
             */
            prebuild_availability: "none" | "ready" | "in_progress" | null;
        } | null;
        /**
         * Codespace
         * @description A codespace.
         */
        codespace: {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /**
             * @description Automatically generated name of this codespace.
             * @example monalisa-octocat-hello-world-g4wpq6h95q
             */
            name: string;
            /**
             * @description Display name for this codespace.
             * @example bookish space pancake
             */
            display_name?: string | null;
            /**
             * @description UUID identifying this codespace's environment.
             * @example 26a7c758-7299-4a73-b978-5a92a7ae98a0
             */
            environment_id: string | null;
            owner: components["schemas"]["simple-user"];
            billable_owner: components["schemas"]["simple-user"];
            repository: components["schemas"]["minimal-repository"];
            machine: components["schemas"]["nullable-codespace-machine"];
            /**
             * @description Path to devcontainer.json from repo root used to create Codespace.
             * @example .devcontainer/example/devcontainer.json
             */
            devcontainer_path?: string | null;
            /**
             * @description Whether the codespace was created from a prebuild.
             * @example false
             */
            prebuild: boolean | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description Last known time this codespace was started.
             * @example 2011-01-26T19:01:12Z
             */
            last_used_at: string;
            /**
             * @description State of this codespace.
             * @example Available
             * @enum {string}
             */
            state: "Unknown" | "Created" | "Queued" | "Provisioning" | "Available" | "Awaiting" | "Unavailable" | "Deleted" | "Moved" | "Shutdown" | "Archived" | "Starting" | "ShuttingDown" | "Failed" | "Exporting" | "Updating" | "Rebuilding";
            /**
             * Format: uri
             * @description API URL for this codespace.
             */
            url: string;
            /** @description Details about the codespace's git repository. */
            git_status: {
                /**
                 * @description The number of commits the local repository is ahead of the remote.
                 * @example 0
                 */
                ahead?: number;
                /**
                 * @description The number of commits the local repository is behind the remote.
                 * @example 0
                 */
                behind?: number;
                /** @description Whether the local repository has unpushed changes. */
                has_unpushed_changes?: boolean;
                /** @description Whether the local repository has uncommitted changes. */
                has_uncommitted_changes?: boolean;
                /**
                 * @description The current branch (or SHA if in detached HEAD state) of the local repository.
                 * @example main
                 */
                ref?: string;
            };
            /**
             * @description The initally assigned location of a new codespace.
             * @example WestUs2
             * @enum {string}
             */
            location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
            /**
             * @description The number of minutes of inactivity after which this codespace will be automatically stopped.
             * @example 60
             */
            idle_timeout_minutes: number | null;
            /**
             * Format: uri
             * @description URL to access this codespace on the web.
             */
            web_url: string;
            /**
             * Format: uri
             * @description API URL to access available alternate machine types for this codespace.
             */
            machines_url: string;
            /**
             * Format: uri
             * @description API URL to start this codespace.
             */
            start_url: string;
            /**
             * Format: uri
             * @description API URL to stop this codespace.
             */
            stop_url: string;
            /**
             * Format: uri
             * @description API URL to publish this codespace to a new repository.
             */
            publish_url?: string | null;
            /**
             * Format: uri
             * @description API URL for the Pull Request associated with this codespace, if any.
             */
            pulls_url: string | null;
            recent_folders: string[];
            runtime_constraints?: {
                /** @description The privacy settings a user can select from when forwarding a port. */
                allowed_port_privacy_settings?: string[] | null;
            };
            /** @description Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
            pending_operation?: boolean | null;
            /** @description Text to show user when codespace is disabled by a pending operation */
            pending_operation_disabled_reason?: string | null;
            /** @description Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
            idle_timeout_notice?: string | null;
            /**
             * @description Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
             * @example 60
             */
            retention_period_minutes?: number | null;
            /**
             * Format: date-time
             * @description When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
             * @example 2011-01-26T20:01:12Z
             */
            retention_expires_at?: string | null;
            /**
             * @description The text to display to a user when a codespace has been stopped for a potentially actionable reason.
             * @example you've used 100% of your spending limit for Codespaces
             */
            last_known_stop_notice?: string | null;
        };
        /**
         * Codespaces Secret
         * @description Secrets for a GitHub Codespace.
         */
        "codespaces-org-secret": {
            /**
             * @description The name of the secret
             * @example SECRET_NAME
             */
            name: string;
            /**
             * Format: date-time
             * @description The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            updated_at: string;
            /**
             * @description The type of repositories in the organization that the secret is visible to
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /**
             * Format: uri
             * @description The API URL at which the list of repositories this secret is visible to can be retrieved
             * @example https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories
             */
            selected_repositories_url?: string;
        };
        /**
         * CodespacesPublicKey
         * @description The public key used for setting Codespaces secrets.
         */
        "codespaces-public-key": {
            /**
             * @description The identifier for the key.
             * @example 1234567
             */
            key_id: string;
            /**
             * @description The Base64 encoded public key.
             * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
            /** @example 2 */
            id?: number;
            /** @example https://api.github.com/user/keys/2 */
            url?: string;
            /** @example ssh-rsa AAAAB3NzaC1yc2EAAA */
            title?: string;
            /** @example 2011-01-26T19:01:12Z */
            created_at?: string;
        };
        /**
         * Copilot Seat Breakdown
         * @description The breakdown of Copilot Business seats for the organization.
         */
        "copilot-organization-seat-breakdown": {
            /** @description The total number of seats being billed for the organization as of the current billing cycle. */
            total?: number;
            /** @description Seats added during the current billing cycle. */
            added_this_cycle?: number;
            /** @description The number of seats that are pending cancellation at the end of the current billing cycle. */
            pending_cancellation?: number;
            /** @description The number of users who have been invited to receive a Copilot seat through this organization. */
            pending_invitation?: number;
            /** @description The number of seats that have used Copilot during the current billing cycle. */
            active_this_cycle?: number;
            /** @description The number of seats that have not used Copilot during the current billing cycle. */
            inactive_this_cycle?: number;
        };
        /**
         * Copilot Organization Details
         * @description Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
         */
        "copilot-organization-details": {
            seat_breakdown: components["schemas"]["copilot-organization-seat-breakdown"];
            /**
             * @description The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
             * @enum {string}
             */
            public_code_suggestions: "allow" | "block" | "unconfigured";
            /**
             * @description The organization policy for allowing or disallowing Copilot Chat in the IDE.
             * @enum {string}
             */
            ide_chat?: "enabled" | "disabled" | "unconfigured";
            /**
             * @description The organization policy for allowing or disallowing Copilot features on GitHub.com.
             * @enum {string}
             */
            platform_chat?: "enabled" | "disabled" | "unconfigured";
            /**
             * @description The organization policy for allowing or disallowing Copilot in the CLI.
             * @enum {string}
             */
            cli?: "enabled" | "disabled" | "unconfigured";
            /**
             * @description The mode of assigning new seats.
             * @enum {string}
             */
            seat_management_setting: "assign_all" | "assign_selected" | "disabled" | "unconfigured";
            /**
             * @description The Copilot plan of the organization, or the parent enterprise, when applicable.
             * @enum {string}
             */
            plan_type?: "business" | "enterprise";
        } & {
            [key: string]: unknown;
        };
        /**
         * Organization Simple
         * @description A GitHub organization.
         */
        "nullable-organization-simple": {
            /** @example github */
            login: string;
            /** @example 1 */
            id: number;
            /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/repos
             */
            repos_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/events
             */
            events_url: string;
            /** @example https://api.github.com/orgs/github/hooks */
            hooks_url: string;
            /** @example https://api.github.com/orgs/github/issues */
            issues_url: string;
            /** @example https://api.github.com/orgs/github/members{/member} */
            members_url: string;
            /** @example https://api.github.com/orgs/github/public_members{/member} */
            public_members_url: string;
            /** @example https://github.com/images/error/octocat_happy.gif */
            avatar_url: string;
            /** @example A great organization */
            description: string | null;
        } | null;
        /**
         * Enterprise Team
         * @description Group of enterprise owners and/or members
         */
        "enterprise-team": {
            /** Format: int64 */
            id: number;
            name: string;
            description?: string;
            slug: string;
            /** Format: uri */
            url: string;
            /** @example disabled | all */
            sync_to_organizations?: string;
            /** @example disabled | all */
            organization_selection_type?: string;
            /** @example 62ab9291-fae2-468e-974b-7e45096d5021 */
            group_id?: string | null;
            /** @example Justice League */
            group_name?: string | null;
            /**
             * Format: uri
             * @example https://github.com/enterprises/dc/teams/justice-league
             */
            html_url: string;
            members_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Copilot Business Seat Detail
         * @description Information about a Copilot Business seat assignment for a user, team, or organization.
         */
        "copilot-seat-details": {
            assignee?: components["schemas"]["nullable-simple-user"];
            organization?: components["schemas"]["nullable-organization-simple"];
            /** @description The team through which the assignee is granted access to GitHub Copilot, if applicable. */
            assigning_team?: (components["schemas"]["team"] | components["schemas"]["enterprise-team"]) | null;
            /**
             * Format: date
             * @description The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
             */
            pending_cancellation_date?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
             */
            last_activity_at?: string | null;
            /** @description Last editor that was used by the user for a GitHub Copilot completion. */
            last_activity_editor?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
             */
            created_at: string;
            /**
             * Format: date-time
             * @deprecated
             * @description **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
             */
            updated_at?: string;
            /**
             * @description The Copilot plan of the organization, or the parent enterprise, when applicable.
             * @enum {string}
             */
            plan_type?: "business" | "enterprise" | "unknown";
        };
        /** @description Usage metrics for Copilot editor code completions in the IDE. */
        "copilot-ide-code-completions": ({
            /** @description Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances. */
            total_engaged_users?: number;
            /** @description Code completion metrics for active languages. */
            languages?: {
                /** @description Name of the language used for Copilot code completion suggestions. */
                name?: string;
                /** @description Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances. */
                total_engaged_users?: number;
            }[];
            editors?: ({
                /** @description Name of the given editor. */
                name?: string;
                /** @description Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances. */
                total_engaged_users?: number;
                /** @description List of model metrics for custom models and the default model. */
                models?: {
                    /** @description Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'. */
                    name?: string;
                    /** @description Indicates whether a model is custom or default. */
                    is_custom_model?: boolean;
                    /** @description The training date for the custom model. */
                    custom_model_training_date?: string | null;
                    /** @description Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances. */
                    total_engaged_users?: number;
                    /** @description Code completion metrics for active languages, for the given editor. */
                    languages?: {
                        /** @description Name of the language used for Copilot code completion suggestions, for the given editor. */
                        name?: string;
                        /** @description Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances. */
                        total_engaged_users?: number;
                        /** @description The number of Copilot code suggestions generated for the given editor, for the given language. */
                        total_code_suggestions?: number;
                        /** @description The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances. */
                        total_code_acceptances?: number;
                        /** @description The number of lines of code suggested by Copilot code completions for the given editor, for the given language. */
                        total_code_lines_suggested?: number;
                        /** @description The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language. */
                        total_code_lines_accepted?: number;
                    }[];
                }[];
            } & {
                [key: string]: unknown;
            })[];
        } & {
            [key: string]: unknown;
        }) | null;
        /** @description Usage metrics for Copilot Chat in the IDE. */
        "copilot-ide-chat": ({
            /** @description Total number of users who prompted Copilot Chat in the IDE. */
            total_engaged_users?: number;
            editors?: {
                /** @description Name of the given editor. */
                name?: string;
                /** @description The number of users who prompted Copilot Chat in the specified editor. */
                total_engaged_users?: number;
                /** @description List of model metrics for custom models and the default model. */
                models?: {
                    /** @description Name of the model used for Copilot Chat. If the default model is used will appear as 'default'. */
                    name?: string;
                    /** @description Indicates whether a model is custom or default. */
                    is_custom_model?: boolean;
                    /** @description The training date for the custom model. */
                    custom_model_training_date?: string | null;
                    /** @description The number of users who prompted Copilot Chat in the given editor and model. */
                    total_engaged_users?: number;
                    /** @description The total number of chats initiated by users in the given editor and model. */
                    total_chats?: number;
                    /** @description The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor. */
                    total_chat_insertion_events?: number;
                    /** @description The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor. */
                    total_chat_copy_events?: number;
                }[];
            }[];
        } & {
            [key: string]: unknown;
        }) | null;
        /** @description Usage metrics for Copilot Chat in GitHub.com */
        "copilot-dotcom-chat": ({
            /** @description Total number of users who prompted Copilot Chat on github.com at least once. */
            total_engaged_users?: number;
            /** @description List of model metrics for a custom models and the default model. */
            models?: {
                /** @description Name of the model used for Copilot Chat. If the default model is used will appear as 'default'. */
                name?: string;
                /** @description Indicates whether a model is custom or default. */
                is_custom_model?: boolean;
                /** @description The training date for the custom model (if applicable). */
                custom_model_training_date?: string | null;
                /** @description Total number of users who prompted Copilot Chat on github.com at least once for each model. */
                total_engaged_users?: number;
                /** @description Total number of chats initiated by users on github.com. */
                total_chats?: number;
            }[];
        } & {
            [key: string]: unknown;
        }) | null;
        /** @description Usage metrics for Copilot for pull requests. */
        "copilot-dotcom-pull-requests": ({
            /** @description The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once. */
            total_engaged_users?: number;
            /** @description Repositories in which users used Copilot for Pull Requests to generate pull request summaries */
            repositories?: {
                /** @description Repository name */
                name?: string;
                /** @description The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository. */
                total_engaged_users?: number;
                /** @description List of model metrics for custom models and the default model. */
                models?: {
                    /** @description Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'. */
                    name?: string;
                    /** @description Indicates whether a model is custom or default. */
                    is_custom_model?: boolean;
                    /** @description The training date for the custom model. */
                    custom_model_training_date?: string | null;
                    /** @description The number of pull request summaries generated using Copilot for Pull Requests in the given repository. */
                    total_pr_summaries_created?: number;
                    /** @description The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model. */
                    total_engaged_users?: number;
                }[];
            }[];
        } & {
            [key: string]: unknown;
        }) | null;
        /**
         * Copilot Usage Metrics
         * @description Copilot usage metrics for a given day.
         */
        "copilot-usage-metrics-day": {
            /**
             * Format: date
             * @description The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
             */
            date: string;
            /** @description The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint. */
            total_active_users?: number;
            /** @description The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint. */
            total_engaged_users?: number;
            copilot_ide_code_completions?: components["schemas"]["copilot-ide-code-completions"];
            copilot_ide_chat?: components["schemas"]["copilot-ide-chat"];
            copilot_dotcom_chat?: components["schemas"]["copilot-dotcom-chat"];
            copilot_dotcom_pull_requests?: components["schemas"]["copilot-dotcom-pull-requests"];
        } & {
            [key: string]: unknown;
        };
        /**
         * Dependabot Secret for an Organization
         * @description Secrets for GitHub Dependabot for an organization.
         */
        "organization-dependabot-secret": {
            /**
             * @description The name of the secret.
             * @example SECRET_TOKEN
             */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * @description Visibility of a secret
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /**
             * Format: uri
             * @example https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories
             */
            selected_repositories_url?: string;
        };
        /**
         * DependabotPublicKey
         * @description The public key used for setting Dependabot Secrets.
         */
        "dependabot-public-key": {
            /**
             * @description The identifier for the key.
             * @example 1234567
             */
            key_id: string;
            /**
             * @description The Base64 encoded public key.
             * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
        };
        /**
         * Minimal Repository
         * @description Minimal Repository
         */
        "nullable-minimal-repository": {
            /**
             * Format: int64
             * @example 1296269
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /** @example Hello-World */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            git_url?: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            ssh_url?: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            clone_url?: string;
            mirror_url?: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            svn_url?: string;
            homepage?: string | null;
            language?: string | null;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            /** @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            has_discussions?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at?: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at?: string | null;
            permissions?: {
                admin?: boolean;
                maintain?: boolean;
                push?: boolean;
                triage?: boolean;
                pull?: boolean;
            };
            /** @example admin */
            role_name?: string;
            temp_clone_token?: string;
            delete_branch_on_merge?: boolean;
            subscribers_count?: number;
            network_count?: number;
            code_of_conduct?: components["schemas"]["code-of-conduct"];
            license?: {
                key?: string;
                name?: string;
                spdx_id?: string;
                url?: string;
                node_id?: string;
            } | null;
            /** @example 0 */
            forks?: number;
            /** @example 0 */
            open_issues?: number;
            /** @example 0 */
            watchers?: number;
            allow_forking?: boolean;
            /** @example false */
            web_commit_signoff_required?: boolean;
            security_and_analysis?: components["schemas"]["security-and-analysis"];
            /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
            custom_properties?: {
                [key: string]: unknown;
            };
        } | null;
        /**
         * Package
         * @description A software package
         */
        package: {
            /**
             * @description Unique identifier of the package.
             * @example 1
             */
            id: number;
            /**
             * @description The name of the package.
             * @example super-linter
             */
            name: string;
            /**
             * @example docker
             * @enum {string}
             */
            package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
            /** @example https://api.github.com/orgs/github/packages/container/super-linter */
            url: string;
            /** @example https://github.com/orgs/github/packages/container/package/super-linter */
            html_url: string;
            /**
             * @description The number of versions of the package.
             * @example 1
             */
            version_count: number;
            /**
             * @example private
             * @enum {string}
             */
            visibility: "private" | "public";
            owner?: components["schemas"]["nullable-simple-user"];
            repository?: components["schemas"]["nullable-minimal-repository"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Organization Invitation
         * @description Organization Invitation
         */
        "organization-invitation": {
            /** Format: int64 */
            id: number;
            login: string | null;
            email: string | null;
            role: string;
            created_at: string;
            failed_at?: string | null;
            failed_reason?: string | null;
            inviter: components["schemas"]["simple-user"];
            team_count: number;
            /** @example "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x" */
            node_id: string;
            /** @example "https://api.github.com/organizations/16/invitations/1/teams" */
            invitation_teams_url: string;
            /** @example "member" */
            invitation_source?: string;
        };
        /**
         * Org Hook
         * @description Org Hook
         */
        "org-hook": {
            /** @example 1 */
            id: number;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/octocat/hooks/1
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/octocat/hooks/1/pings
             */
            ping_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/octocat/hooks/1/deliveries
             */
            deliveries_url?: string;
            /** @example web */
            name: string;
            /** @example [
             *       "push",
             *       "pull_request"
             *     ] */
            events: string[];
            /** @example true */
            active: boolean;
            config: {
                /** @example "http://example.com/2" */
                url?: string;
                /** @example "0" */
                insecure_ssl?: string;
                /** @example "form" */
                content_type?: string;
                /** @example "********" */
                secret?: string;
            };
            /**
             * Format: date-time
             * @example 2011-09-06T20:39:23Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2011-09-06T17:26:27Z
             */
            created_at: string;
            type: string;
        };
        /**
         * Route Stats
         * @description API Insights usage route stats for an actor
         */
        "api-insights-route-stats": {
            /** @description The HTTP method */
            http_method?: string;
            /** @description The API path's route template */
            api_route?: string;
            /**
             * Format: int64
             * @description The total number of requests within the queried time period
             */
            total_request_count?: number;
            /**
             * Format: int64
             * @description The total number of requests that were rate limited within the queried time period
             */
            rate_limited_request_count?: number;
            last_rate_limited_timestamp?: string | null;
            last_request_timestamp?: string;
        }[];
        /**
         * Subject Stats
         * @description API Insights usage subject stats for an organization
         */
        "api-insights-subject-stats": {
            subject_type?: string;
            subject_name?: string;
            /** Format: int64 */
            subject_id?: number;
            total_request_count?: number;
            rate_limited_request_count?: number;
            last_rate_limited_timestamp?: string | null;
            last_request_timestamp?: string;
        }[];
        /**
         * Summary Stats
         * @description API Insights usage summary stats for an organization
         */
        "api-insights-summary-stats": {
            /**
             * Format: int64
             * @description The total number of requests within the queried time period
             */
            total_request_count?: number;
            /**
             * Format: int64
             * @description The total number of requests that were rate limited within the queried time period
             */
            rate_limited_request_count?: number;
        };
        /**
         * Time Stats
         * @description API Insights usage time stats for an organization
         */
        "api-insights-time-stats": {
            timestamp?: string;
            /** Format: int64 */
            total_request_count?: number;
            /** Format: int64 */
            rate_limited_request_count?: number;
        }[];
        /**
         * User Stats
         * @description API Insights usage stats for a user
         */
        "api-insights-user-stats": {
            actor_type?: string;
            actor_name?: string;
            /** Format: int64 */
            actor_id?: number;
            /** Format: int64 */
            integration_id?: number | null;
            /** Format: int64 */
            oauth_application_id?: number | null;
            total_request_count?: number;
            rate_limited_request_count?: number;
            last_rate_limited_timestamp?: string | null;
            last_request_timestamp?: string;
        }[];
        /**
         * @description The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
         * @example collaborators_only
         * @enum {string}
         */
        "interaction-group": "existing_users" | "contributors_only" | "collaborators_only";
        /**
         * Interaction Limits
         * @description Interaction limit settings.
         */
        "interaction-limit-response": {
            limit: components["schemas"]["interaction-group"];
            /** @example repository */
            origin: string;
            /**
             * Format: date-time
             * @example 2018-08-17T04:18:39Z
             */
            expires_at: string;
        };
        /**
         * @description The duration of the interaction restriction. Default: `one_day`.
         * @example one_month
         * @enum {string}
         */
        "interaction-expiry": "one_day" | "three_days" | "one_week" | "one_month" | "six_months";
        /**
         * Interaction Restrictions
         * @description Limit interactions to a specific type of user for a specified duration
         */
        "interaction-limit": {
            limit: components["schemas"]["interaction-group"];
            expiry?: components["schemas"]["interaction-expiry"];
        };
        "organization-create-issue-type": {
            /** @description Name of the issue type. */
            name: string;
            /** @description Whether or not the issue type is enabled at the organization level. */
            is_enabled: boolean;
            /** @description Description of the issue type. */
            description?: string | null;
            /**
             * @description Color for the issue type.
             * @enum {string|null}
             */
            color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
        };
        "organization-update-issue-type": {
            /** @description Name of the issue type. */
            name: string;
            /** @description Whether or not the issue type is enabled at the organization level. */
            is_enabled: boolean;
            /** @description Description of the issue type. */
            description?: string | null;
            /**
             * @description Color for the issue type.
             * @enum {string|null}
             */
            color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
        };
        /**
         * Org Membership
         * @description Org Membership
         */
        "org-membership": {
            /**
             * Format: uri
             * @example https://api.github.com/orgs/octocat/memberships/defunkt
             */
            url: string;
            /**
             * @description The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
             * @example active
             * @enum {string}
             */
            state: "active" | "pending";
            /**
             * @description The user's membership type in the organization.
             * @example admin
             * @enum {string}
             */
            role: "admin" | "member" | "billing_manager";
            /**
             * @description Whether the user has direct membership in the organization.
             * @example true
             */
            direct_membership?: boolean;
            /**
             * @description The slugs of the enterprise teams providing the user with indirect membership in the organization.
             *     A limit of 100 enterprise team slugs is returned.
             * @example [
             *       "ent:team-one",
             *       "ent:team-two"
             *     ]
             */
            enterprise_teams_providing_indirect_membership?: string[];
            /**
             * Format: uri
             * @example https://api.github.com/orgs/octocat
             */
            organization_url: string;
            organization: components["schemas"]["organization-simple"];
            user: components["schemas"]["nullable-simple-user"];
            permissions?: {
                can_create_repository: boolean;
            };
        };
        /**
         * Migration
         * @description A migration.
         */
        migration: {
            /**
             * Format: int64
             * @example 79
             */
            id: number;
            owner: components["schemas"]["nullable-simple-user"];
            /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
            guid: string;
            /** @example pending */
            state: string;
            /** @example true */
            lock_repositories: boolean;
            exclude_metadata: boolean;
            exclude_git_data: boolean;
            exclude_attachments: boolean;
            exclude_releases: boolean;
            exclude_owner_projects: boolean;
            org_metadata_only: boolean;
            /** @description The repositories included in the migration. Only returned for export migrations. */
            repositories: components["schemas"]["repository"][];
            /**
             * Format: uri
             * @example https://api.github.com/orgs/octo-org/migrations/79
             */
            url: string;
            /**
             * Format: date-time
             * @example 2015-07-06T15:33:38-07:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2015-07-06T15:33:38-07:00
             */
            updated_at: string;
            node_id: string;
            /** Format: uri */
            archive_url?: string;
            /** @description Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
            exclude?: string[];
        };
        /**
         * Organization Role
         * @description Organization roles
         */
        "organization-role": {
            /**
             * Format: int64
             * @description The unique identifier of the role.
             */
            id: number;
            /** @description The name of the role. */
            name: string;
            /** @description A short description about who this role is for or what permissions it grants. */
            description?: string | null;
            /**
             * @description The system role from which this role inherits permissions.
             * @enum {string|null}
             */
            base_role?: "read" | "triage" | "write" | "maintain" | "admin" | null;
            /**
             * @description Source answers the question, "where did this role come from?"
             * @enum {string|null}
             */
            source?: "Organization" | "Enterprise" | "Predefined" | null;
            /** @description A list of permissions included in this role. */
            permissions: string[];
            organization: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @description The date and time the role was created.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time the role was last updated.
             */
            updated_at: string;
        };
        /**
         * A Role Assignment for a Team
         * @description The Relationship a Team has with a role.
         */
        "team-role-assignment": {
            /**
             * @description Determines if the team has a direct, indirect, or mixed relationship to a role
             * @example direct
             * @enum {string}
             */
            assignment?: "direct" | "indirect" | "mixed";
            id: number;
            node_id: string;
            name: string;
            slug: string;
            description: string | null;
            privacy?: string;
            notification_setting?: string;
            permission: string;
            permissions?: {
                pull: boolean;
                triage: boolean;
                push: boolean;
                maintain: boolean;
                admin: boolean;
            };
            /** Format: uri */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/orgs/rails/teams/core
             */
            html_url: string;
            members_url: string;
            /** Format: uri */
            repositories_url: string;
            parent: components["schemas"]["nullable-team-simple"];
        };
        /**
         * Team Simple
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        "team-simple": {
            /**
             * @description Unique identifier of the team
             * @example 1
             */
            id: number;
            /** @example MDQ6VGVhbTE= */
            node_id: string;
            /**
             * Format: uri
             * @description URL for the team
             * @example https://api.github.com/organizations/1/team/1
             */
            url: string;
            /** @example https://api.github.com/organizations/1/team/1/members{/member} */
            members_url: string;
            /**
             * @description Name of the team
             * @example Justice League
             */
            name: string;
            /**
             * @description Description of the team
             * @example A great team.
             */
            description: string | null;
            /**
             * @description Permission that the team will have for its repositories
             * @example admin
             */
            permission: string;
            /**
             * @description The level of privacy this team should have
             * @example closed
             */
            privacy?: string;
            /**
             * @description The notification setting the team has set
             * @example notifications_enabled
             */
            notification_setting?: string;
            /**
             * Format: uri
             * @example https://github.com/orgs/rails/teams/core
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/1/repos
             */
            repositories_url: string;
            /** @example justice-league */
            slug: string;
            /**
             * @description Distinguished Name (DN) that team maps to within LDAP environment
             * @example uid=example,ou=users,dc=github,dc=com
             */
            ldap_dn?: string;
        };
        /**
         * A Role Assignment for a User
         * @description The Relationship a User has with a role.
         */
        "user-role-assignment": {
            /**
             * @description Determines if the user has a direct, indirect, or mixed relationship to a role
             * @example direct
             * @enum {string}
             */
            assignment?: "direct" | "indirect" | "mixed";
            /** @description Team the user has gotten the role through */
            inherited_from?: components["schemas"]["team-simple"][];
            name?: string | null;
            email?: string | null;
            /** @example octocat */
            login: string;
            /** @example 1 */
            id: number;
            /** @example MDQ6VXNlcjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /** @example 41d064eb2195891e12d0413f63227ea7 */
            gravatar_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/followers
             */
            followers_url: string;
            /** @example https://api.github.com/users/octocat/following{/other_user} */
            following_url: string;
            /** @example https://api.github.com/users/octocat/gists{/gist_id} */
            gists_url: string;
            /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
            starred_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/orgs
             */
            organizations_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repos_url: string;
            /** @example https://api.github.com/users/octocat/events{/privacy} */
            events_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/received_events
             */
            received_events_url: string;
            /** @example User */
            type: string;
            site_admin: boolean;
            /** @example "2020-07-09T00:17:55Z" */
            starred_at?: string;
            /** @example public */
            user_view_type?: string;
        };
        /**
         * Package Version
         * @description A version of a software package
         */
        "package-version": {
            /**
             * @description Unique identifier of the package version.
             * @example 1
             */
            id: number;
            /**
             * @description The name of the package version.
             * @example latest
             */
            name: string;
            /** @example https://api.github.com/orgs/github/packages/container/super-linter/versions/786068 */
            url: string;
            /** @example https://github.com/orgs/github/packages/container/package/super-linter */
            package_html_url: string;
            /** @example https://github.com/orgs/github/packages/container/super-linter/786068 */
            html_url?: string;
            /** @example MIT */
            license?: string;
            description?: string;
            /**
             * Format: date-time
             * @example 2011-04-10T20:09:31Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2014-03-03T18:58:10Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2014-03-03T18:58:10Z
             */
            deleted_at?: string;
            /** Package Version Metadata */
            metadata?: {
                /**
                 * @example docker
                 * @enum {string}
                 */
                package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
                /** Container Metadata */
                container?: {
                    tags: string[];
                };
                /** Docker Metadata */
                docker?: {
                    tag?: string[];
                };
            };
        };
        /**
         * Simple Organization Programmatic Access Grant Request
         * @description Minimal representation of an organization programmatic access grant request for enumerations
         */
        "organization-programmatic-access-grant-request": {
            /** @description Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests. */
            id: number;
            /** @description Reason for requesting access. */
            reason: string | null;
            owner: components["schemas"]["simple-user"];
            /**
             * @description Type of repository selection requested.
             * @enum {string}
             */
            repository_selection: "none" | "all" | "subset";
            /** @description URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`. */
            repositories_url: string;
            /** @description Permissions requested, categorized by type of permission. */
            permissions: {
                organization?: {
                    [key: string]: string;
                };
                repository?: {
                    [key: string]: string;
                };
                other?: {
                    [key: string]: string;
                };
            };
            /** @description Date and time when the request for access was created. */
            created_at: string;
            /** @description Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
            token_id: number;
            /** @description The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
            token_name: string;
            /** @description Whether the associated fine-grained personal access token has expired. */
            token_expired: boolean;
            /** @description Date and time when the associated fine-grained personal access token expires. */
            token_expires_at: string | null;
            /** @description Date and time when the associated fine-grained personal access token was last used for authentication. */
            token_last_used_at: string | null;
        };
        /**
         * Organization Programmatic Access Grant
         * @description Minimal representation of an organization programmatic access grant for enumerations
         */
        "organization-programmatic-access-grant": {
            /** @description Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token. */
            id: number;
            owner: components["schemas"]["simple-user"];
            /**
             * @description Type of repository selection requested.
             * @enum {string}
             */
            repository_selection: "none" | "all" | "subset";
            /** @description URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`. */
            repositories_url: string;
            /** @description Permissions requested, categorized by type of permission. */
            permissions: {
                organization?: {
                    [key: string]: string;
                };
                repository?: {
                    [key: string]: string;
                };
                other?: {
                    [key: string]: string;
                };
            };
            /** @description Date and time when the fine-grained personal access token was approved to access the organization. */
            access_granted_at: string;
            /** @description Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
            token_id: number;
            /** @description The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
            token_name: string;
            /** @description Whether the associated fine-grained personal access token has expired. */
            token_expired: boolean;
            /** @description Date and time when the associated fine-grained personal access token expires. */
            token_expires_at: string | null;
            /** @description Date and time when the associated fine-grained personal access token was last used for authentication. */
            token_last_used_at: string | null;
        };
        /**
         * Organization private registry
         * @description Private registry configuration for an organization
         */
        "org-private-registry-configuration": {
            /**
             * @description The name of the private registry configuration.
             * @example MAVEN_REPOSITORY_SECRET
             */
            name: string;
            /**
             * @description The registry type.
             * @enum {string}
             */
            registry_type: "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry" | "hex_organization" | "hex_repository" | "pub_repository" | "python_index" | "terraform_registry";
            /**
             * @description The username to use when authenticating with the private registry.
             * @example monalisa
             */
            username?: string | null;
            /**
             * @description Which type of organization repositories have access to the private registry.
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Organization private registry
         * @description Private registry configuration for an organization
         */
        "org-private-registry-configuration-with-selected-repositories": {
            /**
             * @description The name of the private registry configuration.
             * @example MAVEN_REPOSITORY_SECRET
             */
            name: string;
            /**
             * @description The registry type.
             * @enum {string}
             */
            registry_type: "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry" | "hex_organization" | "hex_repository" | "pub_repository" | "python_index" | "terraform_registry";
            /**
             * @description The username to use when authenticating with the private registry.
             * @example monalisa
             */
            username?: string;
            /**
             * @description Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /** @description An array of repository IDs that can access the organization private registry when `visibility` is set to `selected`. */
            selected_repository_ids?: number[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Project
         * @description Projects are a way to organize columns and cards of work.
         */
        project: {
            /**
             * Format: uri
             * @example https://api.github.com/repos/api-playground/projects-test
             */
            owner_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/1002604
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/api-playground/projects-test/projects/12
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/1002604/columns
             */
            columns_url: string;
            /** @example 1002604 */
            id: number;
            /** @example MDc6UHJvamVjdDEwMDI2MDQ= */
            node_id: string;
            /**
             * @description Name of the project
             * @example Week One Sprint
             */
            name: string;
            /**
             * @description Body of the project
             * @example This project represents the sprint of the first week in January
             */
            body: string | null;
            /** @example 1 */
            number: number;
            /**
             * @description State of the project; either 'open' or 'closed'
             * @example open
             */
            state: string;
            creator: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @example 2011-04-10T20:09:31Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2014-03-03T18:58:10Z
             */
            updated_at: string;
            /**
             * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
             * @enum {string}
             */
            organization_permission?: "read" | "write" | "admin" | "none";
            /** @description Whether or not this project can be seen by everyone. Only present if owner is an organization. */
            private?: boolean;
        };
        /**
         * Organization Custom Property
         * @description Custom property defined on an organization
         */
        "custom-property": {
            /** @description The name of the property */
            property_name: string;
            /**
             * Format: uri
             * @description The URL that can be used to fetch, update, or delete info about this property via the API.
             */
            url?: string;
            /**
             * @description The source type of the property
             * @example organization
             * @enum {string}
             */
            source_type?: "organization" | "enterprise";
            /**
             * @description The type of the value for the property
             * @example single_select
             * @enum {string}
             */
            value_type: "string" | "single_select" | "multi_select" | "true_false";
            /** @description Whether the property is required. */
            required?: boolean;
            /** @description Default value of the property */
            default_value?: (string | string[]) | null;
            /** @description Short description of the property */
            description?: string | null;
            /** @description An ordered list of the allowed values of the property.
             *     The property can have up to 200 allowed values. */
            allowed_values?: string[] | null;
            /**
             * @description Who can edit the values of the property
             * @example org_actors
             * @enum {string|null}
             */
            values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
        };
        /**
         * Custom Property Set Payload
         * @description Custom property set payload
         */
        "custom-property-set-payload": {
            /**
             * @description The type of the value for the property
             * @example single_select
             * @enum {string}
             */
            value_type: "string" | "single_select" | "multi_select" | "true_false";
            /** @description Whether the property is required. */
            required?: boolean;
            /** @description Default value of the property */
            default_value?: (string | string[]) | null;
            /** @description Short description of the property */
            description?: string | null;
            /** @description An ordered list of the allowed values of the property.
             *     The property can have up to 200 allowed values. */
            allowed_values?: string[] | null;
            /**
             * @description Who can edit the values of the property
             * @example org_actors
             * @enum {string|null}
             */
            values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
        };
        /**
         * Custom Property Value
         * @description Custom property name and associated value
         */
        "custom-property-value": {
            /** @description The name of the property */
            property_name: string;
            /** @description The value assigned to the property */
            value: (string | string[]) | null;
        };
        /**
         * Organization Repository Custom Property Values
         * @description List of custom property values for a repository
         */
        "org-repo-custom-property-values": {
            /** @example 1296269 */
            repository_id: number;
            /** @example Hello-World */
            repository_name: string;
            /** @example octocat/Hello-World */
            repository_full_name: string;
            /** @description List of custom property names and associated values */
            properties: components["schemas"]["custom-property-value"][];
        };
        /**
         * Repository
         * @description A repository on GitHub.
         */
        "nullable-repository": {
            /**
             * Format: int64
             * @description Unique identifier of the repository
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Team Environment
             */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            /** @example git:github.com/octocat/Hello-World.git */
            git_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            /** @example git@github.com:octocat/Hello-World.git */
            ssh_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            /** @example https://github.com/octocat/Hello-World.git */
            clone_url: string;
            /**
             * Format: uri
             * @example git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            /**
             * Format: uri
             * @example https://svn.github.com/octocat/Hello-World
             */
            svn_url: string;
            /**
             * Format: uri
             * @example https://github.com
             */
            homepage: string | null;
            language: string | null;
            /** @example 9 */
            forks_count: number;
            /** @example 80 */
            stargazers_count: number;
            /** @example 80 */
            watchers_count: number;
            /**
             * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
             * @example 108
             */
            size: number;
            /**
             * @description The default branch of the repository.
             * @example master
             */
            default_branch: string;
            /** @example 0 */
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             * @example true
             */
            is_template: boolean;
            topics?: string[];
            /**
             * @description Whether issues are enabled.
             * @default true
             * @example true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             * @example true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             * @example true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @deprecated
             * @description Whether downloads are enabled.
             * @default true
             * @example true
             */
            has_downloads: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             * @example true
             */
            has_discussions: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             * @example true
             */
            allow_rebase_merge: boolean;
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             * @example true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to allow Auto-merge to be used on pull requests.
             * @default false
             * @example false
             */
            allow_auto_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             * @example false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
             * @default false
             * @example false
             */
            allow_update_branch: boolean;
            /**
             * @deprecated
             * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default: boolean;
            /**
             * @description The default value for a squash merge commit title:
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            /**
             * @description The default value for a squash merge commit message:
             *
             *     - `PR_BODY` - default to the pull request's body.
             *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @description The default value for a merge commit message.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `PR_BODY` - default to the pull request's body.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             * @example true
             */
            allow_merge_commit: boolean;
            /** @description Whether to allow forking this repo */
            allow_forking?: boolean;
            /**
             * @description Whether to require contributors to sign off on web-based commits
             * @default false
             */
            web_commit_signoff_required: boolean;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            /** @example "2020-07-09T00:17:42Z" */
            starred_at?: string;
            /** @description Whether anonymous git access is enabled for this repository */
            anonymous_access_enabled?: boolean;
            /** @description The status of the code search index for this repository */
            code_search_index_status?: {
                lexical_search_ok?: boolean;
                lexical_commit_sha?: string;
            };
        } | null;
        /**
         * Code Of Conduct Simple
         * @description Code of Conduct Simple
         */
        "code-of-conduct-simple": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/github/docs/community/code_of_conduct
             */
            url: string;
            /** @example citizen_code_of_conduct */
            key: string;
            /** @example Citizen Code of Conduct */
            name: string;
            /**
             * Format: uri
             * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
             */
            html_url: string | null;
        };
        /**
         * Full Repository
         * @description Full Repository
         */
        "full-repository": {
            /**
             * Format: int64
             * @example 1296269
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /** @example Hello-World */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            /** @example git:github.com/octocat/Hello-World.git */
            git_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            /** @example git@github.com:octocat/Hello-World.git */
            ssh_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            /** @example https://github.com/octocat/Hello-World.git */
            clone_url: string;
            /**
             * Format: uri
             * @example git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            /**
             * Format: uri
             * @example https://svn.github.com/octocat/Hello-World
             */
            svn_url: string;
            /**
             * Format: uri
             * @example https://github.com
             */
            homepage: string | null;
            language: string | null;
            /** @example 9 */
            forks_count: number;
            /** @example 80 */
            stargazers_count: number;
            /** @example 80 */
            watchers_count: number;
            /**
             * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
             * @example 108
             */
            size: number;
            /** @example master */
            default_branch: string;
            /** @example 0 */
            open_issues_count: number;
            /** @example true */
            is_template?: boolean;
            /** @example [
             *       "octocat",
             *       "atom",
             *       "electron",
             *       "API"
             *     ] */
            topics?: string[];
            /** @example true */
            has_issues: boolean;
            /** @example true */
            has_projects: boolean;
            /** @example true */
            has_wiki: boolean;
            has_pages: boolean;
            /** @example true */
            has_downloads?: boolean;
            /** @example true */
            has_discussions: boolean;
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @example public
             */
            visibility?: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string;
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            /** @example true */
            allow_rebase_merge?: boolean;
            template_repository?: components["schemas"]["nullable-repository"];
            temp_clone_token?: string | null;
            /** @example true */
            allow_squash_merge?: boolean;
            /** @example false */
            allow_auto_merge?: boolean;
            /** @example false */
            delete_branch_on_merge?: boolean;
            /** @example true */
            allow_merge_commit?: boolean;
            /** @example true */
            allow_update_branch?: boolean;
            /** @example false */
            use_squash_pr_title_as_default?: boolean;
            /**
             * @description The default value for a squash merge commit title:
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @example PR_TITLE
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            /**
             * @description The default value for a squash merge commit message:
             *
             *     - `PR_BODY` - default to the pull request's body.
             *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
             *     - `BLANK` - default to a blank commit message.
             * @example PR_BODY
             * @enum {string}
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             *       - `PR_TITLE` - default to the pull request's title.
             *       - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @example PR_TITLE
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @description The default value for a merge commit message.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `PR_BODY` - default to the pull request's body.
             *     - `BLANK` - default to a blank commit message.
             * @example PR_BODY
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /** @example true */
            allow_forking?: boolean;
            /** @example false */
            web_commit_signoff_required?: boolean;
            /** @example 42 */
            subscribers_count: number;
            /** @example 0 */
            network_count: number;
            license: components["schemas"]["nullable-license-simple"];
            organization?: components["schemas"]["nullable-simple-user"];
            parent?: components["schemas"]["repository"];
            source?: components["schemas"]["repository"];
            forks: number;
            master_branch?: string;
            open_issues: number;
            watchers: number;
            /**
             * @description Whether anonymous git access is allowed.
             * @default true
             */
            anonymous_access_enabled: boolean;
            code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
            security_and_analysis?: components["schemas"]["security-and-analysis"];
            /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
            custom_properties?: {
                [key: string]: unknown;
            };
        };
        /**
         * @description The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
         * @enum {string}
         */
        "repository-rule-enforcement": "disabled" | "active" | "evaluate";
        /**
         * Repository Ruleset Bypass Actor
         * @description An actor that can bypass rules in a ruleset
         */
        "repository-ruleset-bypass-actor": {
            /** @description The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories. */
            actor_id?: number | null;
            /**
             * @description The type of actor that can bypass a ruleset.
             * @enum {string}
             */
            actor_type: "Integration" | "OrganizationAdmin" | "RepositoryRole" | "Team" | "DeployKey";
            /**
             * @description When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
             * @default always
             * @enum {string}
             */
            bypass_mode: "always" | "pull_request";
        };
        /**
         * Repository ruleset conditions for ref names
         * @description Parameters for a repository ruleset ref name condition
         */
        "repository-ruleset-conditions": {
            ref_name?: {
                /** @description Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
                include?: string[];
                /** @description Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
                exclude?: string[];
            };
        };
        /**
         * Repository ruleset conditions for repository names
         * @description Parameters for a repository name condition
         */
        "repository-ruleset-conditions-repository-name-target": {
            repository_name: {
                /** @description Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
                include?: string[];
                /** @description Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
                exclude?: string[];
                /** @description Whether renaming of target repositories is prevented. */
                protected?: boolean;
            };
        };
        /**
         * Repository ruleset conditions for repository IDs
         * @description Parameters for a repository ID condition
         */
        "repository-ruleset-conditions-repository-id-target": {
            repository_id: {
                /** @description The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. */
                repository_ids?: number[];
            };
        };
        /**
         * Repository ruleset property targeting definition
         * @description Parameters for a targeting a repository property
         */
        "repository-ruleset-conditions-repository-property-spec": {
            /** @description The name of the repository property to target */
            name: string;
            /** @description The values to match for the repository property */
            property_values: string[];
            /**
             * @description The source of the repository property. Defaults to 'custom' if not specified.
             * @enum {string}
             */
            source?: "custom" | "system";
        };
        /**
         * Repository ruleset conditions for repository properties
         * @description Parameters for a repository property condition
         */
        "repository-ruleset-conditions-repository-property-target": {
            repository_property: {
                /** @description The repository properties and values to include. All of these properties must match for the condition to pass. */
                include?: components["schemas"]["repository-ruleset-conditions-repository-property-spec"][];
                /** @description The repository properties and values to exclude. The condition will not pass if any of these properties match. */
                exclude?: components["schemas"]["repository-ruleset-conditions-repository-property-spec"][];
            };
        };
        /**
         * Organization ruleset conditions
         * @description Conditions for an organization ruleset.
         *     The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
         *     The push rulesets conditions object does not require the `ref_name` property.
         *     For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
         */
        "org-ruleset-conditions": (components["schemas"]["repository-ruleset-conditions"] & components["schemas"]["repository-ruleset-conditions-repository-name-target"]) | (components["schemas"]["repository-ruleset-conditions"] & components["schemas"]["repository-ruleset-conditions-repository-id-target"]) | (components["schemas"]["repository-ruleset-conditions"] & components["schemas"]["repository-ruleset-conditions-repository-property-target"]);
        /**
         * creation
         * @description Only allow users with bypass permission to create matching refs.
         */
        "repository-rule-creation": {
            /** @enum {string} */
            type: "creation";
        };
        /**
         * update
         * @description Only allow users with bypass permission to update matching refs.
         */
        "repository-rule-update": {
            /** @enum {string} */
            type: "update";
            parameters?: {
                /** @description Branch can pull changes from its upstream repository */
                update_allows_fetch_and_merge: boolean;
            };
        };
        /**
         * deletion
         * @description Only allow users with bypass permissions to delete matching refs.
         */
        "repository-rule-deletion": {
            /** @enum {string} */
            type: "deletion";
        };
        /**
         * required_linear_history
         * @description Prevent merge commits from being pushed to matching refs.
         */
        "repository-rule-required-linear-history": {
            /** @enum {string} */
            type: "required_linear_history";
        };
        /**
         * merge_queue
         * @description Merges must be performed via a merge queue.
         */
        "repository-rule-merge-queue": {
            /** @enum {string} */
            type: "merge_queue";
            parameters?: {
                /** @description Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed */
                check_response_timeout_minutes: number;
                /**
                 * @description When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
                 * @enum {string}
                 */
                grouping_strategy: "ALLGREEN" | "HEADGREEN";
                /** @description Limit the number of queued pull requests requesting checks and workflow runs at the same time. */
                max_entries_to_build: number;
                /** @description The maximum number of PRs that will be merged together in a group. */
                max_entries_to_merge: number;
                /**
                 * @description Method to use when merging changes from queued pull requests.
                 * @enum {string}
                 */
                merge_method: "MERGE" | "SQUASH" | "REBASE";
                /** @description The minimum number of PRs that will be merged together in a group. */
                min_entries_to_merge: number;
                /** @description The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. */
                min_entries_to_merge_wait_minutes: number;
            };
        };
        /**
         * required_deployments
         * @description Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
         */
        "repository-rule-required-deployments": {
            /** @enum {string} */
            type: "required_deployments";
            parameters?: {
                /** @description The environments that must be successfully deployed to before branches can be merged. */
                required_deployment_environments: string[];
            };
        };
        /**
         * required_signatures
         * @description Commits pushed to matching refs must have verified signatures.
         */
        "repository-rule-required-signatures": {
            /** @enum {string} */
            type: "required_signatures";
        };
        /**
         * Reviewer
         * @description A required reviewing team
         */
        "repository-rule-params-reviewer": {
            /** @description ID of the reviewer which must review changes to matching files. */
            id: number;
            /**
             * @description The type of the reviewer
             * @enum {string}
             */
            type: "Team";
        };
        /**
         * RequiredReviewerConfiguration
         * @description A reviewing team, and file patterns describing which files they must approve changes to.
         */
        "repository-rule-params-required-reviewer-configuration": {
            /** @description Array of file patterns. Pull requests which change matching files must be approved by the specified team. File patterns use the same syntax as `.gitignore` files. */
            file_patterns: string[];
            /** @description Minimum number of approvals required from the specified team. If set to zero, the team will be added to the pull request but approval is optional. */
            minimum_approvals: number;
            reviewer: components["schemas"]["repository-rule-params-reviewer"];
        };
        /**
         * pull_request
         * @description Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
         */
        "repository-rule-pull-request": {
            /** @enum {string} */
            type: "pull_request";
            parameters?: {
                /** @description Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled. */
                allowed_merge_methods?: ("merge" | "squash" | "rebase")[];
                /** @description Automatically request review from Copilot for new pull requests, if the author has access to Copilot code review. */
                automatic_copilot_code_review_enabled?: boolean;
                /** @description New, reviewable commits pushed will dismiss previous pull request review approvals. */
                dismiss_stale_reviews_on_push: boolean;
                /** @description Require an approving review in pull requests that modify files that have a designated code owner. */
                require_code_owner_review: boolean;
                /** @description Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
                require_last_push_approval: boolean;
                /** @description The number of approving reviews that are required before a pull request can be merged. */
                required_approving_review_count: number;
                /** @description All conversations on code must be resolved before a pull request can be merged. */
                required_review_thread_resolution: boolean;
            };
        };
        /**
         * StatusCheckConfiguration
         * @description Required status check
         */
        "repository-rule-params-status-check-configuration": {
            /** @description The status check context name that must be present on the commit. */
            context: string;
            /** @description The optional integration ID that this status check must originate from. */
            integration_id?: number;
        };
        /**
         * required_status_checks
         * @description Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
         */
        "repository-rule-required-status-checks": {
            /** @enum {string} */
            type: "required_status_checks";
            parameters?: {
                /** @description Allow repositories and branches to be created if a check would otherwise prohibit it. */
                do_not_enforce_on_create?: boolean;
                /** @description Status checks that are required. */
                required_status_checks: components["schemas"]["repository-rule-params-status-check-configuration"][];
                /** @description Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
                strict_required_status_checks_policy: boolean;
            };
        };
        /**
         * non_fast_forward
         * @description Prevent users with push access from force pushing to refs.
         */
        "repository-rule-non-fast-forward": {
            /** @enum {string} */
            type: "non_fast_forward";
        };
        /**
         * commit_message_pattern
         * @description Parameters to be used for the commit_message_pattern rule
         */
        "repository-rule-commit-message-pattern": {
            /** @enum {string} */
            type: "commit_message_pattern";
            parameters?: {
                /** @description How this rule will appear to users. */
                name?: string;
                /** @description If true, the rule will fail if the pattern matches. */
                negate?: boolean;
                /**
                 * @description The operator to use for matching.
                 * @enum {string}
                 */
                operator: "starts_with" | "ends_with" | "contains" | "regex";
                /** @description The pattern to match with. */
                pattern: string;
            };
        };
        /**
         * commit_author_email_pattern
         * @description Parameters to be used for the commit_author_email_pattern rule
         */
        "repository-rule-commit-author-email-pattern": {
            /** @enum {string} */
            type: "commit_author_email_pattern";
            parameters?: {
                /** @description How this rule will appear to users. */
                name?: string;
                /** @description If true, the rule will fail if the pattern matches. */
                negate?: boolean;
                /**
                 * @description The operator to use for matching.
                 * @enum {string}
                 */
                operator: "starts_with" | "ends_with" | "contains" | "regex";
                /** @description The pattern to match with. */
                pattern: string;
            };
        };
        /**
         * committer_email_pattern
         * @description Parameters to be used for the committer_email_pattern rule
         */
        "repository-rule-committer-email-pattern": {
            /** @enum {string} */
            type: "committer_email_pattern";
            parameters?: {
                /** @description How this rule will appear to users. */
                name?: string;
                /** @description If true, the rule will fail if the pattern matches. */
                negate?: boolean;
                /**
                 * @description The operator to use for matching.
                 * @enum {string}
                 */
                operator: "starts_with" | "ends_with" | "contains" | "regex";
                /** @description The pattern to match with. */
                pattern: string;
            };
        };
        /**
         * branch_name_pattern
         * @description Parameters to be used for the branch_name_pattern rule
         */
        "repository-rule-branch-name-pattern": {
            /** @enum {string} */
            type: "branch_name_pattern";
            parameters?: {
                /** @description How this rule will appear to users. */
                name?: string;
                /** @description If true, the rule will fail if the pattern matches. */
                negate?: boolean;
                /**
                 * @description The operator to use for matching.
                 * @enum {string}
                 */
                operator: "starts_with" | "ends_with" | "contains" | "regex";
                /** @description The pattern to match with. */
                pattern: string;
            };
        };
        /**
         * tag_name_pattern
         * @description Parameters to be used for the tag_name_pattern rule
         */
        "repository-rule-tag-name-pattern": {
            /** @enum {string} */
            type: "tag_name_pattern";
            parameters?: {
                /** @description How this rule will appear to users. */
                name?: string;
                /** @description If true, the rule will fail if the pattern matches. */
                negate?: boolean;
                /**
                 * @description The operator to use for matching.
                 * @enum {string}
                 */
                operator: "starts_with" | "ends_with" | "contains" | "regex";
                /** @description The pattern to match with. */
                pattern: string;
            };
        };
        /**
         * file_path_restriction
         * @description Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
         */
        "repository-rule-file-path-restriction": {
            /** @enum {string} */
            type: "file_path_restriction";
            parameters?: {
                /** @description The file paths that are restricted from being pushed to the commit graph. */
                restricted_file_paths: string[];
            };
        };
        /**
         * max_file_path_length
         * @description Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
         */
        "repository-rule-max-file-path-length": {
            /** @enum {string} */
            type: "max_file_path_length";
            parameters?: {
                /** @description The maximum amount of characters allowed in file paths. */
                max_file_path_length: number;
            };
        };
        /**
         * file_extension_restriction
         * @description Prevent commits that include files with specified file extensions from being pushed to the commit graph.
         */
        "repository-rule-file-extension-restriction": {
            /** @enum {string} */
            type: "file_extension_restriction";
            parameters?: {
                /** @description The file extensions that are restricted from being pushed to the commit graph. */
                restricted_file_extensions: string[];
            };
        };
        /**
         * max_file_size
         * @description Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
         */
        "repository-rule-max-file-size": {
            /** @enum {string} */
            type: "max_file_size";
            parameters?: {
                /** @description The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). */
                max_file_size: number;
            };
        };
        /**
         * RestrictedCommits
         * @description Restricted commit
         */
        "repository-rule-params-restricted-commits": {
            /** @description Full or abbreviated commit hash to reject */
            oid: string;
            /** @description Reason for restriction */
            reason?: string;
        };
        /**
         * WorkflowFileReference
         * @description A workflow that must run for this rule to pass
         */
        "repository-rule-params-workflow-file-reference": {
            /** @description The path to the workflow file */
            path: string;
            /** @description The ref (branch or tag) of the workflow file to use */
            ref?: string;
            /** @description The ID of the repository where the workflow is defined */
            repository_id: number;
            /** @description The commit SHA of the workflow file to use */
            sha?: string;
        };
        /**
         * workflows
         * @description Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
         */
        "repository-rule-workflows": {
            /** @enum {string} */
            type: "workflows";
            parameters?: {
                /** @description Allow repositories and branches to be created if a check would otherwise prohibit it. */
                do_not_enforce_on_create?: boolean;
                /** @description Workflows that must pass for this rule to pass. */
                workflows: components["schemas"]["repository-rule-params-workflow-file-reference"][];
            };
        };
        /**
         * CodeScanningTool
         * @description A tool that must provide code scanning results for this rule to pass.
         */
        "repository-rule-params-code-scanning-tool": {
            /**
             * @description The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
             * @enum {string}
             */
            alerts_threshold: "none" | "errors" | "errors_and_warnings" | "all";
            /**
             * @description The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
             * @enum {string}
             */
            security_alerts_threshold: "none" | "critical" | "high_or_higher" | "medium_or_higher" | "all";
            /** @description The name of a code scanning tool */
            tool: string;
        };
        /**
         * code_scanning
         * @description Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
         */
        "repository-rule-code-scanning": {
            /** @enum {string} */
            type: "code_scanning";
            parameters?: {
                /** @description Tools that must provide code scanning results for this rule to pass. */
                code_scanning_tools: components["schemas"]["repository-rule-params-code-scanning-tool"][];
            };
        };
        /**
         * Repository Rule
         * @description A repository rule.
         */
        "repository-rule": components["schemas"]["repository-rule-creation"] | components["schemas"]["repository-rule-update"] | components["schemas"]["repository-rule-deletion"] | components["schemas"]["repository-rule-required-linear-history"] | components["schemas"]["repository-rule-merge-queue"] | components["schemas"]["repository-rule-required-deployments"] | components["schemas"]["repository-rule-required-signatures"] | components["schemas"]["repository-rule-pull-request"] | components["schemas"]["repository-rule-required-status-checks"] | components["schemas"]["repository-rule-non-fast-forward"] | components["schemas"]["repository-rule-commit-message-pattern"] | components["schemas"]["repository-rule-commit-author-email-pattern"] | components["schemas"]["repository-rule-committer-email-pattern"] | components["schemas"]["repository-rule-branch-name-pattern"] | components["schemas"]["repository-rule-tag-name-pattern"] | components["schemas"]["repository-rule-file-path-restriction"] | components["schemas"]["repository-rule-max-file-path-length"] | components["schemas"]["repository-rule-file-extension-restriction"] | components["schemas"]["repository-rule-max-file-size"] | components["schemas"]["repository-rule-workflows"] | components["schemas"]["repository-rule-code-scanning"];
        /**
         * Repository ruleset
         * @description A set of rules to apply when specified conditions are met.
         */
        "repository-ruleset": {
            /** @description The ID of the ruleset */
            id: number;
            /** @description The name of the ruleset */
            name: string;
            /**
             * @description The target of the ruleset
             * @enum {string}
             */
            target?: "branch" | "tag" | "push" | "repository";
            /**
             * @description The type of the source of the ruleset
             * @enum {string}
             */
            source_type?: "Repository" | "Organization" | "Enterprise";
            /** @description The name of the source */
            source: string;
            enforcement: components["schemas"]["repository-rule-enforcement"];
            /** @description The actors that can bypass the rules in this ruleset */
            bypass_actors?: components["schemas"]["repository-ruleset-bypass-actor"][];
            /**
             * @description The bypass type of the user making the API request for this ruleset. This field is only returned when
             *     querying the repository-level endpoint.
             * @enum {string}
             */
            current_user_can_bypass?: "always" | "pull_requests_only" | "never";
            node_id?: string;
            _links?: {
                self?: {
                    /** @description The URL of the ruleset */
                    href?: string;
                };
                html?: {
                    /** @description The html URL of the ruleset */
                    href?: string;
                } | null;
            };
            conditions?: (components["schemas"]["repository-ruleset-conditions"] | components["schemas"]["org-ruleset-conditions"]) | null;
            rules?: components["schemas"]["repository-rule"][];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /**
         * Repository Rule
         * @description A repository rule.
         */
        "org-rules": components["schemas"]["repository-rule-creation"] | components["schemas"]["repository-rule-update"] | components["schemas"]["repository-rule-deletion"] | components["schemas"]["repository-rule-required-linear-history"] | components["schemas"]["repository-rule-required-deployments"] | components["schemas"]["repository-rule-required-signatures"] | components["schemas"]["repository-rule-pull-request"] | components["schemas"]["repository-rule-required-status-checks"] | components["schemas"]["repository-rule-non-fast-forward"] | components["schemas"]["repository-rule-commit-message-pattern"] | components["schemas"]["repository-rule-commit-author-email-pattern"] | components["schemas"]["repository-rule-committer-email-pattern"] | components["schemas"]["repository-rule-branch-name-pattern"] | components["schemas"]["repository-rule-tag-name-pattern"] | components["schemas"]["repository-rule-file-path-restriction"] | components["schemas"]["repository-rule-max-file-path-length"] | components["schemas"]["repository-rule-file-extension-restriction"] | components["schemas"]["repository-rule-max-file-size"] | components["schemas"]["repository-rule-workflows"] | components["schemas"]["repository-rule-code-scanning"];
        /**
         * Rule Suites
         * @description Response
         */
        "rule-suites": {
            /** @description The unique identifier of the rule insight. */
            id?: number;
            /** @description The number that identifies the user. */
            actor_id?: number;
            /** @description The handle for the GitHub user account. */
            actor_name?: string;
            /** @description The first commit sha before the push evaluation. */
            before_sha?: string;
            /** @description The last commit sha in the push evaluation. */
            after_sha?: string;
            /** @description The ref name that the evaluation ran on. */
            ref?: string;
            /** @description The ID of the repository associated with the rule evaluation. */
            repository_id?: number;
            /** @description The name of the repository without the `.git` extension. */
            repository_name?: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at?: string;
            /**
             * @description The result of the rule evaluations for rules with the `active` enforcement status.
             * @enum {string}
             */
            result?: "pass" | "fail" | "bypass";
            /**
             * @description The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
             * @enum {string}
             */
            evaluation_result?: "pass" | "fail" | "bypass";
        }[];
        /**
         * Rule Suite
         * @description Response
         */
        "rule-suite": {
            /** @description The unique identifier of the rule insight. */
            id?: number;
            /** @description The number that identifies the user. */
            actor_id?: number | null;
            /** @description The handle for the GitHub user account. */
            actor_name?: string | null;
            /** @description The first commit sha before the push evaluation. */
            before_sha?: string;
            /** @description The last commit sha in the push evaluation. */
            after_sha?: string;
            /** @description The ref name that the evaluation ran on. */
            ref?: string;
            /** @description The ID of the repository associated with the rule evaluation. */
            repository_id?: number;
            /** @description The name of the repository without the `.git` extension. */
            repository_name?: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at?: string;
            /**
             * @description The result of the rule evaluations for rules with the `active` enforcement status.
             * @enum {string}
             */
            result?: "pass" | "fail" | "bypass";
            /**
             * @description The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
             * @enum {string|null}
             */
            evaluation_result?: "pass" | "fail" | "bypass" | null;
            /** @description Details on the evaluated rules. */
            rule_evaluations?: {
                rule_source?: {
                    /** @description The type of rule source. */
                    type?: string;
                    /** @description The ID of the rule source. */
                    id?: number | null;
                    /** @description The name of the rule source. */
                    name?: string | null;
                };
                /**
                 * @description The enforcement level of this rule source.
                 * @enum {string}
                 */
                enforcement?: "active" | "evaluate" | "deleted ruleset";
                /**
                 * @description The result of the evaluation of the individual rule.
                 * @enum {string}
                 */
                result?: "pass" | "fail";
                /** @description The type of rule. */
                rule_type?: string;
                /** @description The detailed failure message for the rule. Null if the rule passed. */
                details?: string | null;
            }[];
        };
        /**
         * Ruleset version
         * @description The historical version of a ruleset
         */
        "ruleset-version": {
            /** @description The ID of the previous version of the ruleset */
            version_id: number;
            /** @description The actor who updated the ruleset */
            actor: {
                id?: number;
                type?: string;
            };
            /** Format: date-time */
            updated_at: string;
        };
        "ruleset-version-with-state": components["schemas"]["ruleset-version"] & {
            /** @description The state of the ruleset version */
            state: Record<string, never>;
        };
        /** @description A product affected by the vulnerability detailed in a repository security advisory. */
        "repository-advisory-vulnerability": {
            /** @description The name of the package affected by the vulnerability. */
            package: {
                ecosystem: components["schemas"]["security-advisory-ecosystems"];
                /** @description The unique package name within its ecosystem. */
                name: string | null;
            } | null;
            /** @description The range of the package versions affected by the vulnerability. */
            vulnerable_version_range: string | null;
            /** @description The package version(s) that resolve the vulnerability. */
            patched_versions: string | null;
            /** @description The functions in the package that are affected. */
            vulnerable_functions: string[] | null;
        };
        /** @description A credit given to a user for a repository security advisory. */
        "repository-advisory-credit": {
            user: components["schemas"]["simple-user"];
            type: components["schemas"]["security-advisory-credit-types"];
            /**
             * @description The state of the user's acceptance of the credit.
             * @enum {string}
             */
            state: "accepted" | "declined" | "pending";
        };
        /** @description A repository security advisory. */
        "repository-advisory": {
            /** @description The GitHub Security Advisory ID. */
            readonly ghsa_id: string;
            /** @description The Common Vulnerabilities and Exposures (CVE) ID. */
            cve_id: string | null;
            /**
             * Format: uri
             * @description The API URL for the advisory.
             */
            readonly url: string;
            /**
             * Format: uri
             * @description The URL for the advisory.
             */
            readonly html_url: string;
            /** @description A short summary of the advisory. */
            summary: string;
            /** @description A detailed description of what the advisory entails. */
            description: string | null;
            /**
             * @description The severity of the advisory.
             * @enum {string|null}
             */
            severity: "critical" | "high" | "medium" | "low" | null;
            /** @description The author of the advisory. */
            readonly author: components["schemas"]["simple-user"] | null;
            /** @description The publisher of the advisory. */
            readonly publisher: components["schemas"]["simple-user"] | null;
            readonly identifiers: {
                /**
                 * @description The type of identifier.
                 * @enum {string}
                 */
                type: "CVE" | "GHSA";
                /** @description The identifier value. */
                value: string;
            }[];
            /**
             * @description The state of the advisory.
             * @enum {string}
             */
            state: "published" | "closed" | "withdrawn" | "draft" | "triage";
            /**
             * Format: date-time
             * @description The date and time of when the advisory was created, in ISO 8601 format.
             */
            readonly created_at: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was last updated, in ISO 8601 format.
             */
            readonly updated_at: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was published, in ISO 8601 format.
             */
            readonly published_at: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was closed, in ISO 8601 format.
             */
            readonly closed_at: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the advisory was withdrawn, in ISO 8601 format.
             */
            readonly withdrawn_at: string | null;
            readonly submission: {
                /** @description Whether a private vulnerability report was accepted by the repository's administrators. */
                readonly accepted: boolean;
            } | null;
            vulnerabilities: components["schemas"]["repository-advisory-vulnerability"][] | null;
            cvss: {
                /** @description The CVSS vector. */
                vector_string: string | null;
                /** @description The CVSS score. */
                readonly score: number | null;
            } | null;
            cvss_severities?: components["schemas"]["cvss-severities"];
            readonly cwes: {
                /** @description The Common Weakness Enumeration (CWE) identifier. */
                cwe_id: string;
                /** @description The name of the CWE. */
                readonly name: string;
            }[] | null;
            /** @description A list of only the CWE IDs. */
            cwe_ids: string[] | null;
            credits: {
                /** @description The username of the user credited. */
                login?: string;
                type?: components["schemas"]["security-advisory-credit-types"];
            }[] | null;
            readonly credits_detailed: components["schemas"]["repository-advisory-credit"][] | null;
            /** @description A list of users that collaborate on the advisory. */
            collaborating_users: components["schemas"]["simple-user"][] | null;
            /** @description A list of teams that collaborate on the advisory. */
            collaborating_teams: components["schemas"]["team"][] | null;
            /** @description A temporary private fork of the advisory's repository for collaborating on a fix. */
            readonly private_fork: components["schemas"]["simple-repository"] | null;
        };
        "actions-billing-usage": {
            /** @description The sum of the free and paid GitHub Actions minutes used. */
            total_minutes_used: number;
            /** @description The total paid GitHub Actions minutes used. */
            total_paid_minutes_used: number;
            /** @description The amount of free GitHub Actions minutes available. */
            included_minutes: number;
            minutes_used_breakdown: {
                /** @description Total minutes used on Ubuntu runner machines. */
                UBUNTU?: number;
                /** @description Total minutes used on macOS runner machines. */
                MACOS?: number;
                /** @description Total minutes used on Windows runner machines. */
                WINDOWS?: number;
                /** @description Total minutes used on Ubuntu 4 core runner machines. */
                ubuntu_4_core?: number;
                /** @description Total minutes used on Ubuntu 8 core runner machines. */
                ubuntu_8_core?: number;
                /** @description Total minutes used on Ubuntu 16 core runner machines. */
                ubuntu_16_core?: number;
                /** @description Total minutes used on Ubuntu 32 core runner machines. */
                ubuntu_32_core?: number;
                /** @description Total minutes used on Ubuntu 64 core runner machines. */
                ubuntu_64_core?: number;
                /** @description Total minutes used on Windows 4 core runner machines. */
                windows_4_core?: number;
                /** @description Total minutes used on Windows 8 core runner machines. */
                windows_8_core?: number;
                /** @description Total minutes used on Windows 16 core runner machines. */
                windows_16_core?: number;
                /** @description Total minutes used on Windows 32 core runner machines. */
                windows_32_core?: number;
                /** @description Total minutes used on Windows 64 core runner machines. */
                windows_64_core?: number;
                /** @description Total minutes used on macOS 12 core runner machines. */
                macos_12_core?: number;
                /** @description Total minutes used on all runner machines. */
                total?: number;
            };
        };
        "packages-billing-usage": {
            /** @description Sum of the free and paid storage space (GB) for GitHuub Packages. */
            total_gigabytes_bandwidth_used: number;
            /** @description Total paid storage space (GB) for GitHuub Packages. */
            total_paid_gigabytes_bandwidth_used: number;
            /** @description Free storage space (GB) for GitHub Packages. */
            included_gigabytes_bandwidth: number;
        };
        "combined-billing-usage": {
            /** @description Numbers of days left in billing cycle. */
            days_left_in_billing_cycle: number;
            /** @description Estimated storage space (GB) used in billing cycle. */
            estimated_paid_storage_for_month: number;
            /** @description Estimated sum of free and paid storage space (GB) used in billing cycle. */
            estimated_storage_for_month: number;
        };
        /**
         * Hosted compute network configuration
         * @description A hosted compute network configuration.
         */
        "network-configuration": {
            /**
             * @description The unique identifier of the network configuration.
             * @example 123ABC456DEF789
             */
            id: string;
            /**
             * @description The name of the network configuration.
             * @example my-network-configuration
             */
            name: string;
            /**
             * @description The hosted compute service the network configuration supports.
             * @enum {string}
             */
            compute_service?: "none" | "actions" | "codespaces";
            /**
             * @description The unique identifier of each network settings in the configuration.
             * @example 123ABC456DEF789
             */
            network_settings_ids?: string[];
            /**
             * Format: date-time
             * @description The time at which the network configuration was created, in ISO 8601 format.
             * @example 2024-04-26T11:31:07Z
             */
            created_on: string | null;
        };
        /**
         * Hosted compute network settings resource
         * @description A hosted compute network settings resource.
         */
        "network-settings": {
            /**
             * @description The unique identifier of the network settings resource.
             * @example 220F78DACB92BBFBC5E6F22DE1CCF52309D
             */
            id: string;
            /**
             * @description The identifier of the network configuration that is using this settings resource.
             * @example 934E208B3EE0BD60CF5F752C426BFB53562
             */
            network_configuration_id?: string;
            /**
             * @description The name of the network settings resource.
             * @example my-network-settings
             */
            name: string;
            /**
             * @description The subnet this network settings resource is configured for.
             * @example /subscriptions/14839728-3ad9-43ab-bd2b-fa6ad0f75e2a/resourceGroups/my-rg/providers/Microsoft.Network/virtualNetworks/my-vnet/subnets/my-subnet
             */
            subnet_id: string;
            /**
             * @description The location of the subnet this network settings resource is configured for.
             * @example eastus
             */
            region: string;
        };
        /**
         * Team Organization
         * @description Team Organization
         */
        "team-organization": {
            /** @example github */
            login: string;
            /** @example 1 */
            id: number;
            /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/repos
             */
            repos_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/events
             */
            events_url: string;
            /** @example https://api.github.com/orgs/github/hooks */
            hooks_url: string;
            /** @example https://api.github.com/orgs/github/issues */
            issues_url: string;
            /** @example https://api.github.com/orgs/github/members{/member} */
            members_url: string;
            /** @example https://api.github.com/orgs/github/public_members{/member} */
            public_members_url: string;
            /** @example https://github.com/images/error/octocat_happy.gif */
            avatar_url: string;
            /** @example A great organization */
            description: string | null;
            /** @example github */
            name?: string;
            /** @example GitHub */
            company?: string;
            /**
             * Format: uri
             * @example https://github.com/blog
             */
            blog?: string;
            /** @example San Francisco */
            location?: string;
            /**
             * Format: email
             * @example octocat@github.com
             */
            email?: string;
            /** @example github */
            twitter_username?: string | null;
            /** @example true */
            is_verified?: boolean;
            /** @example true */
            has_organization_projects: boolean;
            /** @example true */
            has_repository_projects: boolean;
            /** @example 2 */
            public_repos: number;
            /** @example 1 */
            public_gists: number;
            /** @example 20 */
            followers: number;
            /** @example 0 */
            following: number;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: date-time
             * @example 2008-01-14T04:33:35Z
             */
            created_at: string;
            /** @example Organization */
            type: string;
            /** @example 100 */
            total_private_repos?: number;
            /** @example 100 */
            owned_private_repos?: number;
            /** @example 81 */
            private_gists?: number | null;
            /** @example 10000 */
            disk_usage?: number | null;
            /** @example 8 */
            collaborators?: number | null;
            /**
             * Format: email
             * @example org@example.com
             */
            billing_email?: string | null;
            plan?: {
                name: string;
                space: number;
                private_repos: number;
                filled_seats?: number;
                seats?: number;
            };
            default_repository_permission?: string | null;
            /** @example true */
            members_can_create_repositories?: boolean | null;
            /** @example true */
            two_factor_requirement_enabled?: boolean | null;
            /** @example all */
            members_allowed_repository_creation_type?: string;
            /** @example true */
            members_can_create_public_repositories?: boolean;
            /** @example true */
            members_can_create_private_repositories?: boolean;
            /** @example true */
            members_can_create_internal_repositories?: boolean;
            /** @example true */
            members_can_create_pages?: boolean;
            /** @example true */
            members_can_create_public_pages?: boolean;
            /** @example true */
            members_can_create_private_pages?: boolean;
            /** @example false */
            members_can_fork_private_repositories?: boolean | null;
            /** @example false */
            web_commit_signoff_required?: boolean;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            archived_at: string | null;
        };
        /**
         * Full Team
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        "team-full": {
            /**
             * @description Unique identifier of the team
             * @example 42
             */
            id: number;
            /** @example MDQ6VGVhbTE= */
            node_id: string;
            /**
             * Format: uri
             * @description URL for the team
             * @example https://api.github.com/organizations/1/team/1
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/orgs/rails/teams/core
             */
            html_url: string;
            /**
             * @description Name of the team
             * @example Developers
             */
            name: string;
            /** @example justice-league */
            slug: string;
            /** @example A great team. */
            description: string | null;
            /**
             * @description The level of privacy this team should have
             * @example closed
             * @enum {string}
             */
            privacy?: "closed" | "secret";
            /**
             * @description The notification setting the team has set
             * @example notifications_enabled
             * @enum {string}
             */
            notification_setting?: "notifications_enabled" | "notifications_disabled";
            /**
             * @description Permission that the team will have for its repositories
             * @example push
             */
            permission: string;
            /** @example https://api.github.com/organizations/1/team/1/members{/member} */
            members_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/1/repos
             */
            repositories_url: string;
            parent?: components["schemas"]["nullable-team-simple"];
            /** @example 3 */
            members_count: number;
            /** @example 10 */
            repos_count: number;
            /**
             * Format: date-time
             * @example 2017-07-14T16:53:42Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2017-08-17T12:37:15Z
             */
            updated_at: string;
            organization: components["schemas"]["team-organization"];
            /**
             * @description Distinguished Name (DN) that team maps to within LDAP environment
             * @example uid=example,ou=users,dc=github,dc=com
             */
            ldap_dn?: string;
        };
        /**
         * Team Discussion
         * @description A team discussion is a persistent record of a free-form conversation within a team.
         */
        "team-discussion": {
            author: components["schemas"]["nullable-simple-user"];
            /**
             * @description The main text of the discussion.
             * @example Please suggest improvements to our workflow in comments.
             */
            body: string;
            /** @example <p>Hi! This is an area for us to collaborate as a team</p> */
            body_html: string;
            /**
             * @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
             * @example 0307116bbf7ced493b8d8a346c650b71
             */
            body_version: string;
            /** @example 0 */
            comments_count: number;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/2343027/discussions/1/comments
             */
            comments_url: string;
            /**
             * Format: date-time
             * @example 2018-01-25T18:56:31Z
             */
            created_at: string;
            /** Format: date-time */
            last_edited_at: string | null;
            /**
             * Format: uri
             * @example https://github.com/orgs/github/teams/justice-league/discussions/1
             */
            html_url: string;
            /** @example MDE0OlRlYW1EaXNjdXNzaW9uMQ== */
            node_id: string;
            /**
             * @description The unique sequence number of a team discussion.
             * @example 42
             */
            number: number;
            /**
             * @description Whether or not this discussion should be pinned for easy retrieval.
             * @example true
             */
            pinned: boolean;
            /**
             * @description Whether or not this discussion should be restricted to team members and organization owners.
             * @example true
             */
            private: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/2343027
             */
            team_url: string;
            /**
             * @description The title of the discussion.
             * @example How can we improve our workflow?
             */
            title: string;
            /**
             * Format: date-time
             * @example 2018-01-25T18:56:31Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/2343027/discussions/1
             */
            url: string;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Team Discussion Comment
         * @description A reply to a discussion within a team.
         */
        "team-discussion-comment": {
            author: components["schemas"]["nullable-simple-user"];
            /**
             * @description The main text of the comment.
             * @example I agree with this suggestion.
             */
            body: string;
            /** @example <p>Do you like apples?</p> */
            body_html: string;
            /**
             * @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
             * @example 0307116bbf7ced493b8d8a346c650b71
             */
            body_version: string;
            /**
             * Format: date-time
             * @example 2018-01-15T23:53:58Z
             */
            created_at: string;
            /** Format: date-time */
            last_edited_at: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/2403582/discussions/1
             */
            discussion_url: string;
            /**
             * Format: uri
             * @example https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
             */
            html_url: string;
            /** @example MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE= */
            node_id: string;
            /**
             * @description The unique sequence number of a team discussion comment.
             * @example 42
             */
            number: number;
            /**
             * Format: date-time
             * @example 2018-01-15T23:53:58Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
             */
            url: string;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Reaction
         * @description Reactions to conversations provide a way to help people express their feelings more simply and effectively.
         */
        reaction: {
            /** @example 1 */
            id: number;
            /** @example MDg6UmVhY3Rpb24x */
            node_id: string;
            user: components["schemas"]["nullable-simple-user"];
            /**
             * @description The reaction to use
             * @example heart
             * @enum {string}
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
            /**
             * Format: date-time
             * @example 2016-05-20T20:09:31Z
             */
            created_at: string;
        };
        /**
         * Team Membership
         * @description Team Membership
         */
        "team-membership": {
            /** Format: uri */
            url: string;
            /**
             * @description The role of the user in the team.
             * @default member
             * @example member
             * @enum {string}
             */
            role: "member" | "maintainer";
            /**
             * @description The state of the user's membership in the team.
             * @enum {string}
             */
            state: "active" | "pending";
        };
        /**
         * Team Project
         * @description A team's access to a project.
         */
        "team-project": {
            owner_url: string;
            url: string;
            html_url: string;
            columns_url: string;
            id: number;
            node_id: string;
            name: string;
            body: string | null;
            number: number;
            state: string;
            creator: components["schemas"]["simple-user"];
            created_at: string;
            updated_at: string;
            /** @description The organization permission for this project. Only present when owner is an organization. */
            organization_permission?: string;
            /** @description Whether the project is private or not. Only present when owner is an organization. */
            private?: boolean;
            permissions: {
                read: boolean;
                write: boolean;
                admin: boolean;
            };
        };
        /**
         * Team Repository
         * @description A team's access to a repository.
         */
        "team-repository": {
            /**
             * @description Unique identifier of the repository
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Team Environment
             */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            /** @example admin */
            role_name?: string;
            owner: components["schemas"]["nullable-simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            /** @example git:github.com/octocat/Hello-World.git */
            git_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            /** @example git@github.com:octocat/Hello-World.git */
            ssh_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            /** @example https://github.com/octocat/Hello-World.git */
            clone_url: string;
            /**
             * Format: uri
             * @example git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            /**
             * Format: uri
             * @example https://svn.github.com/octocat/Hello-World
             */
            svn_url: string;
            /**
             * Format: uri
             * @example https://github.com
             */
            homepage: string | null;
            language: string | null;
            /** @example 9 */
            forks_count: number;
            /** @example 80 */
            stargazers_count: number;
            /** @example 80 */
            watchers_count: number;
            /** @example 108 */
            size: number;
            /**
             * @description The default branch of the repository.
             * @example master
             */
            default_branch: string;
            /** @example 0 */
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             * @example true
             */
            is_template: boolean;
            topics?: string[];
            /**
             * @description Whether issues are enabled.
             * @default true
             * @example true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             * @example true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             * @example true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @description Whether downloads are enabled.
             * @default true
             * @example true
             */
            has_downloads: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             * @example true
             */
            allow_rebase_merge: boolean;
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             * @example true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to allow Auto-merge to be used on pull requests.
             * @default false
             * @example false
             */
            allow_auto_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             * @example false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             * @example true
             */
            allow_merge_commit: boolean;
            /**
             * @description Whether to allow forking this repo
             * @default false
             * @example false
             */
            allow_forking: boolean;
            /**
             * @description Whether to require contributors to sign off on web-based commits
             * @default false
             * @example false
             */
            web_commit_signoff_required: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
        };
        /**
         * Project Card
         * @description Project cards represent a scope of work.
         */
        "project-card": {
            /**
             * Format: uri
             * @example https://api.github.com/projects/columns/cards/1478
             */
            url: string;
            /**
             * Format: int64
             * @description The project card's ID
             * @example 42
             */
            id: number;
            /** @example MDExOlByb2plY3RDYXJkMTQ3OA== */
            node_id: string;
            /** @example Add payload for delete Project column */
            note: string | null;
            creator: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @example 2016-09-05T14:21:06Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2016-09-05T14:20:22Z
             */
            updated_at: string;
            /**
             * @description Whether or not the card is archived
             * @example false
             */
            archived?: boolean;
            column_name?: string;
            project_id?: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/columns/367
             */
            column_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/api-playground/projects-test/issues/3
             */
            content_url?: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/120
             */
            project_url: string;
        };
        /**
         * Project Column
         * @description Project columns contain cards of work.
         */
        "project-column": {
            /**
             * Format: uri
             * @example https://api.github.com/projects/columns/367
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/120
             */
            project_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/columns/367/cards
             */
            cards_url: string;
            /**
             * @description The unique identifier of the project column
             * @example 42
             */
            id: number;
            /** @example MDEzOlByb2plY3RDb2x1bW4zNjc= */
            node_id: string;
            /**
             * @description Name of the project column
             * @example Remaining tasks
             */
            name: string;
            /**
             * Format: date-time
             * @example 2016-09-05T14:18:44Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2016-09-05T14:22:28Z
             */
            updated_at: string;
        };
        /**
         * Project Collaborator Permission
         * @description Project Collaborator Permission
         */
        "project-collaborator-permission": {
            permission: string;
            user: components["schemas"]["nullable-simple-user"];
        };
        /** Rate Limit */
        "rate-limit": {
            limit: number;
            remaining: number;
            reset: number;
            used: number;
        };
        /**
         * Rate Limit Overview
         * @description Rate Limit Overview
         */
        "rate-limit-overview": {
            resources: {
                core: components["schemas"]["rate-limit"];
                graphql?: components["schemas"]["rate-limit"];
                search: components["schemas"]["rate-limit"];
                code_search?: components["schemas"]["rate-limit"];
                source_import?: components["schemas"]["rate-limit"];
                integration_manifest?: components["schemas"]["rate-limit"];
                code_scanning_upload?: components["schemas"]["rate-limit"];
                actions_runner_registration?: components["schemas"]["rate-limit"];
                scim?: components["schemas"]["rate-limit"];
                dependency_snapshots?: components["schemas"]["rate-limit"];
                dependency_sbom?: components["schemas"]["rate-limit"];
                code_scanning_autofix?: components["schemas"]["rate-limit"];
            };
            rate: components["schemas"]["rate-limit"];
        };
        /**
         * Artifact
         * @description An artifact
         */
        artifact: {
            /** @example 5 */
            id: number;
            /** @example MDEwOkNoZWNrU3VpdGU1 */
            node_id: string;
            /**
             * @description The name of the artifact.
             * @example AdventureWorks.Framework
             */
            name: string;
            /**
             * @description The size in bytes of the artifact.
             * @example 12345
             */
            size_in_bytes: number;
            /** @example https://api.github.com/repos/github/hello-world/actions/artifacts/5 */
            url: string;
            /** @example https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip */
            archive_download_url: string;
            /** @description Whether or not the artifact has expired. */
            expired: boolean;
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            expires_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
            /**
             * @description The SHA256 digest of the artifact. This field will only be populated on artifacts uploaded with upload-artifact v4 or newer. For older versions, this field will be null.
             * @example sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c
             */
            digest?: string | null;
            workflow_run?: {
                /** @example 10 */
                id?: number;
                /** @example 42 */
                repository_id?: number;
                /** @example 42 */
                head_repository_id?: number;
                /** @example main */
                head_branch?: string;
                /** @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d */
                head_sha?: string;
            } | null;
        };
        /**
         * Repository actions caches
         * @description Repository actions caches
         */
        "actions-cache-list": {
            /**
             * @description Total number of caches
             * @example 2
             */
            total_count: number;
            /** @description Array of caches */
            actions_caches: {
                /** @example 2 */
                id?: number;
                /** @example refs/heads/main */
                ref?: string;
                /** @example Linux-node-958aff96db2d75d67787d1e634ae70b659de937b */
                key?: string;
                /** @example 73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0 */
                version?: string;
                /**
                 * Format: date-time
                 * @example 2019-01-24T22:45:36.000Z
                 */
                last_accessed_at?: string;
                /**
                 * Format: date-time
                 * @example 2019-01-24T22:45:36.000Z
                 */
                created_at?: string;
                /** @example 1024 */
                size_in_bytes?: number;
            }[];
        };
        /**
         * Job
         * @description Information of a job execution in a workflow run
         */
        job: {
            /**
             * @description The id of the job.
             * @example 21
             */
            id: number;
            /**
             * @description The id of the associated workflow run.
             * @example 5
             */
            run_id: number;
            /** @example https://api.github.com/repos/github/hello-world/actions/runs/5 */
            run_url: string;
            /**
             * @description Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
             * @example 1
             */
            run_attempt?: number;
            /** @example MDg6Q2hlY2tSdW40 */
            node_id: string;
            /**
             * @description The SHA of the commit that is being run.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /** @example https://api.github.com/repos/github/hello-world/actions/jobs/21 */
            url: string;
            /** @example https://github.com/github/hello-world/runs/4 */
            html_url: string | null;
            /**
             * @description The phase of the lifecycle that the job is currently in.
             * @example queued
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
            /**
             * @description The outcome of the job.
             * @example success
             * @enum {string|null}
             */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
            /**
             * Format: date-time
             * @description The time that the job created, in ISO 8601 format.
             * @example 2019-08-08T08:00:00-07:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The time that the job started, in ISO 8601 format.
             * @example 2019-08-08T08:00:00-07:00
             */
            started_at: string;
            /**
             * Format: date-time
             * @description The time that the job finished, in ISO 8601 format.
             * @example 2019-08-08T08:00:00-07:00
             */
            completed_at: string | null;
            /**
             * @description The name of the job.
             * @example test-coverage
             */
            name: string;
            /** @description Steps in this job. */
            steps?: {
                /**
                 * @description The phase of the lifecycle that the job is currently in.
                 * @example queued
                 * @enum {string}
                 */
                status: "queued" | "in_progress" | "completed";
                /**
                 * @description The outcome of the job.
                 * @example success
                 */
                conclusion: string | null;
                /**
                 * @description The name of the job.
                 * @example test-coverage
                 */
                name: string;
                /** @example 1 */
                number: number;
                /**
                 * Format: date-time
                 * @description The time that the step started, in ISO 8601 format.
                 * @example 2019-08-08T08:00:00-07:00
                 */
                started_at?: string | null;
                /**
                 * Format: date-time
                 * @description The time that the job finished, in ISO 8601 format.
                 * @example 2019-08-08T08:00:00-07:00
                 */
                completed_at?: string | null;
            }[];
            /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
            check_run_url: string;
            /**
             * @description Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
             * @example [
             *       "self-hosted",
             *       "foo",
             *       "bar"
             *     ]
             */
            labels: string[];
            /**
             * @description The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * @example 1
             */
            runner_id: number | null;
            /**
             * @description The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * @example my runner
             */
            runner_name: string | null;
            /**
             * @description The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * @example 2
             */
            runner_group_id: number | null;
            /**
             * @description The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * @example my runner group
             */
            runner_group_name: string | null;
            /**
             * @description The name of the workflow.
             * @example Build
             */
            workflow_name: string | null;
            /**
             * @description The name of the current branch.
             * @example main
             */
            head_branch: string | null;
        };
        /**
         * Actions OIDC subject customization for a repository
         * @description Actions OIDC subject customization for a repository
         */
        "oidc-custom-sub-repo": {
            /** @description Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
            use_default: boolean;
            /** @description Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
            include_claim_keys?: string[];
        };
        /**
         * Actions Secret
         * @description Set secrets for GitHub Actions.
         */
        "actions-secret": {
            /**
             * @description The name of the secret.
             * @example SECRET_TOKEN
             */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** Actions Variable */
        "actions-variable": {
            /**
             * @description The name of the variable.
             * @example USERNAME
             */
            name: string;
            /**
             * @description The value of the variable.
             * @example octocat
             */
            value: string;
            /**
             * Format: date-time
             * @description The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             * @example 2019-01-24T22:45:36.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             * @example 2019-01-24T22:45:36.000Z
             */
            updated_at: string;
        };
        /** @description Whether GitHub Actions is enabled on the repository. */
        "actions-enabled": boolean;
        "actions-repository-permissions": {
            enabled: components["schemas"]["actions-enabled"];
            allowed_actions?: components["schemas"]["allowed-actions"];
            selected_actions_url?: components["schemas"]["selected-actions-url"];
        };
        "actions-workflow-access-to-repository": {
            /**
             * @description Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
             *     repository.
             *
             *     `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
             * @enum {string}
             */
            access_level: "none" | "user" | "organization";
        };
        /**
         * Referenced workflow
         * @description A workflow referenced/reused by the initial caller workflow
         */
        "referenced-workflow": {
            path: string;
            sha: string;
            ref?: string;
        };
        /** Pull Request Minimal */
        "pull-request-minimal": {
            /** Format: int64 */
            id: number;
            number: number;
            url: string;
            head: {
                ref: string;
                sha: string;
                repo: {
                    /** Format: int64 */
                    id: number;
                    url: string;
                    name: string;
                };
            };
            base: {
                ref: string;
                sha: string;
                repo: {
                    /** Format: int64 */
                    id: number;
                    url: string;
                    name: string;
                };
            };
        };
        /**
         * Simple Commit
         * @description A commit.
         */
        "nullable-simple-commit": {
            /**
             * @description SHA for the commit
             * @example 7638417db6d59f3c431d3e1f261cc637155684cd
             */
            id: string;
            /** @description SHA for the commit's tree */
            tree_id: string;
            /**
             * @description Message describing the purpose of the commit
             * @example Fix #42
             */
            message: string;
            /**
             * Format: date-time
             * @description Timestamp of the commit
             * @example 2014-08-09T08:02:04+12:00
             */
            timestamp: string;
            /** @description Information about the Git author */
            author: {
                /**
                 * @description Name of the commit's author
                 * @example Monalisa Octocat
                 */
                name: string;
                /**
                 * Format: email
                 * @description Git email address of the commit's author
                 * @example monalisa.octocat@example.com
                 */
                email: string;
            } | null;
            /** @description Information about the Git committer */
            committer: {
                /**
                 * @description Name of the commit's committer
                 * @example Monalisa Octocat
                 */
                name: string;
                /**
                 * Format: email
                 * @description Git email address of the commit's committer
                 * @example monalisa.octocat@example.com
                 */
                email: string;
            } | null;
        } | null;
        /**
         * Workflow Run
         * @description An invocation of a workflow
         */
        "workflow-run": {
            /**
             * @description The ID of the workflow run.
             * @example 5
             */
            id: number;
            /**
             * @description The name of the workflow run.
             * @example Build
             */
            name?: string | null;
            /** @example MDEwOkNoZWNrU3VpdGU1 */
            node_id: string;
            /**
             * @description The ID of the associated check suite.
             * @example 42
             */
            check_suite_id?: number;
            /**
             * @description The node ID of the associated check suite.
             * @example MDEwOkNoZWNrU3VpdGU0Mg==
             */
            check_suite_node_id?: string;
            /** @example master */
            head_branch: string | null;
            /**
             * @description The SHA of the head commit that points to the version of the workflow being run.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /**
             * @description The full path of the workflow
             * @example octocat/octo-repo/.github/workflows/ci.yml@main
             */
            path: string;
            /**
             * @description The auto incrementing run number for the workflow run.
             * @example 106
             */
            run_number: number;
            /**
             * @description Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
             * @example 1
             */
            run_attempt?: number;
            referenced_workflows?: components["schemas"]["referenced-workflow"][] | null;
            /** @example push */
            event: string;
            /** @example completed */
            status: string | null;
            /** @example neutral */
            conclusion: string | null;
            /**
             * @description The ID of the parent workflow.
             * @example 5
             */
            workflow_id: number;
            /**
             * @description The URL to the workflow run.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5
             */
            url: string;
            /** @example https://github.com/github/hello-world/suites/4 */
            html_url: string;
            /** @description Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run. */
            pull_requests: components["schemas"]["pull-request-minimal"][] | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            actor?: components["schemas"]["simple-user"];
            triggering_actor?: components["schemas"]["simple-user"];
            /**
             * Format: date-time
             * @description The start time of the latest run. Resets on re-run.
             */
            run_started_at?: string;
            /**
             * @description The URL to the jobs for the workflow run.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
             */
            jobs_url: string;
            /**
             * @description The URL to download the logs for the workflow run.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5/logs
             */
            logs_url: string;
            /**
             * @description The URL to the associated check suite.
             * @example https://api.github.com/repos/github/hello-world/check-suites/12
             */
            check_suite_url: string;
            /**
             * @description The URL to the artifacts for the workflow run.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
             */
            artifacts_url: string;
            /**
             * @description The URL to cancel the workflow run.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
             */
            cancel_url: string;
            /**
             * @description The URL to rerun the workflow run.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
             */
            rerun_url: string;
            /**
             * @description The URL to the previous attempted run of this workflow, if one exists.
             * @example https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3
             */
            previous_attempt_url?: string | null;
            /**
             * @description The URL to the workflow.
             * @example https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
             */
            workflow_url: string;
            head_commit: components["schemas"]["nullable-simple-commit"];
            repository: components["schemas"]["minimal-repository"];
            head_repository: components["schemas"]["minimal-repository"];
            /** @example 5 */
            head_repository_id?: number;
            /**
             * @description The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
             * @example Simple Workflow
             */
            display_title: string;
        };
        /**
         * Environment Approval
         * @description An entry in the reviews log for environment deployments
         */
        "environment-approvals": {
            /** @description The list of environments that were approved or rejected */
            environments: {
                /**
                 * @description The id of the environment.
                 * @example 56780428
                 */
                id?: number;
                /** @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg= */
                node_id?: string;
                /**
                 * @description The name of the environment.
                 * @example staging
                 */
                name?: string;
                /** @example https://api.github.com/repos/github/hello-world/environments/staging */
                url?: string;
                /** @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging */
                html_url?: string;
                /**
                 * Format: date-time
                 * @description The time that the environment was created, in ISO 8601 format.
                 * @example 2020-11-23T22:00:40Z
                 */
                created_at?: string;
                /**
                 * Format: date-time
                 * @description The time that the environment was last updated, in ISO 8601 format.
                 * @example 2020-11-23T22:00:40Z
                 */
                updated_at?: string;
            }[];
            /**
             * @description Whether deployment to the environment(s) was approved or rejected or pending (with comments)
             * @example approved
             * @enum {string}
             */
            state: "approved" | "rejected" | "pending";
            user: components["schemas"]["simple-user"];
            /**
             * @description The comment submitted with the deployment review
             * @example Ship it!
             */
            comment: string;
        };
        "review-custom-gates-comment-required": {
            /** @description The name of the environment to approve or reject. */
            environment_name: string;
            /** @description Comment associated with the pending deployment protection rule. **Required when state is not provided.** */
            comment: string;
        };
        "review-custom-gates-state-required": {
            /** @description The name of the environment to approve or reject. */
            environment_name: string;
            /**
             * @description Whether to approve or reject deployment to the specified environments.
             * @enum {string}
             */
            state: "approved" | "rejected";
            /** @description Optional comment to include with the review. */
            comment?: string;
        };
        /**
         * @description The type of reviewer.
         * @example User
         * @enum {string}
         */
        "deployment-reviewer-type": "User" | "Team";
        /**
         * Pending Deployment
         * @description Details of a deployment that is waiting for protection rules to pass
         */
        "pending-deployment": {
            environment: {
                /**
                 * Format: int64
                 * @description The id of the environment.
                 * @example 56780428
                 */
                id?: number;
                /** @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg= */
                node_id?: string;
                /**
                 * @description The name of the environment.
                 * @example staging
                 */
                name?: string;
                /** @example https://api.github.com/repos/github/hello-world/environments/staging */
                url?: string;
                /** @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging */
                html_url?: string;
            };
            /**
             * @description The set duration of the wait timer
             * @example 30
             */
            wait_timer: number;
            /**
             * Format: date-time
             * @description The time that the wait timer began.
             * @example 2020-11-23T22:00:40Z
             */
            wait_timer_started_at: string | null;
            /**
             * @description Whether the currently authenticated user can approve the deployment
             * @example true
             */
            current_user_can_approve: boolean;
            /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
            reviewers: {
                type?: components["schemas"]["deployment-reviewer-type"];
                reviewer?: components["schemas"]["simple-user"] | components["schemas"]["team"];
            }[];
        };
        /**
         * Deployment
         * @description A request for a specific ref(branch,sha,tag) to be deployed
         */
        deployment: {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/deployments/1
             */
            url: string;
            /**
             * Format: int64
             * @description Unique identifier of the deployment
             * @example 42
             */
            id: number;
            /** @example MDEwOkRlcGxveW1lbnQx */
            node_id: string;
            /** @example a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d */
            sha: string;
            /**
             * @description The ref to deploy. This can be a branch, tag, or sha.
             * @example topic-branch
             */
            ref: string;
            /**
             * @description Parameter to specify a task to execute
             * @example deploy
             */
            task: string;
            payload: {
                [key: string]: unknown;
            } | string;
            /** @example staging */
            original_environment?: string;
            /**
             * @description Name for the target deployment environment.
             * @example production
             */
            environment: string;
            /** @example Deploy request from hubot */
            description: string | null;
            creator: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @example 2012-07-20T01:19:13Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2012-07-20T01:19:13Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
             */
            statuses_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example
             */
            repository_url: string;
            /**
             * @description Specifies if the given environment is will no longer exist at some point in the future. Default: false.
             * @example true
             */
            transient_environment?: boolean;
            /**
             * @description Specifies if the given environment is one that end-users directly interact with. Default: false.
             * @example true
             */
            production_environment?: boolean;
            performed_via_github_app?: components["schemas"]["nullable-integration"];
        };
        /**
         * Workflow Run Usage
         * @description Workflow Run Usage
         */
        "workflow-run-usage": {
            billable: {
                UBUNTU?: {
                    total_ms: number;
                    jobs: number;
                    job_runs?: {
                        job_id: number;
                        duration_ms: number;
                    }[];
                };
                MACOS?: {
                    total_ms: number;
                    jobs: number;
                    job_runs?: {
                        job_id: number;
                        duration_ms: number;
                    }[];
                };
                WINDOWS?: {
                    total_ms: number;
                    jobs: number;
                    job_runs?: {
                        job_id: number;
                        duration_ms: number;
                    }[];
                };
            };
            run_duration_ms?: number;
        };
        /**
         * Workflow
         * @description A GitHub Actions workflow
         */
        workflow: {
            /** @example 5 */
            id: number;
            /** @example MDg6V29ya2Zsb3cxMg== */
            node_id: string;
            /** @example CI */
            name: string;
            /** @example ruby.yaml */
            path: string;
            /**
             * @example active
             * @enum {string}
             */
            state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
            /**
             * Format: date-time
             * @example 2019-12-06T14:20:20.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2019-12-06T14:20:20.000Z
             */
            updated_at: string;
            /** @example https://api.github.com/repos/actions/setup-ruby/workflows/5 */
            url: string;
            /** @example https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml */
            html_url: string;
            /** @example https://github.com/actions/setup-ruby/workflows/CI/badge.svg */
            badge_url: string;
            /**
             * Format: date-time
             * @example 2019-12-06T14:20:20.000Z
             */
            deleted_at?: string;
        };
        /**
         * Workflow Usage
         * @description Workflow Usage
         */
        "workflow-usage": {
            billable: {
                UBUNTU?: {
                    total_ms?: number;
                };
                MACOS?: {
                    total_ms?: number;
                };
                WINDOWS?: {
                    total_ms?: number;
                };
            };
        };
        /**
         * Activity
         * @description Activity
         */
        activity: {
            /** @example 1296269 */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The SHA of the commit before the activity.
             * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            before: string;
            /**
             * @description The SHA of the commit after the activity.
             * @example 827efc6d56897b048c772eb4087f854f46256132
             */
            after: string;
            /**
             * @description The full Git reference, formatted as `refs/heads/<branch name>`.
             * @example refs/heads/main
             */
            ref: string;
            /**
             * Format: date-time
             * @description The time when the activity occurred.
             * @example 2011-01-26T19:06:43Z
             */
            timestamp: string;
            /**
             * @description The type of the activity that was performed.
             * @example force_push
             * @enum {string}
             */
            activity_type: "push" | "force_push" | "branch_deletion" | "branch_creation" | "pr_merge" | "merge_queue_merge";
            actor: components["schemas"]["nullable-simple-user"];
        };
        /**
         * Autolink reference
         * @description An autolink reference.
         */
        autolink: {
            /** @example 3 */
            id: number;
            /**
             * @description The prefix of a key that is linkified.
             * @example TICKET-
             */
            key_prefix: string;
            /**
             * @description A template for the target URL that is generated if a key was found.
             * @example https://example.com/TICKET?query=<num>
             */
            url_template: string;
            /**
             * @description Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
             * @example true
             */
            is_alphanumeric: boolean;
        };
        /**
         * Check Dependabot security updates
         * @description Check Dependabot security updates
         */
        "check-automated-security-fixes": {
            /**
             * @description Whether Dependabot security updates are enabled for the repository.
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether Dependabot security updates are paused for the repository.
             * @example false
             */
            paused: boolean;
        };
        /**
         * Protected Branch Required Status Check
         * @description Protected Branch Required Status Check
         */
        "protected-branch-required-status-check": {
            url?: string;
            enforcement_level?: string;
            contexts: string[];
            checks: {
                context: string;
                app_id: number | null;
            }[];
            contexts_url?: string;
            strict?: boolean;
        };
        /**
         * Protected Branch Admin Enforced
         * @description Protected Branch Admin Enforced
         */
        "protected-branch-admin-enforced": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
             */
            url: string;
            /** @example true */
            enabled: boolean;
        };
        /**
         * Protected Branch Pull Request Review
         * @description Protected Branch Pull Request Review
         */
        "protected-branch-pull-request-review": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
             */
            url?: string;
            dismissal_restrictions?: {
                /** @description The list of users with review dismissal access. */
                users?: components["schemas"]["simple-user"][];
                /** @description The list of teams with review dismissal access. */
                teams?: components["schemas"]["team"][];
                /** @description The list of apps with review dismissal access. */
                apps?: components["schemas"]["integration"][];
                /** @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions" */
                url?: string;
                /** @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users" */
                users_url?: string;
                /** @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams" */
                teams_url?: string;
            };
            /** @description Allow specific users, teams, or apps to bypass pull request requirements. */
            bypass_pull_request_allowances?: {
                /** @description The list of users allowed to bypass pull request requirements. */
                users?: components["schemas"]["simple-user"][];
                /** @description The list of teams allowed to bypass pull request requirements. */
                teams?: components["schemas"]["team"][];
                /** @description The list of apps allowed to bypass pull request requirements. */
                apps?: components["schemas"]["integration"][];
            };
            /** @example true */
            dismiss_stale_reviews: boolean;
            /** @example true */
            require_code_owner_reviews: boolean;
            /** @example 2 */
            required_approving_review_count?: number;
            /**
             * @description Whether the most recent push must be approved by someone other than the person who pushed it.
             * @default false
             * @example true
             */
            require_last_push_approval: boolean;
        };
        /**
         * Branch Restriction Policy
         * @description Branch Restriction Policy
         */
        "branch-restriction-policy": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            users_url: string;
            /** Format: uri */
            teams_url: string;
            /** Format: uri */
            apps_url: string;
            users: {
                login?: string;
                /** Format: int64 */
                id?: number;
                node_id?: string;
                avatar_url?: string;
                gravatar_id?: string;
                url?: string;
                html_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                starred_url?: string;
                subscriptions_url?: string;
                organizations_url?: string;
                repos_url?: string;
                events_url?: string;
                received_events_url?: string;
                type?: string;
                site_admin?: boolean;
                user_view_type?: string;
            }[];
            teams: {
                id?: number;
                node_id?: string;
                url?: string;
                html_url?: string;
                name?: string;
                slug?: string;
                description?: string | null;
                privacy?: string;
                notification_setting?: string;
                permission?: string;
                members_url?: string;
                repositories_url?: string;
                parent?: string | null;
            }[];
            apps: {
                id?: number;
                slug?: string;
                node_id?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    url?: string;
                    repos_url?: string;
                    events_url?: string;
                    hooks_url?: string;
                    issues_url?: string;
                    members_url?: string;
                    public_members_url?: string;
                    avatar_url?: string;
                    description?: string;
                    /** @example "" */
                    gravatar_id?: string;
                    /** @example "https://github.com/testorg-ea8ec76d71c3af4b" */
                    html_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers" */
                    followers_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}" */
                    following_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}" */
                    gists_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}" */
                    starred_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions" */
                    subscriptions_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs" */
                    organizations_url?: string;
                    /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events" */
                    received_events_url?: string;
                    /** @example "Organization" */
                    type?: string;
                    /** @example false */
                    site_admin?: boolean;
                    /** @example public */
                    user_view_type?: string;
                };
                name?: string;
                client_id?: string;
                description?: string;
                external_url?: string;
                html_url?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    metadata?: string;
                    contents?: string;
                    issues?: string;
                    single_file?: string;
                };
                events?: string[];
            }[];
        };
        /**
         * Branch Protection
         * @description Branch Protection
         */
        "branch-protection": {
            url?: string;
            enabled?: boolean;
            required_status_checks?: components["schemas"]["protected-branch-required-status-check"];
            enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
            required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
            restrictions?: components["schemas"]["branch-restriction-policy"];
            required_linear_history?: {
                enabled?: boolean;
            };
            allow_force_pushes?: {
                enabled?: boolean;
            };
            allow_deletions?: {
                enabled?: boolean;
            };
            block_creations?: {
                enabled?: boolean;
            };
            required_conversation_resolution?: {
                enabled?: boolean;
            };
            /** @example "branch/with/protection" */
            name?: string;
            /** @example "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection" */
            protection_url?: string;
            required_signatures?: {
                /**
                 * Format: uri
                 * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
                 */
                url: string;
                /** @example true */
                enabled: boolean;
            };
            /** @description Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
            lock_branch?: {
                /** @default false */
                enabled: boolean;
            };
            /** @description Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
            allow_fork_syncing?: {
                /** @default false */
                enabled: boolean;
            };
        };
        /**
         * Short Branch
         * @description Short Branch
         */
        "short-branch": {
            name: string;
            commit: {
                sha: string;
                /** Format: uri */
                url: string;
            };
            protected: boolean;
            protection?: components["schemas"]["branch-protection"];
            /** Format: uri */
            protection_url?: string;
        };
        /**
         * Git User
         * @description Metaproperties for Git author/committer information.
         */
        "nullable-git-user": {
            /** @example "Chris Wanstrath" */
            name?: string;
            /** @example "chris@ozmm.org" */
            email?: string;
            /** @example "2007-10-29T02:42:39.000-07:00" */
            date?: string;
        } | null;
        /** Verification */
        verification: {
            verified: boolean;
            reason: string;
            payload: string | null;
            signature: string | null;
            verified_at: string | null;
        };
        /**
         * Diff Entry
         * @description Diff Entry
         */
        "diff-entry": {
            /** @example bbcd538c8e72b8c175046e27cc8f907076331401 */
            sha: string;
            /** @example file1.txt */
            filename: string;
            /**
             * @example added
             * @enum {string}
             */
            status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
            /** @example 103 */
            additions: number;
            /** @example 21 */
            deletions: number;
            /** @example 124 */
            changes: number;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
             */
            blob_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
             */
            raw_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            contents_url: string;
            /** @example @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test */
            patch?: string;
            /** @example file.txt */
            previous_filename?: string;
        };
        /**
         * Commit
         * @description Commit
         */
        commit: {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            url: string;
            /** @example 6dcb09b5b57875f334f61aebed695e2e4193db5e */
            sha: string;
            /** @example MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ== */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
             */
            comments_url: string;
            commit: {
                /**
                 * Format: uri
                 * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
                 */
                url: string;
                author: components["schemas"]["nullable-git-user"];
                committer: components["schemas"]["nullable-git-user"];
                /** @example Fix all the bugs */
                message: string;
                /** @example 0 */
                comment_count: number;
                tree: {
                    /** @example 827efc6d56897b048c772eb4087f854f46256132 */
                    sha: string;
                    /**
                     * Format: uri
                     * @example https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
                     */
                    url: string;
                };
                verification?: components["schemas"]["verification"];
            };
            author: (components["schemas"]["simple-user"] | components["schemas"]["empty-object"]) | null;
            committer: (components["schemas"]["simple-user"] | components["schemas"]["empty-object"]) | null;
            parents: {
                /** @example 7638417db6d59f3c431d3e1f261cc637155684cd */
                sha: string;
                /**
                 * Format: uri
                 * @example https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                url: string;
                /**
                 * Format: uri
                 * @example https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                html_url?: string;
            }[];
            stats?: {
                additions?: number;
                deletions?: number;
                total?: number;
            };
            files?: components["schemas"]["diff-entry"][];
        };
        /**
         * Branch With Protection
         * @description Branch With Protection
         */
        "branch-with-protection": {
            name: string;
            commit: components["schemas"]["commit"];
            _links: {
                html: string;
                /** Format: uri */
                self: string;
            };
            protected: boolean;
            protection: components["schemas"]["branch-protection"];
            /** Format: uri */
            protection_url: string;
            /** @example "mas*" */
            pattern?: string;
            /** @example 1 */
            required_approving_review_count?: number;
        };
        /**
         * Status Check Policy
         * @description Status Check Policy
         */
        "status-check-policy": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
             */
            url: string;
            /** @example true */
            strict: boolean;
            /** @example [
             *       "continuous-integration/travis-ci"
             *     ] */
            contexts: string[];
            checks: {
                /** @example continuous-integration/travis-ci */
                context: string;
                app_id: number | null;
            }[];
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
             */
            contexts_url: string;
        };
        /**
         * Protected Branch
         * @description Branch protections protect branches
         */
        "protected-branch": {
            /** Format: uri */
            url: string;
            required_status_checks?: components["schemas"]["status-check-policy"];
            required_pull_request_reviews?: {
                /** Format: uri */
                url: string;
                dismiss_stale_reviews?: boolean;
                require_code_owner_reviews?: boolean;
                required_approving_review_count?: number;
                /**
                 * @description Whether the most recent push must be approved by someone other than the person who pushed it.
                 * @default false
                 */
                require_last_push_approval: boolean;
                dismissal_restrictions?: {
                    /** Format: uri */
                    url: string;
                    /** Format: uri */
                    users_url: string;
                    /** Format: uri */
                    teams_url: string;
                    users: components["schemas"]["simple-user"][];
                    teams: components["schemas"]["team"][];
                    apps?: components["schemas"]["integration"][];
                };
                bypass_pull_request_allowances?: {
                    users: components["schemas"]["simple-user"][];
                    teams: components["schemas"]["team"][];
                    apps?: components["schemas"]["integration"][];
                };
            };
            required_signatures?: {
                /**
                 * Format: uri
                 * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
                 */
                url: string;
                /** @example true */
                enabled: boolean;
            };
            enforce_admins?: {
                /** Format: uri */
                url: string;
                enabled: boolean;
            };
            required_linear_history?: {
                enabled: boolean;
            };
            allow_force_pushes?: {
                enabled: boolean;
            };
            allow_deletions?: {
                enabled: boolean;
            };
            restrictions?: components["schemas"]["branch-restriction-policy"];
            required_conversation_resolution?: {
                enabled?: boolean;
            };
            block_creations?: {
                enabled: boolean;
            };
            /** @description Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
            lock_branch?: {
                /** @default false */
                enabled: boolean;
            };
            /** @description Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
            allow_fork_syncing?: {
                /** @default false */
                enabled: boolean;
            };
        };
        /**
         * Deployment
         * @description A deployment created as the result of an Actions check run from a workflow that references an environment
         */
        "deployment-simple": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/deployments/1
             */
            url: string;
            /**
             * @description Unique identifier of the deployment
             * @example 42
             */
            id: number;
            /** @example MDEwOkRlcGxveW1lbnQx */
            node_id: string;
            /**
             * @description Parameter to specify a task to execute
             * @example deploy
             */
            task: string;
            /** @example staging */
            original_environment?: string;
            /**
             * @description Name for the target deployment environment.
             * @example production
             */
            environment: string;
            /** @example Deploy request from hubot */
            description: string | null;
            /**
             * Format: date-time
             * @example 2012-07-20T01:19:13Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2012-07-20T01:19:13Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
             */
            statuses_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example
             */
            repository_url: string;
            /**
             * @description Specifies if the given environment is will no longer exist at some point in the future. Default: false.
             * @example true
             */
            transient_environment?: boolean;
            /**
             * @description Specifies if the given environment is one that end-users directly interact with. Default: false.
             * @example true
             */
            production_environment?: boolean;
            performed_via_github_app?: components["schemas"]["nullable-integration"];
        };
        /**
         * CheckRun
         * @description A check performed on the code of a given code change
         */
        "check-run": {
            /**
             * Format: int64
             * @description The id of the check.
             * @example 21
             */
            id: number;
            /**
             * @description The SHA of the commit that is being checked.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /** @example MDg6Q2hlY2tSdW40 */
            node_id: string;
            /** @example 42 */
            external_id: string | null;
            /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
            url: string;
            /** @example https://github.com/github/hello-world/runs/4 */
            html_url: string | null;
            /** @example https://example.com */
            details_url: string | null;
            /**
             * @description The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
             * @example queued
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
            /**
             * @example neutral
             * @enum {string|null}
             */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
            /**
             * Format: date-time
             * @example 2018-05-04T01:14:52Z
             */
            started_at: string | null;
            /**
             * Format: date-time
             * @example 2018-05-04T01:14:52Z
             */
            completed_at: string | null;
            output: {
                title: string | null;
                summary: string | null;
                text: string | null;
                annotations_count: number;
                /** Format: uri */
                annotations_url: string;
            };
            /**
             * @description The name of the check.
             * @example test-coverage
             */
            name: string;
            check_suite: {
                id: number;
            } | null;
            app: components["schemas"]["nullable-integration"];
            /** @description Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check. */
            pull_requests: components["schemas"]["pull-request-minimal"][];
            deployment?: components["schemas"]["deployment-simple"];
        };
        /**
         * Check Annotation
         * @description Check Annotation
         */
        "check-annotation": {
            /** @example README.md */
            path: string;
            /** @example 2 */
            start_line: number;
            /** @example 2 */
            end_line: number;
            /** @example 5 */
            start_column: number | null;
            /** @example 10 */
            end_column: number | null;
            /** @example warning */
            annotation_level: string | null;
            /** @example Spell Checker */
            title: string | null;
            /** @example Check your spelling for 'banaas'. */
            message: string | null;
            /** @example Do you mean 'bananas' or 'banana'? */
            raw_details: string | null;
            blob_href: string;
        };
        /**
         * Simple Commit
         * @description A commit.
         */
        "simple-commit": {
            /**
             * @description SHA for the commit
             * @example 7638417db6d59f3c431d3e1f261cc637155684cd
             */
            id: string;
            /** @description SHA for the commit's tree */
            tree_id: string;
            /**
             * @description Message describing the purpose of the commit
             * @example Fix #42
             */
            message: string;
            /**
             * Format: date-time
             * @description Timestamp of the commit
             * @example 2014-08-09T08:02:04+12:00
             */
            timestamp: string;
            /** @description Information about the Git author */
            author: {
                /**
                 * @description Name of the commit's author
                 * @example Monalisa Octocat
                 */
                name: string;
                /**
                 * Format: email
                 * @description Git email address of the commit's author
                 * @example monalisa.octocat@example.com
                 */
                email: string;
            } | null;
            /** @description Information about the Git committer */
            committer: {
                /**
                 * @description Name of the commit's committer
                 * @example Monalisa Octocat
                 */
                name: string;
                /**
                 * Format: email
                 * @description Git email address of the commit's committer
                 * @example monalisa.octocat@example.com
                 */
                email: string;
            } | null;
        };
        /**
         * CheckSuite
         * @description A suite of checks performed on the code of a given code change
         */
        "check-suite": {
            /**
             * Format: int64
             * @example 5
             */
            id: number;
            /** @example MDEwOkNoZWNrU3VpdGU1 */
            node_id: string;
            /** @example master */
            head_branch: string | null;
            /**
             * @description The SHA of the head commit that is being checked.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /**
             * @description The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
             * @example completed
             * @enum {string|null}
             */
            status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending" | null;
            /**
             * @example neutral
             * @enum {string|null}
             */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | "startup_failure" | "stale" | null;
            /** @example https://api.github.com/repos/github/hello-world/check-suites/5 */
            url: string | null;
            /** @example 146e867f55c26428e5f9fade55a9bbf5e95a7912 */
            before: string | null;
            /** @example d6fde92930d4715a2b49857d24b940956b26d2d3 */
            after: string | null;
            pull_requests: components["schemas"]["pull-request-minimal"][] | null;
            app: components["schemas"]["nullable-integration"];
            repository: components["schemas"]["minimal-repository"];
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
            head_commit: components["schemas"]["simple-commit"];
            latest_check_runs_count: number;
            check_runs_url: string;
            rerequestable?: boolean;
            runs_rerequestable?: boolean;
        };
        /**
         * Check Suite Preference
         * @description Check suite configuration preferences for a repository.
         */
        "check-suite-preference": {
            preferences: {
                auto_trigger_checks?: {
                    app_id: number;
                    setting: boolean;
                }[];
            };
            repository: components["schemas"]["minimal-repository"];
        };
        "code-scanning-alert-items": {
            number: components["schemas"]["alert-number"];
            created_at: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["alert-updated-at"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            instances_url: components["schemas"]["alert-instances-url"];
            state: components["schemas"]["code-scanning-alert-state"];
            fixed_at?: components["schemas"]["alert-fixed-at"];
            dismissed_by: components["schemas"]["nullable-simple-user"];
            dismissed_at: components["schemas"]["alert-dismissed-at"];
            dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
            dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
            rule: components["schemas"]["code-scanning-alert-rule-summary"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
            dismissal_approved_by?: components["schemas"]["nullable-simple-user"];
        };
        "code-scanning-alert-rule": {
            /** @description A unique identifier for the rule used to detect the alert. */
            id?: string | null;
            /** @description The name of the rule used to detect the alert. */
            name?: string;
            /**
             * @description The severity of the alert.
             * @enum {string|null}
             */
            severity?: "none" | "note" | "warning" | "error" | null;
            /**
             * @description The security severity of the alert.
             * @enum {string|null}
             */
            security_severity_level?: "low" | "medium" | "high" | "critical" | null;
            /** @description A short description of the rule used to detect the alert. */
            description?: string;
            /** @description A description of the rule used to detect the alert. */
            full_description?: string;
            /** @description A set of tags applicable for the rule. */
            tags?: string[] | null;
            /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
            help?: string | null;
            /** @description A link to the documentation for the rule used to detect the alert. */
            help_uri?: string | null;
        };
        "code-scanning-alert": {
            number: components["schemas"]["alert-number"];
            created_at: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["alert-updated-at"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            instances_url: components["schemas"]["alert-instances-url"];
            state: components["schemas"]["code-scanning-alert-state"];
            fixed_at?: components["schemas"]["alert-fixed-at"];
            dismissed_by: components["schemas"]["nullable-simple-user"];
            dismissed_at: components["schemas"]["alert-dismissed-at"];
            dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
            dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
            rule: components["schemas"]["code-scanning-alert-rule"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
            dismissal_approved_by?: components["schemas"]["nullable-simple-user"];
        };
        /**
         * @description Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
         * @enum {string}
         */
        "code-scanning-alert-set-state": "open" | "dismissed";
        /** @description If `true`, attempt to create an alert dismissal request. */
        "code-scanning-alert-create-request": boolean;
        /**
         * @description The status of an autofix.
         * @enum {string}
         */
        "code-scanning-autofix-status": "pending" | "error" | "success" | "outdated";
        /** @description The description of an autofix. */
        "code-scanning-autofix-description": string | null;
        /**
         * Format: date-time
         * @description The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "code-scanning-autofix-started-at": string;
        "code-scanning-autofix": {
            status: components["schemas"]["code-scanning-autofix-status"];
            description: components["schemas"]["code-scanning-autofix-description"];
            started_at: components["schemas"]["code-scanning-autofix-started-at"];
        };
        /** @description Commit an autofix for a code scanning alert */
        "code-scanning-autofix-commits": {
            /** @description The Git reference of target branch for the commit. Branch needs to already exist.  For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
            target_ref?: string;
            /** @description Commit message to be used. */
            message?: string;
        } | null;
        "code-scanning-autofix-commits-response": {
            /** @description The Git reference of target branch for the commit. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
            target_ref?: string;
            /** @description SHA of commit with autofix. */
            sha?: string;
        };
        /**
         * @description An identifier for the upload.
         * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
         */
        "code-scanning-analysis-sarif-id": string;
        /** @description The SHA of the commit to which the analysis you are uploading relates. */
        "code-scanning-analysis-commit-sha": string;
        /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
        "code-scanning-analysis-environment": string;
        /**
         * Format: date-time
         * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "code-scanning-analysis-created-at": string;
        /**
         * Format: uri
         * @description The REST API URL of the analysis resource.
         */
        "code-scanning-analysis-url": string;
        "code-scanning-analysis": {
            ref: components["schemas"]["code-scanning-ref"];
            commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
            analysis_key: components["schemas"]["code-scanning-analysis-analysis-key"];
            environment: components["schemas"]["code-scanning-analysis-environment"];
            category?: components["schemas"]["code-scanning-analysis-category"];
            /** @example error reading field xyz */
            error: string;
            created_at: components["schemas"]["code-scanning-analysis-created-at"];
            /** @description The total number of results in the analysis. */
            results_count: number;
            /** @description The total number of rules used in the analysis. */
            rules_count: number;
            /** @description Unique identifier for this analysis. */
            id: number;
            url: components["schemas"]["code-scanning-analysis-url"];
            sarif_id: components["schemas"]["code-scanning-analysis-sarif-id"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            deletable: boolean;
            /**
             * @description Warning generated when processing the analysis
             * @example 123 results were ignored
             */
            warning: string;
        };
        /**
         * Analysis deletion
         * @description Successful deletion of a code scanning analysis
         */
        "code-scanning-analysis-deletion": {
            /**
             * Format: uri
             * @description Next deletable analysis in chain, without last analysis deletion confirmation
             */
            readonly next_analysis_url: string | null;
            /**
             * Format: uri
             * @description Next deletable analysis in chain, with last analysis deletion confirmation
             */
            readonly confirm_delete_url: string | null;
        };
        /**
         * CodeQL Database
         * @description A CodeQL database.
         */
        "code-scanning-codeql-database": {
            /** @description The ID of the CodeQL database. */
            id: number;
            /** @description The name of the CodeQL database. */
            name: string;
            /** @description The language of the CodeQL database. */
            language: string;
            uploader: components["schemas"]["simple-user"];
            /** @description The MIME type of the CodeQL database file. */
            content_type: string;
            /** @description The size of the CodeQL database file in bytes. */
            size: number;
            /**
             * Format: date-time
             * @description The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            updated_at: string;
            /**
             * Format: uri
             * @description The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
             */
            url: string;
            /** @description The commit SHA of the repository at the time the CodeQL database was created. */
            commit_oid?: string | null;
        };
        /**
         * @description The language targeted by the CodeQL query
         * @enum {string}
         */
        "code-scanning-variant-analysis-language": "cpp" | "csharp" | "go" | "java" | "javascript" | "python" | "ruby" | "rust" | "swift";
        /**
         * Repository Identifier
         * @description Repository Identifier
         */
        "code-scanning-variant-analysis-repository": {
            /**
             * @description A unique identifier of the repository.
             * @example 1296269
             */
            id: number;
            /**
             * @description The name of the repository.
             * @example Hello-World
             */
            name: string;
            /**
             * @description The full, globally unique, name of the repository.
             * @example octocat/Hello-World
             */
            full_name: string;
            /** @description Whether the repository is private. */
            private: boolean;
            /** @example 80 */
            stargazers_count: number;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string | null;
        };
        /**
         * @description The new status of the CodeQL variant analysis repository task.
         * @enum {string}
         */
        "code-scanning-variant-analysis-status": "pending" | "in_progress" | "succeeded" | "failed" | "canceled" | "timed_out";
        "code-scanning-variant-analysis-skipped-repo-group": {
            /**
             * @description The total number of repositories that were skipped for this reason.
             * @example 2
             */
            repository_count: number;
            /** @description A list of repositories that were skipped. This list may not include all repositories that were skipped. This is only available when the repository was found and the user has access to it. */
            repositories: components["schemas"]["code-scanning-variant-analysis-repository"][];
        };
        /**
         * Variant Analysis
         * @description A run of a CodeQL query against one or more repositories.
         */
        "code-scanning-variant-analysis": {
            /** @description The ID of the variant analysis. */
            id: number;
            controller_repo: components["schemas"]["simple-repository"];
            actor: components["schemas"]["simple-user"];
            query_language: components["schemas"]["code-scanning-variant-analysis-language"];
            /** @description The download url for the query pack. */
            query_pack_url: string;
            /**
             * Format: date-time
             * @description The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            updated_at?: string;
            /**
             * Format: date-time
             * @description The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
             */
            completed_at?: string | null;
            /** @enum {string} */
            status: "in_progress" | "succeeded" | "failed" | "cancelled";
            /** @description The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started. */
            actions_workflow_run_id?: number;
            /**
             * @description The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
             * @enum {string}
             */
            failure_reason?: "no_repos_queried" | "actions_workflow_run_failed" | "internal_error";
            scanned_repositories?: {
                repository: components["schemas"]["code-scanning-variant-analysis-repository"];
                analysis_status: components["schemas"]["code-scanning-variant-analysis-status"];
                /** @description The number of results in the case of a successful analysis. This is only available for successful analyses. */
                result_count?: number;
                /** @description The size of the artifact. This is only available for successful analyses. */
                artifact_size_in_bytes?: number;
                /** @description The reason of the failure of this repo task. This is only available if the repository task has failed. */
                failure_message?: string;
            }[];
            /** @description Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis. */
            skipped_repositories?: {
                access_mismatch_repos: components["schemas"]["code-scanning-variant-analysis-skipped-repo-group"];
                not_found_repos: {
                    /**
                     * @description The total number of repositories that were skipped for this reason.
                     * @example 2
                     */
                    repository_count: number;
                    /** @description A list of full repository names that were skipped. This list may not include all repositories that were skipped. */
                    repository_full_names: string[];
                };
                no_codeql_db_repos: components["schemas"]["code-scanning-variant-analysis-skipped-repo-group"];
                over_limit_repos: components["schemas"]["code-scanning-variant-analysis-skipped-repo-group"];
            };
        };
        "code-scanning-variant-analysis-repo-task": {
            repository: components["schemas"]["simple-repository"];
            analysis_status: components["schemas"]["code-scanning-variant-analysis-status"];
            /** @description The size of the artifact. This is only available for successful analyses. */
            artifact_size_in_bytes?: number;
            /** @description The number of results in the case of a successful analysis. This is only available for successful analyses. */
            result_count?: number;
            /** @description The reason of the failure of this repo task. This is only available if the repository task has failed. */
            failure_message?: string;
            /** @description The SHA of the commit the CodeQL database was built against. This is only available for successful analyses. */
            database_commit_sha?: string;
            /** @description The source location prefix to use. This is only available for successful analyses. */
            source_location_prefix?: string;
            /** @description The URL of the artifact. This is only available for successful analyses. */
            artifact_url?: string;
        };
        /** @description Configuration for code scanning default setup. */
        "code-scanning-default-setup": {
            /**
             * @description Code scanning default setup has been configured or not.
             * @enum {string}
             */
            state?: "configured" | "not-configured";
            /** @description Languages to be analyzed. */
            languages?: ("actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "javascript" | "python" | "ruby" | "typescript" | "swift")[];
            /**
             * @description Runner type to be used.
             * @enum {string|null}
             */
            runner_type?: "standard" | "labeled" | null;
            /**
             * @description Runner label to be used if the runner type is labeled.
             * @example code-scanning
             */
            runner_label?: string | null;
            /**
             * @description CodeQL query suite to be used.
             * @enum {string}
             */
            query_suite?: "default" | "extended";
            /**
             * @description Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
             * @enum {string}
             */
            threat_model?: "remote" | "remote_and_local";
            /**
             * Format: date-time
             * @description Timestamp of latest configuration update.
             * @example 2023-12-06T14:20:20.000Z
             */
            updated_at?: string | null;
            /**
             * @description The frequency of the periodic analysis.
             * @enum {string|null}
             */
            schedule?: "weekly" | null;
        };
        /** @description Configuration for code scanning default setup. */
        "code-scanning-default-setup-update": {
            /**
             * @description The desired state of code scanning default setup.
             * @enum {string}
             */
            state?: "configured" | "not-configured";
            /**
             * @description Runner type to be used.
             * @enum {string}
             */
            runner_type?: "standard" | "labeled";
            /**
             * @description Runner label to be used if the runner type is labeled.
             * @example code-scanning
             */
            runner_label?: string | null;
            /**
             * @description CodeQL query suite to be used.
             * @enum {string}
             */
            query_suite?: "default" | "extended";
            /**
             * @description Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
             * @enum {string}
             */
            threat_model?: "remote" | "remote_and_local";
            /** @description CodeQL languages to be analyzed. */
            languages?: ("actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "python" | "ruby" | "swift")[];
        };
        /** @description You can use `run_url` to track the status of the run. This includes a property status and conclusion.
         *     You should not rely on this always being an actions workflow run object. */
        "code-scanning-default-setup-update-response": {
            /** @description ID of the corresponding run. */
            run_id?: number;
            /** @description URL of the corresponding run. */
            run_url?: string;
        };
        /**
         * @description The full Git reference, formatted as `refs/heads/<branch name>`,
         *     `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
         * @example refs/heads/main
         */
        "code-scanning-ref-full": string;
        /** @description A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */
        "code-scanning-analysis-sarif-file": string;
        "code-scanning-sarifs-receipt": {
            id?: components["schemas"]["code-scanning-analysis-sarif-id"];
            /**
             * Format: uri
             * @description The REST API URL for checking the status of the upload.
             */
            readonly url?: string;
        };
        "code-scanning-sarifs-status": {
            /**
             * @description `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
             * @enum {string}
             */
            processing_status?: "pending" | "complete" | "failed";
            /**
             * Format: uri
             * @description The REST API URL for getting the analyses associated with the upload.
             */
            readonly analyses_url?: string | null;
            /** @description Any errors that ocurred during processing of the delivery. */
            readonly errors?: string[] | null;
        };
        /** @description Code security configuration associated with a repository and attachment status */
        "code-security-configuration-for-repository": {
            /**
             * @description The attachment status of the code security configuration on the repository.
             * @enum {string}
             */
            status?: "attached" | "attaching" | "detached" | "removed" | "enforced" | "failed" | "updating" | "removed_by_enterprise";
            configuration?: components["schemas"]["code-security-configuration"];
        };
        /**
         * CODEOWNERS errors
         * @description A list of errors found in a repo's CODEOWNERS file
         */
        "codeowners-errors": {
            errors: {
                /**
                 * @description The line number where this errors occurs.
                 * @example 7
                 */
                line: number;
                /**
                 * @description The column number where this errors occurs.
                 * @example 3
                 */
                column: number;
                /**
                 * @description The contents of the line where the error occurs.
                 * @example * user
                 */
                source?: string;
                /**
                 * @description The type of error.
                 * @example Invalid owner
                 */
                kind: string;
                /**
                 * @description Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
                 * @example The pattern `/` will never match anything, did you mean `*` instead?
                 */
                suggestion?: string | null;
                /**
                 * @description A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
                 * @example Invalid owner on line 7:
                 *
                 *       * user
                 *         ^
                 */
                message: string;
                /**
                 * @description The path of the file where the error occured.
                 * @example .github/CODEOWNERS
                 */
                path: string;
            }[];
        };
        /**
         * Codespace machine
         * @description A description of the machine powering a codespace.
         */
        "codespace-machine": {
            /**
             * @description The name of the machine.
             * @example standardLinux
             */
            name: string;
            /**
             * @description The display name of the machine includes cores, memory, and storage.
             * @example 4 cores, 16 GB RAM, 64 GB storage
             */
            display_name: string;
            /**
             * @description The operating system of the machine.
             * @example linux
             */
            operating_system: string;
            /**
             * @description How much storage is available to the codespace.
             * @example 68719476736
             */
            storage_in_bytes: number;
            /**
             * @description How much memory is available to the codespace.
             * @example 17179869184
             */
            memory_in_bytes: number;
            /**
             * @description How many cores are available to the codespace.
             * @example 4
             */
            cpus: number;
            /**
             * @description Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
             * @example ready
             * @enum {string|null}
             */
            prebuild_availability: "none" | "ready" | "in_progress" | null;
        };
        /**
         * Codespaces Permissions Check
         * @description Permission check result for a given devcontainer config.
         */
        "codespaces-permissions-check-for-devcontainer": {
            /**
             * @description Whether the user has accepted the permissions defined by the devcontainer config
             * @example true
             */
            accepted: boolean;
        };
        /**
         * Codespaces Secret
         * @description Set repository secrets for GitHub Codespaces.
         */
        "repo-codespaces-secret": {
            /**
             * @description The name of the secret.
             * @example SECRET_TOKEN
             */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Collaborator
         * @description Collaborator
         */
        collaborator: {
            /** @example octocat */
            login: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            email?: string | null;
            name?: string | null;
            /** @example MDQ6VXNlcjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /** @example 41d064eb2195891e12d0413f63227ea7 */
            gravatar_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/followers
             */
            followers_url: string;
            /** @example https://api.github.com/users/octocat/following{/other_user} */
            following_url: string;
            /** @example https://api.github.com/users/octocat/gists{/gist_id} */
            gists_url: string;
            /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
            starred_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/orgs
             */
            organizations_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repos_url: string;
            /** @example https://api.github.com/users/octocat/events{/privacy} */
            events_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/received_events
             */
            received_events_url: string;
            /** @example User */
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
            /** @example admin */
            role_name: string;
            /** @example public */
            user_view_type?: string;
        };
        /**
         * Repository Invitation
         * @description Repository invitations let you manage who you collaborate with.
         */
        "repository-invitation": {
            /**
             * Format: int64
             * @description Unique identifier of the repository invitation.
             * @example 42
             */
            id: number;
            repository: components["schemas"]["minimal-repository"];
            invitee: components["schemas"]["nullable-simple-user"];
            inviter: components["schemas"]["nullable-simple-user"];
            /**
             * @description The permission associated with the invitation.
             * @example read
             * @enum {string}
             */
            permissions: "read" | "write" | "admin" | "triage" | "maintain";
            /**
             * Format: date-time
             * @example 2016-06-13T14:52:50-05:00
             */
            created_at: string;
            /** @description Whether or not the invitation has expired */
            expired?: boolean;
            /**
             * @description URL for the repository invitation
             * @example https://api.github.com/user/repository-invitations/1
             */
            url: string;
            /** @example https://github.com/octocat/Hello-World/invitations */
            html_url: string;
            node_id: string;
        };
        /**
         * Collaborator
         * @description Collaborator
         */
        "nullable-collaborator": {
            /** @example octocat */
            login: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            email?: string | null;
            name?: string | null;
            /** @example MDQ6VXNlcjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /** @example 41d064eb2195891e12d0413f63227ea7 */
            gravatar_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/followers
             */
            followers_url: string;
            /** @example https://api.github.com/users/octocat/following{/other_user} */
            following_url: string;
            /** @example https://api.github.com/users/octocat/gists{/gist_id} */
            gists_url: string;
            /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
            starred_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/orgs
             */
            organizations_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repos_url: string;
            /** @example https://api.github.com/users/octocat/events{/privacy} */
            events_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/received_events
             */
            received_events_url: string;
            /** @example User */
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
            /** @example admin */
            role_name: string;
            /** @example public */
            user_view_type?: string;
        } | null;
        /**
         * Repository Collaborator Permission
         * @description Repository Collaborator Permission
         */
        "repository-collaborator-permission": {
            permission: string;
            /** @example admin */
            role_name: string;
            user: components["schemas"]["nullable-collaborator"];
        };
        /**
         * Commit Comment
         * @description Commit Comment
         */
        "commit-comment": {
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            url: string;
            id: number;
            node_id: string;
            body: string;
            path: string | null;
            position: number | null;
            line: number | null;
            commit_id: string;
            user: components["schemas"]["nullable-simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            author_association: components["schemas"]["author-association"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Branch Short
         * @description Branch Short
         */
        "branch-short": {
            name: string;
            commit: {
                sha: string;
                url: string;
            };
            protected: boolean;
        };
        /**
         * Link
         * @description Hypermedia Link
         */
        link: {
            href: string;
        };
        /**
         * Auto merge
         * @description The status of auto merging a pull request.
         */
        "auto-merge": {
            enabled_by: components["schemas"]["simple-user"];
            /**
             * @description The merge method to use.
             * @enum {string}
             */
            merge_method: "merge" | "squash" | "rebase";
            /** @description Title for the merge commit message. */
            commit_title: string;
            /** @description Commit message for the merge commit. */
            commit_message: string;
        } | null;
        /**
         * Pull Request Simple
         * @description Pull Request Simple
         */
        "pull-request-simple": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
             */
            url: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example MDExOlB1bGxSZXF1ZXN0MQ== */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1347
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1347.diff
             */
            diff_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1347.patch
             */
            patch_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
             */
            issue_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
             */
            commits_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
             */
            review_comments_url: string;
            /** @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number} */
            review_comment_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
             */
            comments_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            statuses_url: string;
            /** @example 1347 */
            number: number;
            /** @example open */
            state: string;
            /** @example true */
            locked: boolean;
            /** @example new-feature */
            title: string;
            user: components["schemas"]["nullable-simple-user"];
            /** @example Please pull these awesome changes */
            body: string | null;
            labels: {
                /** Format: int64 */
                id: number;
                node_id: string;
                url: string;
                name: string;
                description: string;
                color: string;
                default: boolean;
            }[];
            milestone: components["schemas"]["nullable-milestone"];
            /** @example too heated */
            active_lock_reason?: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            closed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            merged_at: string | null;
            /** @example e5bd3914e2e596debea16f433f57875b5b90bcd6 */
            merge_commit_sha: string | null;
            assignee: components["schemas"]["nullable-simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            requested_reviewers?: components["schemas"]["simple-user"][] | null;
            requested_teams?: components["schemas"]["team"][] | null;
            head: {
                label: string;
                ref: string;
                repo: components["schemas"]["repository"];
                sha: string;
                user: components["schemas"]["nullable-simple-user"];
            };
            base: {
                label: string;
                ref: string;
                repo: components["schemas"]["repository"];
                sha: string;
                user: components["schemas"]["nullable-simple-user"];
            };
            _links: {
                comments: components["schemas"]["link"];
                commits: components["schemas"]["link"];
                statuses: components["schemas"]["link"];
                html: components["schemas"]["link"];
                issue: components["schemas"]["link"];
                review_comments: components["schemas"]["link"];
                review_comment: components["schemas"]["link"];
                self: components["schemas"]["link"];
            };
            author_association: components["schemas"]["author-association"];
            auto_merge: components["schemas"]["auto-merge"];
            /**
             * @description Indicates whether or not the pull request is a draft.
             * @example false
             */
            draft?: boolean;
        };
        /** Simple Commit Status */
        "simple-commit-status": {
            description: string | null;
            id: number;
            node_id: string;
            state: string;
            context: string;
            /** Format: uri */
            target_url: string | null;
            required?: boolean | null;
            /** Format: uri */
            avatar_url: string | null;
            /** Format: uri */
            url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Combined Commit Status
         * @description Combined Commit Status
         */
        "combined-commit-status": {
            state: string;
            statuses: components["schemas"]["simple-commit-status"][];
            sha: string;
            total_count: number;
            repository: components["schemas"]["minimal-repository"];
            /** Format: uri */
            commit_url: string;
            /** Format: uri */
            url: string;
        };
        /**
         * Status
         * @description The status of a commit.
         */
        status: {
            url: string;
            avatar_url: string | null;
            id: number;
            node_id: string;
            state: string;
            description: string | null;
            target_url: string | null;
            context: string;
            created_at: string;
            updated_at: string;
            creator: components["schemas"]["nullable-simple-user"];
        };
        /**
         * Code Of Conduct Simple
         * @description Code of Conduct Simple
         */
        "nullable-code-of-conduct-simple": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/github/docs/community/code_of_conduct
             */
            url: string;
            /** @example citizen_code_of_conduct */
            key: string;
            /** @example Citizen Code of Conduct */
            name: string;
            /**
             * Format: uri
             * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
             */
            html_url: string | null;
        } | null;
        /** Community Health File */
        "nullable-community-health-file": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
        } | null;
        /**
         * Community Profile
         * @description Community Profile
         */
        "community-profile": {
            /** @example 100 */
            health_percentage: number;
            /** @example My first repository on GitHub! */
            description: string | null;
            /** @example example.com */
            documentation: string | null;
            files: {
                code_of_conduct: components["schemas"]["nullable-code-of-conduct-simple"];
                code_of_conduct_file: components["schemas"]["nullable-community-health-file"];
                license: components["schemas"]["nullable-license-simple"];
                contributing: components["schemas"]["nullable-community-health-file"];
                readme: components["schemas"]["nullable-community-health-file"];
                issue_template: components["schemas"]["nullable-community-health-file"];
                pull_request_template: components["schemas"]["nullable-community-health-file"];
            };
            /**
             * Format: date-time
             * @example 2017-02-28T19:09:29Z
             */
            updated_at: string | null;
            /** @example true */
            content_reports_enabled?: boolean;
        };
        /**
         * Commit Comparison
         * @description Commit Comparison
         */
        "commit-comparison": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/compare/master...topic
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/compare/master...topic
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
             */
            permalink_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/compare/master...topic.diff
             */
            diff_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/compare/master...topic.patch
             */
            patch_url: string;
            base_commit: components["schemas"]["commit"];
            merge_base_commit: components["schemas"]["commit"];
            /**
             * @example ahead
             * @enum {string}
             */
            status: "diverged" | "ahead" | "behind" | "identical";
            /** @example 4 */
            ahead_by: number;
            /** @example 5 */
            behind_by: number;
            /** @example 6 */
            total_commits: number;
            commits: components["schemas"]["commit"][];
            files?: components["schemas"]["diff-entry"][];
        };
        /**
         * Content Tree
         * @description Content Tree
         */
        "content-tree": {
            type: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            content?: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            entries?: {
                type: string;
                size: number;
                name: string;
                path: string;
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                git_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                download_url: string | null;
                _links: {
                    /** Format: uri */
                    git: string | null;
                    /** Format: uri */
                    html: string | null;
                    /** Format: uri */
                    self: string;
                };
            }[];
            encoding?: string;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        };
        /**
         * Content Directory
         * @description A list of directory items
         */
        "content-directory": {
            /** @enum {string} */
            type: "dir" | "file" | "submodule" | "symlink";
            size: number;
            name: string;
            path: string;
            content?: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        }[];
        /**
         * Content File
         * @description Content File
         */
        "content-file": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
            encoding: string;
            size: number;
            name: string;
            path: string;
            content: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
            /** @example "actual/actual.md" */
            target?: string;
            /** @example "git://example.com/defunkt/dotjs.git" */
            submodule_git_url?: string;
        };
        /**
         * Symlink Content
         * @description An object describing a symlink
         */
        "content-symlink": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "symlink";
            target: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        };
        /**
         * Submodule Content
         * @description An object describing a submodule
         */
        "content-submodule": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "submodule";
            /** Format: uri */
            submodule_git_url: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        };
        /**
         * File Commit
         * @description File Commit
         */
        "file-commit": {
            content: {
                name?: string;
                path?: string;
                sha?: string;
                size?: number;
                url?: string;
                html_url?: string;
                git_url?: string;
                download_url?: string;
                type?: string;
                _links?: {
                    self?: string;
                    git?: string;
                    html?: string;
                };
            } | null;
            commit: {
                sha?: string;
                node_id?: string;
                url?: string;
                html_url?: string;
                author?: {
                    date?: string;
                    name?: string;
                    email?: string;
                };
                committer?: {
                    date?: string;
                    name?: string;
                    email?: string;
                };
                message?: string;
                tree?: {
                    url?: string;
                    sha?: string;
                };
                parents?: {
                    url?: string;
                    html_url?: string;
                    sha?: string;
                }[];
                verification?: {
                    verified?: boolean;
                    reason?: string;
                    signature?: string | null;
                    payload?: string | null;
                    verified_at?: string | null;
                };
            };
        };
        /** @description The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
        "secret-scanning-push-protection-bypass-placeholder-id": string;
        /** @description Repository rule violation was detected */
        "repository-rule-violation-error": {
            message?: string;
            documentation_url?: string;
            status?: string;
            metadata?: {
                secret_scanning?: {
                    bypass_placeholders?: {
                        placeholder_id?: components["schemas"]["secret-scanning-push-protection-bypass-placeholder-id"];
                        token_type?: string;
                    }[];
                };
            };
        };
        /**
         * Contributor
         * @description Contributor
         */
        contributor: {
            login?: string;
            id?: number;
            node_id?: string;
            /** Format: uri */
            avatar_url?: string;
            gravatar_id?: string | null;
            /** Format: uri */
            url?: string;
            /** Format: uri */
            html_url?: string;
            /** Format: uri */
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            repos_url?: string;
            events_url?: string;
            /** Format: uri */
            received_events_url?: string;
            type: string;
            site_admin?: boolean;
            contributions: number;
            email?: string;
            name?: string;
            user_view_type?: string;
        };
        /** @description A Dependabot alert. */
        "dependabot-alert": {
            number: components["schemas"]["alert-number"];
            /**
             * @description The state of the Dependabot alert.
             * @enum {string}
             */
            readonly state: "auto_dismissed" | "dismissed" | "fixed" | "open";
            /** @description Details for the vulnerable dependency. */
            readonly dependency: {
                package?: components["schemas"]["dependabot-alert-package"];
                /** @description The full path to the dependency manifest file, relative to the root of the repository. */
                readonly manifest_path?: string;
                /**
                 * @description The execution scope of the vulnerable dependency.
                 * @enum {string|null}
                 */
                readonly scope?: "development" | "runtime" | null;
                /**
                 * @description The vulnerable dependency's relationship to your project.
                 *
                 *     > [!NOTE]
                 *     > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
                 *
                 * @enum {string|null}
                 */
                readonly relationship?: "unknown" | "direct" | "transitive" | null;
            };
            security_advisory: components["schemas"]["dependabot-alert-security-advisory"];
            security_vulnerability: components["schemas"]["dependabot-alert-security-vulnerability"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            created_at: components["schemas"]["alert-created-at"];
            updated_at: components["schemas"]["alert-updated-at"];
            dismissed_at: components["schemas"]["alert-dismissed-at"];
            dismissed_by: components["schemas"]["nullable-simple-user"];
            /**
             * @description The reason that the alert was dismissed.
             * @enum {string|null}
             */
            dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | null;
            /** @description An optional comment associated with the alert's dismissal. */
            dismissed_comment: string | null;
            fixed_at: components["schemas"]["alert-fixed-at"];
            auto_dismissed_at?: components["schemas"]["alert-auto-dismissed-at"];
        };
        /**
         * Dependabot Secret
         * @description Set secrets for Dependabot.
         */
        "dependabot-secret": {
            /**
             * @description The name of the secret.
             * @example MY_ARTIFACTORY_PASSWORD
             */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Dependency Graph Diff
         * @description A diff of the dependencies between two commits.
         */
        "dependency-graph-diff": {
            /** @enum {string} */
            change_type: "added" | "removed";
            /** @example path/to/package-lock.json */
            manifest: string;
            /** @example npm */
            ecosystem: string;
            /** @example @actions/core */
            name: string;
            /** @example 1.0.0 */
            version: string;
            /** @example pkg:/npm/%40actions/core@1.1.0 */
            package_url: string | null;
            /** @example MIT */
            license: string | null;
            /** @example https://github.com/github/actions */
            source_repository_url: string | null;
            vulnerabilities: {
                /** @example critical */
                severity: string;
                /** @example GHSA-rf4j-j272-fj86 */
                advisory_ghsa_id: string;
                /** @example A summary of the advisory. */
                advisory_summary: string;
                /** @example https://github.com/advisories/GHSA-rf4j-j272-fj86 */
                advisory_url: string;
            }[];
            /**
             * @description Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
             * @enum {string}
             */
            scope: "unknown" | "runtime" | "development";
        }[];
        /**
         * Dependency Graph SPDX SBOM
         * @description A schema for the SPDX JSON format returned by the Dependency Graph.
         */
        "dependency-graph-spdx-sbom": {
            sbom: {
                /**
                 * @description The SPDX identifier for the SPDX document.
                 * @example SPDXRef-DOCUMENT
                 */
                SPDXID: string;
                /**
                 * @description The version of the SPDX specification that this document conforms to.
                 * @example SPDX-2.3
                 */
                spdxVersion: string;
                /**
                 * @description An optional comment about the SPDX document.
                 * @example Exact versions could not be resolved for some packages. For more information: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/
                 */
                comment?: string;
                creationInfo: {
                    /**
                     * @description The date and time the SPDX document was created.
                     * @example 2021-11-03T00:00:00Z
                     */
                    created: string;
                    /** @description The tools that were used to generate the SPDX document. */
                    creators: string[];
                };
                /**
                 * @description The name of the SPDX document.
                 * @example github/github
                 */
                name: string;
                /**
                 * @description The license under which the SPDX document is licensed.
                 * @example CC0-1.0
                 */
                dataLicense: string;
                /**
                 * @description The namespace for the SPDX document.
                 * @example https://spdx.org/spdxdocs/protobom/15e41dd2-f961-4f4d-b8dc-f8f57ad70d57
                 */
                documentNamespace: string;
                packages: {
                    /**
                     * @description A unique SPDX identifier for the package.
                     * @example SPDXRef-Package
                     */
                    SPDXID?: string;
                    /**
                     * @description The name of the package.
                     * @example github/github
                     */
                    name?: string;
                    /**
                     * @description The version of the package. If the package does not have an exact version specified,
                     *     a version range is given.
                     * @example 1.0.0
                     */
                    versionInfo?: string;
                    /**
                     * @description The location where the package can be downloaded,
                     *     or NOASSERTION if this has not been determined.
                     * @example NOASSERTION
                     */
                    downloadLocation?: string;
                    /**
                     * @description Whether the package's file content has been subjected to
                     *     analysis during the creation of the SPDX document.
                     * @example false
                     */
                    filesAnalyzed?: boolean;
                    /**
                     * @description The license of the package as determined while creating the SPDX document.
                     * @example MIT
                     */
                    licenseConcluded?: string;
                    /**
                     * @description The license of the package as declared by its author, or NOASSERTION if this information
                     *     was not available when the SPDX document was created.
                     * @example NOASSERTION
                     */
                    licenseDeclared?: string;
                    /**
                     * @description The distribution source of this package, or NOASSERTION if this was not determined.
                     * @example NOASSERTION
                     */
                    supplier?: string;
                    /**
                     * @description The copyright holders of the package, and any dates present with those notices, if available.
                     * @example Copyright (c) 1985 GitHub.com
                     */
                    copyrightText?: string;
                    externalRefs?: {
                        /**
                         * @description The category of reference to an external resource this reference refers to.
                         * @example PACKAGE-MANAGER
                         */
                        referenceCategory: string;
                        /**
                         * @description A locator for the particular external resource this reference refers to.
                         * @example pkg:gem/rails@6.0.1
                         */
                        referenceLocator: string;
                        /**
                         * @description The category of reference to an external resource this reference refers to.
                         * @example purl
                         */
                        referenceType: string;
                    }[];
                }[];
                relationships?: {
                    /**
                     * @description The type of relationship between the two SPDX elements.
                     * @example DEPENDS_ON
                     */
                    relationshipType?: string;
                    /** @description The SPDX identifier of the package that is the source of the relationship. */
                    spdxElementId?: string;
                    /** @description The SPDX identifier of the package that is the target of the relationship. */
                    relatedSpdxElement?: string;
                }[];
            };
        };
        /**
         * metadata
         * @description User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
         */
        metadata: {
            [key: string]: (string | number | boolean) | null;
        };
        dependency: {
            /**
             * @description Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
             * @example pkg:/npm/%40actions/http-client@1.0.11
             */
            package_url?: string;
            metadata?: components["schemas"]["metadata"];
            /**
             * @description A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
             * @example direct
             * @enum {string}
             */
            relationship?: "direct" | "indirect";
            /**
             * @description A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
             * @example runtime
             * @enum {string}
             */
            scope?: "runtime" | "development";
            /**
             * @description Array of package-url (PURLs) of direct child dependencies.
             * @example @actions/http-client
             */
            dependencies?: string[];
        };
        manifest: {
            /**
             * @description The name of the manifest.
             * @example package-lock.json
             */
            name: string;
            file?: {
                /**
                 * @description The path of the manifest file relative to the root of the Git repository.
                 * @example /src/build/package-lock.json
                 */
                source_location?: string;
            };
            metadata?: components["schemas"]["metadata"];
            /** @description A collection of resolved package dependencies. */
            resolved?: {
                [key: string]: components["schemas"]["dependency"];
            };
        };
        /**
         * snapshot
         * @description Create a new snapshot of a repository's dependencies.
         */
        snapshot: {
            /** @description The version of the repository snapshot submission. */
            version: number;
            job: {
                /**
                 * @description The external ID of the job.
                 * @example 5622a2b0-63f6-4732-8c34-a1ab27e102a11
                 */
                id: string;
                /**
                 * @description Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
                 * @example yourworkflowname_yourjobname
                 */
                correlator: string;
                /**
                 * @description The url for the job.
                 * @example http://example.com/build
                 */
                html_url?: string;
            };
            /**
             * @description The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
             * @example ddc951f4b1293222421f2c8df679786153acf689
             */
            sha: string;
            /**
             * @description The repository branch that triggered this snapshot.
             * @example refs/heads/main
             */
            ref: string;
            /** @description A description of the detector used. */
            detector: {
                /**
                 * @description The name of the detector used.
                 * @example docker buildtime detector
                 */
                name: string;
                /**
                 * @description The version of the detector used.
                 * @example 1.0.0
                 */
                version: string;
                /**
                 * @description The url of the detector used.
                 * @example http://example.com/docker-buildtimer-detector
                 */
                url: string;
            };
            metadata?: components["schemas"]["metadata"];
            /** @description A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies. */
            manifests?: {
                [key: string]: components["schemas"]["manifest"];
            };
            /**
             * Format: date-time
             * @description The time at which the snapshot was scanned.
             * @example 2020-06-13T14:52:50-05:00
             */
            scanned: string;
        };
        /**
         * Deployment Status
         * @description The status of a deployment.
         */
        "deployment-status": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1
             */
            url: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example MDE2OkRlcGxveW1lbnRTdGF0dXMx */
            node_id: string;
            /**
             * @description The state of the status.
             * @example success
             * @enum {string}
             */
            state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
            creator: components["schemas"]["nullable-simple-user"];
            /**
             * @description A short description of the status.
             * @default
             * @example Deployment finished successfully.
             */
            description: string;
            /**
             * @description The environment of the deployment that the status is for.
             * @default
             * @example production
             */
            environment: string;
            /**
             * Format: uri
             * @description Closing down notice: the URL to associate with this status.
             * @default
             * @example https://example.com/deployment/42/output
             */
            target_url: string;
            /**
             * Format: date-time
             * @example 2012-07-20T01:19:13Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2012-07-20T01:19:13Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/deployments/42
             */
            deployment_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example
             */
            repository_url: string;
            /**
             * Format: uri
             * @description The URL for accessing your environment.
             * @default
             * @example https://staging.example.com/
             */
            environment_url: string;
            /**
             * Format: uri
             * @description The URL to associate with this status.
             * @default
             * @example https://example.com/deployment/42/output
             */
            log_url: string;
            performed_via_github_app?: components["schemas"]["nullable-integration"];
        };
        /**
         * @description The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
         * @example 30
         */
        "wait-timer": number;
        /** @description The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
        "deployment-branch-policy-settings": {
            /** @description Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
            protected_branches: boolean;
            /** @description Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
            custom_branch_policies: boolean;
        } | null;
        /**
         * Environment
         * @description Details of a deployment environment
         */
        environment: {
            /**
             * Format: int64
             * @description The id of the environment.
             * @example 56780428
             */
            id: number;
            /** @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg= */
            node_id: string;
            /**
             * @description The name of the environment.
             * @example staging
             */
            name: string;
            /** @example https://api.github.com/repos/github/hello-world/environments/staging */
            url: string;
            /** @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging */
            html_url: string;
            /**
             * Format: date-time
             * @description The time that the environment was created, in ISO 8601 format.
             * @example 2020-11-23T22:00:40Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The time that the environment was last updated, in ISO 8601 format.
             * @example 2020-11-23T22:00:40Z
             */
            updated_at: string;
            /** @description Built-in deployment protection rules for the environment. */
            protection_rules?: ({
                /** @example 3515 */
                id: number;
                /** @example MDQ6R2F0ZTM1MTU= */
                node_id: string;
                /** @example wait_timer */
                type: string;
                wait_timer?: components["schemas"]["wait-timer"];
            } | {
                /** @example 3755 */
                id: number;
                /** @example MDQ6R2F0ZTM3NTU= */
                node_id: string;
                /**
                 * @description Whether deployments to this environment can be approved by the user who created the deployment.
                 * @example false
                 */
                prevent_self_review?: boolean;
                /** @example required_reviewers */
                type: string;
                /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
                reviewers?: {
                    type?: components["schemas"]["deployment-reviewer-type"];
                    reviewer?: components["schemas"]["simple-user"] | components["schemas"]["team"];
                }[];
            } | {
                /** @example 3515 */
                id: number;
                /** @example MDQ6R2F0ZTM1MTU= */
                node_id: string;
                /** @example branch_policy */
                type: string;
            })[];
            deployment_branch_policy?: components["schemas"]["deployment-branch-policy-settings"];
        };
        /**
         * @description Whether or not a user who created the job is prevented from approving their own job.
         * @example false
         */
        "prevent-self-review": boolean;
        /**
         * Deployment branch policy
         * @description Details of a deployment branch or tag policy.
         */
        "deployment-branch-policy": {
            /**
             * @description The unique identifier of the branch or tag policy.
             * @example 361471
             */
            id?: number;
            /** @example MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE= */
            node_id?: string;
            /**
             * @description The name pattern that branches or tags must match in order to deploy to the environment.
             * @example release/*
             */
            name?: string;
            /**
             * @description Whether this rule targets a branch or tag.
             * @example branch
             * @enum {string}
             */
            type?: "branch" | "tag";
        };
        /** Deployment branch and tag policy name pattern */
        "deployment-branch-policy-name-pattern-with-type": {
            /**
             * @description The name pattern that branches or tags must match in order to deploy to the environment.
             *
             *     Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
             *     For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
             * @example release/*
             */
            name: string;
            /**
             * @description Whether this rule targets a branch or tag
             * @example branch
             * @enum {string}
             */
            type?: "branch" | "tag";
        };
        /** Deployment branch policy name pattern */
        "deployment-branch-policy-name-pattern": {
            /**
             * @description The name pattern that branches must match in order to deploy to the environment.
             *
             *     Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
             *     For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
             * @example release/*
             */
            name: string;
        };
        /**
         * Custom deployment protection rule app
         * @description A GitHub App that is providing a custom deployment protection rule.
         */
        "custom-deployment-rule-app": {
            /**
             * @description The unique identifier of the deployment protection rule integration.
             * @example 3515
             */
            id: number;
            /**
             * @description The slugified name of the deployment protection rule integration.
             * @example my-custom-app
             */
            slug: string;
            /**
             * @description The URL for the endpoint to get details about the app.
             * @example https://api.github.com/apps/custom-app-slug
             */
            integration_url: string;
            /**
             * @description The node ID for the deployment protection rule integration.
             * @example MDQ6R2F0ZTM1MTU=
             */
            node_id: string;
        };
        /**
         * Deployment protection rule
         * @description Deployment protection rule
         */
        "deployment-protection-rule": {
            /**
             * @description The unique identifier for the deployment protection rule.
             * @example 3515
             */
            id: number;
            /**
             * @description The node ID for the deployment protection rule.
             * @example MDQ6R2F0ZTM1MTU=
             */
            node_id: string;
            /**
             * @description Whether the deployment protection rule is enabled for the environment.
             * @example true
             */
            enabled: boolean;
            app: components["schemas"]["custom-deployment-rule-app"];
        };
        /**
         * Short Blob
         * @description Short Blob
         */
        "short-blob": {
            url: string;
            sha: string;
        };
        /**
         * Blob
         * @description Blob
         */
        blob: {
            content: string;
            encoding: string;
            /** Format: uri */
            url: string;
            sha: string;
            size: number | null;
            node_id: string;
            highlighted_content?: string;
        };
        /**
         * Git Commit
         * @description Low-level Git commit operations within a repository
         */
        "git-commit": {
            /**
             * @description SHA for the commit
             * @example 7638417db6d59f3c431d3e1f261cc637155684cd
             */
            sha: string;
            node_id: string;
            /** Format: uri */
            url: string;
            /** @description Identifying information for the git-user */
            author: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 * @example 2014-08-09T08:02:04+12:00
                 */
                date: string;
                /**
                 * @description Git email address of the user
                 * @example monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * @description Name of the git user
                 * @example Monalisa Octocat
                 */
                name: string;
            };
            /** @description Identifying information for the git-user */
            committer: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 * @example 2014-08-09T08:02:04+12:00
                 */
                date: string;
                /**
                 * @description Git email address of the user
                 * @example monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * @description Name of the git user
                 * @example Monalisa Octocat
                 */
                name: string;
            };
            /**
             * @description Message describing the purpose of the commit
             * @example Fix #42
             */
            message: string;
            tree: {
                /**
                 * @description SHA for the commit
                 * @example 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                /** Format: uri */
                url: string;
            };
            parents: {
                /**
                 * @description SHA for the commit
                 * @example 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                html_url: string;
            }[];
            verification: {
                verified: boolean;
                reason: string;
                signature: string | null;
                payload: string | null;
                verified_at: string | null;
            };
            /** Format: uri */
            html_url: string;
        };
        /**
         * Git Reference
         * @description Git references within a repository
         */
        "git-ref": {
            ref: string;
            node_id: string;
            /** Format: uri */
            url: string;
            object: {
                type: string;
                /**
                 * @description SHA for the reference
                 * @example 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                /** Format: uri */
                url: string;
            };
        };
        /**
         * Git Tag
         * @description Metadata for a Git tag
         */
        "git-tag": {
            /** @example MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw== */
            node_id: string;
            /**
             * @description Name of the tag
             * @example v0.0.1
             */
            tag: string;
            /** @example 940bd336248efae0f9ee5bc7b2d5c985887b16ac */
            sha: string;
            /**
             * Format: uri
             * @description URL for the tag
             * @example https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
             */
            url: string;
            /**
             * @description Message describing the purpose of the tag
             * @example Initial public release
             */
            message: string;
            tagger: {
                date: string;
                email: string;
                name: string;
            };
            object: {
                sha: string;
                type: string;
                /** Format: uri */
                url: string;
            };
            verification?: components["schemas"]["verification"];
        };
        /**
         * Git Tree
         * @description The hierarchy between files in a Git repository.
         */
        "git-tree": {
            sha: string;
            /** Format: uri */
            url?: string;
            truncated: boolean;
            /**
             * @description Objects specifying a tree structure
             * @example [
             *       {
             *         "path": "file.rb",
             *         "mode": "100644",
             *         "type": "blob",
             *         "size": 30,
             *         "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
             *         "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"
             *       }
             *     ]
             */
            tree: {
                /** @example test/file.rb */
                path: string;
                /** @example 040000 */
                mode: string;
                /** @example tree */
                type: string;
                /** @example 23f6827669e43831def8a7ad935069c8bd418261 */
                sha: string;
                /** @example 12 */
                size?: number;
                /** @example https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261 */
                url?: string;
            }[];
        };
        /** Hook Response */
        "hook-response": {
            code: number | null;
            status: string | null;
            message: string | null;
        };
        /**
         * Webhook
         * @description Webhooks for repositories.
         */
        hook: {
            type: string;
            /**
             * @description Unique identifier of the webhook.
             * @example 42
             */
            id: number;
            /**
             * @description The name of a valid service, use 'web' for a webhook.
             * @example web
             */
            name: string;
            /**
             * @description Determines whether the hook is actually triggered on pushes.
             * @example true
             */
            active: boolean;
            /**
             * @description Determines what events the hook is triggered for. Default: ['push'].
             * @example [
             *       "push",
             *       "pull_request"
             *     ]
             */
            events: string[];
            config: components["schemas"]["webhook-config"];
            /**
             * Format: date-time
             * @example 2011-09-06T20:39:23Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2011-09-06T17:26:27Z
             */
            created_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/hooks/1
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/test
             */
            test_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
             */
            ping_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries
             */
            deliveries_url?: string;
            last_response: components["schemas"]["hook-response"];
        };
        /**
         * Import
         * @description A repository import from an external source.
         */
        import: {
            vcs: string | null;
            use_lfs?: boolean;
            /** @description The URL of the originating repository. */
            vcs_url: string;
            svc_root?: string;
            tfvc_project?: string;
            /** @enum {string} */
            status: "auth" | "error" | "none" | "detecting" | "choose" | "auth_failed" | "importing" | "mapping" | "waiting_to_push" | "pushing" | "complete" | "setup" | "unknown" | "detection_found_multiple" | "detection_found_nothing" | "detection_needs_auth";
            status_text?: string | null;
            failed_step?: string | null;
            error_message?: string | null;
            import_percent?: number | null;
            commit_count?: number | null;
            push_percent?: number | null;
            has_large_files?: boolean;
            large_files_size?: number;
            large_files_count?: number;
            project_choices?: {
                vcs?: string;
                tfvc_project?: string;
                human_name?: string;
            }[];
            message?: string;
            authors_count?: number | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            authors_url: string;
            /** Format: uri */
            repository_url: string;
            svn_root?: string;
        };
        /**
         * Porter Author
         * @description Porter Author
         */
        "porter-author": {
            id: number;
            remote_id: string;
            remote_name: string;
            email: string;
            name: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            import_url: string;
        };
        /**
         * Porter Large File
         * @description Porter Large File
         */
        "porter-large-file": {
            ref_name: string;
            path: string;
            oid: string;
            size: number;
        };
        /**
         * Issue
         * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
         */
        "nullable-issue": {
            /** Format: int64 */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue
             * @example https://api.github.com/repositories/42/issues/1
             */
            url: string;
            /** Format: uri */
            repository_url: string;
            labels_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            /**
             * @description Number uniquely identifying the issue within its repository
             * @example 42
             */
            number: number;
            /**
             * @description State of the issue; either 'open' or 'closed'
             * @example open
             */
            state: string;
            /**
             * @description The reason for the current state
             * @example not_planned
             * @enum {string|null}
             */
            state_reason?: "completed" | "reopened" | "not_planned" | "duplicate" | null;
            /**
             * @description Title of the issue
             * @example Widget creation fails in Safari on OS X 10.8
             */
            title: string;
            /**
             * @description Contents of the issue
             * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
             */
            body?: string | null;
            user: components["schemas"]["nullable-simple-user"];
            /**
             * @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
             * @example [
             *       "bug",
             *       "registration"
             *     ]
             */
            labels: (string | {
                /** Format: int64 */
                id?: number;
                node_id?: string;
                /** Format: uri */
                url?: string;
                name?: string;
                description?: string | null;
                color?: string | null;
                default?: boolean;
            })[];
            assignee: components["schemas"]["nullable-simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            milestone: components["schemas"]["nullable-milestone"];
            locked: boolean;
            active_lock_reason?: string | null;
            comments: number;
            pull_request?: {
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                diff_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                patch_url: string | null;
                /** Format: uri */
                url: string | null;
            };
            /** Format: date-time */
            closed_at: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            draft?: boolean;
            closed_by?: components["schemas"]["nullable-simple-user"];
            body_html?: string;
            body_text?: string;
            /** Format: uri */
            timeline_url?: string;
            type?: components["schemas"]["issue-type"];
            repository?: components["schemas"]["repository"];
            performed_via_github_app?: components["schemas"]["nullable-integration"];
            author_association: components["schemas"]["author-association"];
            reactions?: components["schemas"]["reaction-rollup"];
            sub_issues_summary?: components["schemas"]["sub-issues-summary"];
        } | null;
        /**
         * Issue Event Label
         * @description Issue Event Label
         */
        "issue-event-label": {
            name: string | null;
            color: string | null;
        };
        /** Issue Event Dismissed Review */
        "issue-event-dismissed-review": {
            state: string;
            review_id: number;
            dismissal_message: string | null;
            dismissal_commit_id?: string | null;
        };
        /**
         * Issue Event Milestone
         * @description Issue Event Milestone
         */
        "issue-event-milestone": {
            title: string;
        };
        /**
         * Issue Event Project Card
         * @description Issue Event Project Card
         */
        "issue-event-project-card": {
            /** Format: uri */
            url: string;
            id: number;
            /** Format: uri */
            project_url: string;
            project_id: number;
            column_name: string;
            previous_column_name?: string;
        };
        /**
         * Issue Event Rename
         * @description Issue Event Rename
         */
        "issue-event-rename": {
            from: string;
            to: string;
        };
        /**
         * Issue Event
         * @description Issue Event
         */
        "issue-event": {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example MDEwOklzc3VlRXZlbnQx */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/issues/events/1
             */
            url: string;
            actor: components["schemas"]["nullable-simple-user"];
            /** @example closed */
            event: string;
            /** @example 6dcb09b5b57875f334f61aebed695e2e4193db5e */
            commit_id: string | null;
            /** @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e */
            commit_url: string | null;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            created_at: string;
            issue?: components["schemas"]["nullable-issue"];
            label?: components["schemas"]["issue-event-label"];
            assignee?: components["schemas"]["nullable-simple-user"];
            assigner?: components["schemas"]["nullable-simple-user"];
            review_requester?: components["schemas"]["nullable-simple-user"];
            requested_reviewer?: components["schemas"]["nullable-simple-user"];
            requested_team?: components["schemas"]["team"];
            dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
            milestone?: components["schemas"]["issue-event-milestone"];
            project_card?: components["schemas"]["issue-event-project-card"];
            rename?: components["schemas"]["issue-event-rename"];
            author_association?: components["schemas"]["author-association"];
            lock_reason?: string | null;
            performed_via_github_app?: components["schemas"]["nullable-integration"];
        };
        /**
         * Labeled Issue Event
         * @description Labeled Issue Event
         */
        "labeled-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            label: {
                name: string;
                color: string;
            };
        };
        /**
         * Unlabeled Issue Event
         * @description Unlabeled Issue Event
         */
        "unlabeled-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            label: {
                name: string;
                color: string;
            };
        };
        /**
         * Assigned Issue Event
         * @description Assigned Issue Event
         */
        "assigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["integration"];
            assignee: components["schemas"]["simple-user"];
            assigner: components["schemas"]["simple-user"];
        };
        /**
         * Unassigned Issue Event
         * @description Unassigned Issue Event
         */
        "unassigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            assignee: components["schemas"]["simple-user"];
            assigner: components["schemas"]["simple-user"];
        };
        /**
         * Milestoned Issue Event
         * @description Milestoned Issue Event
         */
        "milestoned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            milestone: {
                title: string;
            };
        };
        /**
         * Demilestoned Issue Event
         * @description Demilestoned Issue Event
         */
        "demilestoned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            milestone: {
                title: string;
            };
        };
        /**
         * Renamed Issue Event
         * @description Renamed Issue Event
         */
        "renamed-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            rename: {
                from: string;
                to: string;
            };
        };
        /**
         * Review Requested Issue Event
         * @description Review Requested Issue Event
         */
        "review-requested-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            review_requester: components["schemas"]["simple-user"];
            requested_team?: components["schemas"]["team"];
            requested_reviewer?: components["schemas"]["simple-user"];
        };
        /**
         * Review Request Removed Issue Event
         * @description Review Request Removed Issue Event
         */
        "review-request-removed-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            review_requester: components["schemas"]["simple-user"];
            requested_team?: components["schemas"]["team"];
            requested_reviewer?: components["schemas"]["simple-user"];
        };
        /**
         * Review Dismissed Issue Event
         * @description Review Dismissed Issue Event
         */
        "review-dismissed-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            dismissed_review: {
                state: string;
                review_id: number;
                dismissal_message: string | null;
                dismissal_commit_id?: string;
            };
        };
        /**
         * Locked Issue Event
         * @description Locked Issue Event
         */
        "locked-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            /** @example "off-topic" */
            lock_reason: string | null;
        };
        /**
         * Added to Project Issue Event
         * @description Added to Project Issue Event
         */
        "added-to-project-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Moved Column in Project Issue Event
         * @description Moved Column in Project Issue Event
         */
        "moved-column-in-project-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Removed from Project Issue Event
         * @description Removed from Project Issue Event
         */
        "removed-from-project-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Converted Note to Issue Issue Event
         * @description Converted Note to Issue Issue Event
         */
        "converted-note-to-issue-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Issue Event for Issue
         * @description Issue Event for Issue
         */
        "issue-event-for-issue": components["schemas"]["labeled-issue-event"] | components["schemas"]["unlabeled-issue-event"] | components["schemas"]["assigned-issue-event"] | components["schemas"]["unassigned-issue-event"] | components["schemas"]["milestoned-issue-event"] | components["schemas"]["demilestoned-issue-event"] | components["schemas"]["renamed-issue-event"] | components["schemas"]["review-requested-issue-event"] | components["schemas"]["review-request-removed-issue-event"] | components["schemas"]["review-dismissed-issue-event"] | components["schemas"]["locked-issue-event"] | components["schemas"]["added-to-project-issue-event"] | components["schemas"]["moved-column-in-project-issue-event"] | components["schemas"]["removed-from-project-issue-event"] | components["schemas"]["converted-note-to-issue-issue-event"];
        /**
         * Label
         * @description Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
         */
        label: {
            /**
             * Format: int64
             * @description Unique identifier for the label.
             * @example 208045946
             */
            id: number;
            /** @example MDU6TGFiZWwyMDgwNDU5NDY= */
            node_id: string;
            /**
             * Format: uri
             * @description URL for the label
             * @example https://api.github.com/repositories/42/labels/bug
             */
            url: string;
            /**
             * @description The name of the label.
             * @example bug
             */
            name: string;
            /**
             * @description Optional description of the label, such as its purpose.
             * @example Something isn't working
             */
            description: string | null;
            /**
             * @description 6-character hex code, without the leading #, identifying the color
             * @example FFFFFF
             */
            color: string;
            /**
             * @description Whether this label comes by default in a new repository.
             * @example true
             */
            default: boolean;
        };
        /**
         * Timeline Comment Event
         * @description Timeline Comment Event
         */
        "timeline-comment-event": {
            event: string;
            actor: components["schemas"]["simple-user"];
            /**
             * @description Unique identifier of the issue comment
             * @example 42
             */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue comment
             * @example https://api.github.com/repositories/42/issues/comments/1
             */
            url: string;
            /**
             * @description Contents of the issue comment
             * @example What version of Safari were you using when you observed this bug?
             */
            body?: string;
            body_text?: string;
            body_html?: string;
            /** Format: uri */
            html_url: string;
            user: components["schemas"]["simple-user"];
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            updated_at: string;
            /** Format: uri */
            issue_url: string;
            author_association: components["schemas"]["author-association"];
            performed_via_github_app?: components["schemas"]["nullable-integration"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Timeline Cross Referenced Event
         * @description Timeline Cross Referenced Event
         */
        "timeline-cross-referenced-event": {
            event: string;
            actor?: components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            source: {
                type?: string;
                issue?: components["schemas"]["issue"];
            };
        };
        /**
         * Timeline Committed Event
         * @description Timeline Committed Event
         */
        "timeline-committed-event": {
            event?: string;
            /**
             * @description SHA for the commit
             * @example 7638417db6d59f3c431d3e1f261cc637155684cd
             */
            sha: string;
            node_id: string;
            /** Format: uri */
            url: string;
            /** @description Identifying information for the git-user */
            author: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 * @example 2014-08-09T08:02:04+12:00
                 */
                date: string;
                /**
                 * @description Git email address of the user
                 * @example monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * @description Name of the git user
                 * @example Monalisa Octocat
                 */
                name: string;
            };
            /** @description Identifying information for the git-user */
            committer: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 * @example 2014-08-09T08:02:04+12:00
                 */
                date: string;
                /**
                 * @description Git email address of the user
                 * @example monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * @description Name of the git user
                 * @example Monalisa Octocat
                 */
                name: string;
            };
            /**
             * @description Message describing the purpose of the commit
             * @example Fix #42
             */
            message: string;
            tree: {
                /**
                 * @description SHA for the commit
                 * @example 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                /** Format: uri */
                url: string;
            };
            parents: {
                /**
                 * @description SHA for the commit
                 * @example 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                html_url: string;
            }[];
            verification: {
                verified: boolean;
                reason: string;
                signature: string | null;
                payload: string | null;
                verified_at: string | null;
            };
            /** Format: uri */
            html_url: string;
        };
        /**
         * Timeline Reviewed Event
         * @description Timeline Reviewed Event
         */
        "timeline-reviewed-event": {
            event: string;
            /**
             * @description Unique identifier of the review
             * @example 42
             */
            id: number;
            /** @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA= */
            node_id: string;
            user: components["schemas"]["simple-user"];
            /**
             * @description The text of the review.
             * @example This looks great.
             */
            body: string | null;
            /** @example CHANGES_REQUESTED */
            state: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
             */
            pull_request_url: string;
            _links: {
                html: {
                    href: string;
                };
                pull_request: {
                    href: string;
                };
            };
            /** Format: date-time */
            submitted_at?: string;
            /**
             * @description A commit SHA for the review.
             * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
             */
            commit_id: string;
            body_html?: string;
            body_text?: string;
            author_association: components["schemas"]["author-association"];
        };
        /**
         * Pull Request Review Comment
         * @description Pull Request Review Comments are comments on a portion of the Pull Request's diff.
         */
        "pull-request-review-comment": {
            /**
             * @description URL for the pull request review comment
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
             */
            url: string;
            /**
             * Format: int64
             * @description The ID of the pull request review to which the comment belongs.
             * @example 42
             */
            pull_request_review_id: number | null;
            /**
             * Format: int64
             * @description The ID of the pull request review comment.
             * @example 1
             */
            id: number;
            /**
             * @description The node ID of the pull request review comment.
             * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
             */
            node_id: string;
            /**
             * @description The diff of the line that the comment refers to.
             * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
             */
            diff_hunk: string;
            /**
             * @description The relative path of the file to which the comment applies.
             * @example config/database.yaml
             */
            path: string;
            /**
             * @description The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
             * @example 1
             */
            position?: number;
            /**
             * @description The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
             * @example 4
             */
            original_position?: number;
            /**
             * @description The SHA of the commit to which the comment applies.
             * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            commit_id: string;
            /**
             * @description The SHA of the original commit to which the comment applies.
             * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
             */
            original_commit_id: string;
            /**
             * @description The comment ID to reply to.
             * @example 8
             */
            in_reply_to_id?: number;
            user: components["schemas"]["simple-user"];
            /**
             * @description The text of the comment.
             * @example We should probably include a check for null values here.
             */
            body: string;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @description HTML URL for the pull request review comment.
             * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
             */
            html_url: string;
            /**
             * Format: uri
             * @description URL for the pull request that the review comment belongs to.
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
             */
            pull_request_url: string;
            author_association: components["schemas"]["author-association"];
            _links: {
                self: {
                    /**
                     * Format: uri
                     * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
                     */
                    href: string;
                };
                html: {
                    /**
                     * Format: uri
                     * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
                     */
                    href: string;
                };
                pull_request: {
                    /**
                     * Format: uri
                     * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
                     */
                    href: string;
                };
            };
            /**
             * @description The first line of the range for a multi-line comment.
             * @example 2
             */
            start_line?: number | null;
            /**
             * @description The first line of the range for a multi-line comment.
             * @example 2
             */
            original_start_line?: number | null;
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string|null}
             */
            start_side: "LEFT" | "RIGHT" | null;
            /**
             * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * @example 2
             */
            line?: number;
            /**
             * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * @example 2
             */
            original_line?: number;
            /**
             * @description The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
             * @default RIGHT
             * @enum {string}
             */
            side: "LEFT" | "RIGHT";
            /**
             * @description The level at which the comment is targeted, can be a diff line or a file.
             * @enum {string}
             */
            subject_type?: "line" | "file";
            reactions?: components["schemas"]["reaction-rollup"];
            /** @example "<p>comment body</p>" */
            body_html?: string;
            /** @example "comment body" */
            body_text?: string;
        };
        /**
         * Timeline Line Commented Event
         * @description Timeline Line Commented Event
         */
        "timeline-line-commented-event": {
            event?: string;
            node_id?: string;
            comments?: components["schemas"]["pull-request-review-comment"][];
        };
        /**
         * Timeline Commit Commented Event
         * @description Timeline Commit Commented Event
         */
        "timeline-commit-commented-event": {
            event?: string;
            node_id?: string;
            commit_id?: string;
            comments?: components["schemas"]["commit-comment"][];
        };
        /**
         * Timeline Assigned Issue Event
         * @description Timeline Assigned Issue Event
         */
        "timeline-assigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            assignee: components["schemas"]["simple-user"];
        };
        /**
         * Timeline Unassigned Issue Event
         * @description Timeline Unassigned Issue Event
         */
        "timeline-unassigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            assignee: components["schemas"]["simple-user"];
        };
        /**
         * State Change Issue Event
         * @description State Change Issue Event
         */
        "state-change-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["nullable-integration"];
            state_reason?: string | null;
        };
        /**
         * Timeline Event
         * @description Timeline Event
         */
        "timeline-issue-events": components["schemas"]["labeled-issue-event"] | components["schemas"]["unlabeled-issue-event"] | components["schemas"]["milestoned-issue-event"] | components["schemas"]["demilestoned-issue-event"] | components["schemas"]["renamed-issue-event"] | components["schemas"]["review-requested-issue-event"] | components["schemas"]["review-request-removed-issue-event"] | components["schemas"]["review-dismissed-issue-event"] | components["schemas"]["locked-issue-event"] | components["schemas"]["added-to-project-issue-event"] | components["schemas"]["moved-column-in-project-issue-event"] | components["schemas"]["removed-from-project-issue-event"] | components["schemas"]["converted-note-to-issue-issue-event"] | components["schemas"]["timeline-comment-event"] | components["schemas"]["timeline-cross-referenced-event"] | components["schemas"]["timeline-committed-event"] | components["schemas"]["timeline-reviewed-event"] | components["schemas"]["timeline-line-commented-event"] | components["schemas"]["timeline-commit-commented-event"] | components["schemas"]["timeline-assigned-issue-event"] | components["schemas"]["timeline-unassigned-issue-event"] | components["schemas"]["state-change-issue-event"];
        /**
         * Deploy Key
         * @description An SSH key granting access to a single repository.
         */
        "deploy-key": {
            id: number;
            key: string;
            url: string;
            title: string;
            verified: boolean;
            created_at: string;
            read_only: boolean;
            added_by?: string | null;
            last_used?: string | null;
            enabled?: boolean;
        };
        /**
         * Language
         * @description Language
         */
        language: {
            [key: string]: number;
        };
        /**
         * License Content
         * @description License Content
         */
        "license-content": {
            name: string;
            path: string;
            sha: string;
            size: number;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            download_url: string | null;
            type: string;
            content: string;
            encoding: string;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
            license: components["schemas"]["nullable-license-simple"];
        };
        /**
         * Merged upstream
         * @description Results of a successful merge upstream request
         */
        "merged-upstream": {
            message?: string;
            /** @enum {string} */
            merge_type?: "merge" | "fast-forward" | "none";
            base_branch?: string;
        };
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/milestones/v1.0
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
             */
            labels_url: string;
            /** @example 1002604 */
            id: number;
            /** @example MDk6TWlsZXN0b25lMTAwMjYwNA== */
            node_id: string;
            /**
             * @description The number of the milestone.
             * @example 42
             */
            number: number;
            /**
             * @description The state of the milestone.
             * @default open
             * @example open
             * @enum {string}
             */
            state: "open" | "closed";
            /**
             * @description The title of the milestone.
             * @example v1.0
             */
            title: string;
            /** @example Tracking milestone for version 1.0 */
            description: string | null;
            creator: components["schemas"]["nullable-simple-user"];
            /** @example 4 */
            open_issues: number;
            /** @example 8 */
            closed_issues: number;
            /**
             * Format: date-time
             * @example 2011-04-10T20:09:31Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2014-03-03T18:58:10Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2013-02-12T13:22:01Z
             */
            closed_at: string | null;
            /**
             * Format: date-time
             * @example 2012-10-09T23:39:01Z
             */
            due_on: string | null;
        };
        /** Pages Source Hash */
        "pages-source-hash": {
            branch: string;
            path: string;
        };
        /** Pages Https Certificate */
        "pages-https-certificate": {
            /**
             * @example approved
             * @enum {string}
             */
            state: "new" | "authorization_created" | "authorization_pending" | "authorized" | "authorization_revoked" | "issued" | "uploaded" | "approved" | "errored" | "bad_authz" | "destroy_pending" | "dns_changed";
            /** @example Certificate is approved */
            description: string;
            /**
             * @description Array of the domain set and its alternate name (if it is configured)
             * @example [
             *       "example.com",
             *       "www.example.com"
             *     ]
             */
            domains: string[];
            /** Format: date */
            expires_at?: string;
        };
        /**
         * GitHub Pages
         * @description The configuration for GitHub Pages for a repository.
         */
        page: {
            /**
             * Format: uri
             * @description The API address for accessing this Page resource.
             * @example https://api.github.com/repos/github/hello-world/pages
             */
            url: string;
            /**
             * @description The status of the most recent build of the Page.
             * @example built
             * @enum {string|null}
             */
            status: "built" | "building" | "errored" | null;
            /**
             * @description The Pages site's custom domain
             * @example example.com
             */
            cname: string | null;
            /**
             * @description The state if the domain is verified
             * @example pending
             * @enum {string|null}
             */
            protected_domain_state?: "pending" | "verified" | "unverified" | null;
            /**
             * Format: date-time
             * @description The timestamp when a pending domain becomes unverified.
             */
            pending_domain_unverified_at?: string | null;
            /**
             * @description Whether the Page has a custom 404 page.
             * @default false
             * @example false
             */
            custom_404: boolean;
            /**
             * Format: uri
             * @description The web address the Page can be accessed from.
             * @example https://example.com
             */
            html_url?: string;
            /**
             * @description The process in which the Page will be built.
             * @example legacy
             * @enum {string|null}
             */
            build_type?: "legacy" | "workflow" | null;
            source?: components["schemas"]["pages-source-hash"];
            /**
             * @description Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
             * @example true
             */
            public: boolean;
            https_certificate?: components["schemas"]["pages-https-certificate"];
            /**
             * @description Whether https is enabled on the domain
             * @example true
             */
            https_enforced?: boolean;
        };
        /**
         * Page Build
         * @description Page Build
         */
        "page-build": {
            /** Format: uri */
            url: string;
            status: string;
            error: {
                message: string | null;
            };
            pusher: components["schemas"]["nullable-simple-user"];
            commit: string;
            duration: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Page Build Status
         * @description Page Build Status
         */
        "page-build-status": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/github/hello-world/pages/builds/latest
             */
            url: string;
            /** @example queued */
            status: string;
        };
        /**
         * GitHub Pages
         * @description The GitHub Pages deployment status.
         */
        "page-deployment": {
            /** @description The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit. */
            id: number | string;
            /**
             * Format: uri
             * @description The URI to monitor GitHub Pages deployment status.
             * @example https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251
             */
            status_url: string;
            /**
             * Format: uri
             * @description The URI to the deployed GitHub Pages.
             * @example hello-world.github.io
             */
            page_url: string;
            /**
             * Format: uri
             * @description The URI to the deployed GitHub Pages preview.
             * @example monalisa-1231a2312sa32-23sda74.drafts.github.io
             */
            preview_url?: string;
        };
        /** GitHub Pages deployment status */
        "pages-deployment-status": {
            /**
             * @description The current status of the deployment.
             * @enum {string}
             */
            status?: "deployment_in_progress" | "syncing_files" | "finished_file_sync" | "updating_pages" | "purging_cdn" | "deployment_cancelled" | "deployment_failed" | "deployment_content_failed" | "deployment_attempt_error" | "deployment_lost" | "succeed";
        };
        /**
         * Pages Health Check Status
         * @description Pages Health Check Status
         */
        "pages-health-check": {
            domain?: {
                host?: string;
                uri?: string;
                nameservers?: string;
                dns_resolves?: boolean;
                is_proxied?: boolean | null;
                is_cloudflare_ip?: boolean | null;
                is_fastly_ip?: boolean | null;
                is_old_ip_address?: boolean | null;
                is_a_record?: boolean | null;
                has_cname_record?: boolean | null;
                has_mx_records_present?: boolean | null;
                is_valid_domain?: boolean;
                is_apex_domain?: boolean;
                should_be_a_record?: boolean | null;
                is_cname_to_github_user_domain?: boolean | null;
                is_cname_to_pages_dot_github_dot_com?: boolean | null;
                is_cname_to_fastly?: boolean | null;
                is_pointed_to_github_pages_ip?: boolean | null;
                is_non_github_pages_ip_present?: boolean | null;
                is_pages_domain?: boolean;
                is_served_by_pages?: boolean | null;
                is_valid?: boolean;
                reason?: string | null;
                responds_to_https?: boolean;
                enforces_https?: boolean;
                https_error?: string | null;
                is_https_eligible?: boolean | null;
                caa_error?: string | null;
            };
            alt_domain?: {
                host?: string;
                uri?: string;
                nameservers?: string;
                dns_resolves?: boolean;
                is_proxied?: boolean | null;
                is_cloudflare_ip?: boolean | null;
                is_fastly_ip?: boolean | null;
                is_old_ip_address?: boolean | null;
                is_a_record?: boolean | null;
                has_cname_record?: boolean | null;
                has_mx_records_present?: boolean | null;
                is_valid_domain?: boolean;
                is_apex_domain?: boolean;
                should_be_a_record?: boolean | null;
                is_cname_to_github_user_domain?: boolean | null;
                is_cname_to_pages_dot_github_dot_com?: boolean | null;
                is_cname_to_fastly?: boolean | null;
                is_pointed_to_github_pages_ip?: boolean | null;
                is_non_github_pages_ip_present?: boolean | null;
                is_pages_domain?: boolean;
                is_served_by_pages?: boolean | null;
                is_valid?: boolean;
                reason?: string | null;
                responds_to_https?: boolean;
                enforces_https?: boolean;
                https_error?: string | null;
                is_https_eligible?: boolean | null;
                caa_error?: string | null;
            } | null;
        };
        /**
         * Pull Request
         * @description Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
         */
        "pull-request": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
             */
            url: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example MDExOlB1bGxSZXF1ZXN0MQ== */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1347
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1347.diff
             */
            diff_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1347.patch
             */
            patch_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
             */
            issue_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
             */
            commits_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
             */
            review_comments_url: string;
            /** @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number} */
            review_comment_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
             */
            comments_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            statuses_url: string;
            /**
             * @description Number uniquely identifying the pull request within its repository.
             * @example 42
             */
            number: number;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @example open
             * @enum {string}
             */
            state: "open" | "closed";
            /** @example true */
            locked: boolean;
            /**
             * @description The title of the pull request.
             * @example Amazing new feature
             */
            title: string;
            user: components["schemas"]["simple-user"];
            /** @example Please pull these awesome changes */
            body: string | null;
            labels: {
                /** Format: int64 */
                id: number;
                node_id: string;
                url: string;
                name: string;
                description: string | null;
                color: string;
                default: boolean;
            }[];
            milestone: components["schemas"]["nullable-milestone"];
            /** @example too heated */
            active_lock_reason?: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            closed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            merged_at: string | null;
            /** @example e5bd3914e2e596debea16f433f57875b5b90bcd6 */
            merge_commit_sha: string | null;
            assignee: components["schemas"]["nullable-simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            requested_reviewers?: components["schemas"]["simple-user"][] | null;
            requested_teams?: components["schemas"]["team-simple"][] | null;
            head: {
                label: string;
                ref: string;
                repo: components["schemas"]["repository"];
                sha: string;
                user: components["schemas"]["simple-user"];
            };
            base: {
                label: string;
                ref: string;
                repo: components["schemas"]["repository"];
                sha: string;
                user: components["schemas"]["simple-user"];
            };
            _links: {
                comments: components["schemas"]["link"];
                commits: components["schemas"]["link"];
                statuses: components["schemas"]["link"];
                html: components["schemas"]["link"];
                issue: components["schemas"]["link"];
                review_comments: components["schemas"]["link"];
                review_comment: components["schemas"]["link"];
                self: components["schemas"]["link"];
            };
            author_association: components["schemas"]["author-association"];
            auto_merge: components["schemas"]["auto-merge"];
            /**
             * @description Indicates whether or not the pull request is a draft.
             * @example false
             */
            draft?: boolean;
            merged: boolean;
            /** @example true */
            mergeable: boolean | null;
            /** @example true */
            rebaseable?: boolean | null;
            /** @example clean */
            mergeable_state: string;
            merged_by: components["schemas"]["nullable-simple-user"];
            /** @example 10 */
            comments: number;
            /** @example 0 */
            review_comments: number;
            /**
             * @description Indicates whether maintainers can modify the pull request.
             * @example true
             */
            maintainer_can_modify: boolean;
            /** @example 3 */
            commits: number;
            /** @example 100 */
            additions: number;
            /** @example 3 */
            deletions: number;
            /** @example 5 */
            changed_files: number;
        };
        /**
         * Pull Request Merge Result
         * @description Pull Request Merge Result
         */
        "pull-request-merge-result": {
            sha: string;
            merged: boolean;
            message: string;
        };
        /**
         * Pull Request Review Request
         * @description Pull Request Review Request
         */
        "pull-request-review-request": {
            users: components["schemas"]["simple-user"][];
            teams: components["schemas"]["team"][];
        };
        /**
         * Pull Request Review
         * @description Pull Request Reviews are reviews on pull requests.
         */
        "pull-request-review": {
            /**
             * Format: int64
             * @description Unique identifier of the review
             * @example 42
             */
            id: number;
            /** @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA= */
            node_id: string;
            user: components["schemas"]["nullable-simple-user"];
            /**
             * @description The text of the review.
             * @example This looks great.
             */
            body: string;
            /** @example CHANGES_REQUESTED */
            state: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
             */
            pull_request_url: string;
            _links: {
                html: {
                    href: string;
                };
                pull_request: {
                    href: string;
                };
            };
            /** Format: date-time */
            submitted_at?: string;
            /**
             * @description A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
             * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
             */
            commit_id: string | null;
            body_html?: string;
            body_text?: string;
            author_association: components["schemas"]["author-association"];
        };
        /**
         * Legacy Review Comment
         * @description Legacy Review Comment
         */
        "review-comment": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
             */
            url: string;
            /**
             * Format: int64
             * @example 42
             */
            pull_request_review_id: number | null;
            /**
             * Format: int64
             * @example 10
             */
            id: number;
            /** @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw */
            node_id: string;
            /** @example @@ -16,33 +16,40 @@ public class Connection : IConnection... */
            diff_hunk: string;
            /** @example file1.txt */
            path: string;
            /** @example 1 */
            position: number | null;
            /** @example 4 */
            original_position: number;
            /** @example 6dcb09b5b57875f334f61aebed695e2e4193db5e */
            commit_id: string;
            /** @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840 */
            original_commit_id: string;
            /** @example 8 */
            in_reply_to_id?: number;
            user: components["schemas"]["nullable-simple-user"];
            /** @example Great stuff */
            body: string;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-04-14T16:00:49Z
             */
            updated_at: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
             */
            pull_request_url: string;
            author_association: components["schemas"]["author-association"];
            _links: {
                self: components["schemas"]["link"];
                html: components["schemas"]["link"];
                pull_request: components["schemas"]["link"];
            };
            body_text?: string;
            body_html?: string;
            reactions?: components["schemas"]["reaction-rollup"];
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string}
             */
            side: "LEFT" | "RIGHT";
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string|null}
             */
            start_side: "LEFT" | "RIGHT" | null;
            /**
             * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * @example 2
             */
            line?: number;
            /**
             * @description The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * @example 2
             */
            original_line?: number;
            /**
             * @description The first line of the range for a multi-line comment.
             * @example 2
             */
            start_line?: number | null;
            /**
             * @description The original first line of the range for a multi-line comment.
             * @example 2
             */
            original_start_line?: number | null;
            /**
             * @description The level at which the comment is targeted, can be a diff line or a file.
             * @enum {string}
             */
            subject_type?: "line" | "file";
        };
        /**
         * Release Asset
         * @description Data related to a release.
         */
        "release-asset": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            browser_download_url: string;
            id: number;
            node_id: string;
            /**
             * @description The file name of the asset.
             * @example Team Environment
             */
            name: string;
            label: string | null;
            /**
             * @description State of the release asset.
             * @enum {string}
             */
            state: "uploaded" | "open";
            content_type: string;
            size: number;
            digest: string | null;
            download_count: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            uploader: components["schemas"]["nullable-simple-user"];
        };
        /**
         * Release
         * @description A release.
         */
        release: {
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            assets_url: string;
            upload_url: string;
            /** Format: uri */
            tarball_url: string | null;
            /** Format: uri */
            zipball_url: string | null;
            id: number;
            node_id: string;
            /**
             * @description The name of the tag.
             * @example v1.0.0
             */
            tag_name: string;
            /**
             * @description Specifies the commitish value that determines where the Git tag is created from.
             * @example master
             */
            target_commitish: string;
            name: string | null;
            body?: string | null;
            /**
             * @description true to create a draft (unpublished) release, false to create a published one.
             * @example false
             */
            draft: boolean;
            /**
             * @description Whether to identify the release as a prerelease or a full release.
             * @example false
             */
            prerelease: boolean;
            /**
             * @description Whether or not the release is immutable.
             * @example false
             */
            immutable?: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            published_at: string | null;
            author: components["schemas"]["simple-user"];
            assets: components["schemas"]["release-asset"][];
            body_html?: string;
            body_text?: string;
            mentions_count?: number;
            /**
             * Format: uri
             * @description The URL of the release discussion.
             */
            discussion_url?: string;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Generated Release Notes Content
         * @description Generated name and body describing a release
         */
        "release-notes-content": {
            /**
             * @description The generated name of the release
             * @example Release v1.0.0 is now available!
             */
            name: string;
            /** @description The generated body describing the contents of the release supporting markdown formatting */
            body: string;
        };
        /**
         * repository ruleset data for rule
         * @description User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
         */
        "repository-rule-ruleset-info": {
            /**
             * @description The type of source for the ruleset that includes this rule.
             * @enum {string}
             */
            ruleset_source_type?: "Repository" | "Organization";
            /** @description The name of the source of the ruleset that includes this rule. */
            ruleset_source?: string;
            /** @description The ID of the ruleset that includes this rule. */
            ruleset_id?: number;
        };
        /**
         * Repository Rule
         * @description A repository rule with ruleset details.
         */
        "repository-rule-detailed": (components["schemas"]["repository-rule-creation"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-update"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-deletion"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-required-linear-history"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-merge-queue"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-required-deployments"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-required-signatures"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-pull-request"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-required-status-checks"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-non-fast-forward"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-commit-message-pattern"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-commit-author-email-pattern"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-committer-email-pattern"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-branch-name-pattern"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-tag-name-pattern"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-file-path-restriction"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-max-file-path-length"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-file-extension-restriction"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-max-file-size"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-workflows"] & components["schemas"]["repository-rule-ruleset-info"]) | (components["schemas"]["repository-rule-code-scanning"] & components["schemas"]["repository-rule-ruleset-info"]);
        "secret-scanning-alert": {
            number?: components["schemas"]["alert-number"];
            created_at?: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["nullable-alert-updated-at"];
            url?: components["schemas"]["alert-url"];
            html_url?: components["schemas"]["alert-html-url"];
            /**
             * Format: uri
             * @description The REST API URL of the code locations for this alert.
             */
            locations_url?: string;
            state?: components["schemas"]["secret-scanning-alert-state"];
            resolution?: components["schemas"]["secret-scanning-alert-resolution"];
            /**
             * Format: date-time
             * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            resolved_at?: string | null;
            resolved_by?: components["schemas"]["nullable-simple-user"];
            /** @description An optional comment to resolve an alert. */
            resolution_comment?: string | null;
            /** @description The type of secret that secret scanning detected. */
            secret_type?: string;
            /** @description User-friendly name for the detected secret, matching the `secret_type`.
             *     For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)." */
            secret_type_display_name?: string;
            /** @description The secret that was detected. */
            secret?: string;
            /** @description Whether push protection was bypassed for the detected secret. */
            push_protection_bypassed?: boolean | null;
            push_protection_bypassed_by?: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            push_protection_bypassed_at?: string | null;
            push_protection_bypass_request_reviewer?: components["schemas"]["nullable-simple-user"];
            /** @description An optional comment when reviewing a push protection bypass. */
            push_protection_bypass_request_reviewer_comment?: string | null;
            /** @description An optional comment when requesting a push protection bypass. */
            push_protection_bypass_request_comment?: string | null;
            /**
             * Format: uri
             * @description The URL to a push protection bypass request.
             */
            push_protection_bypass_request_html_url?: string | null;
            /**
             * @description The token status as of the latest validity check.
             * @enum {string}
             */
            validity?: "active" | "inactive" | "unknown";
            /** @description Whether the detected secret was publicly leaked. */
            publicly_leaked?: boolean | null;
            /** @description Whether the detected secret was found in multiple repositories under the same organization or enterprise. */
            multi_repo?: boolean | null;
            /** @description A boolean value representing whether or not alert is base64 encoded */
            is_base64_encoded?: boolean | null;
            first_location_detected?: components["schemas"]["nullable-secret-scanning-first-detected-location"];
            /** @description A boolean value representing whether or not the token in the alert was detected in more than one location. */
            has_more_locations?: boolean;
        };
        /** @description An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
        "secret-scanning-alert-resolution-comment": string | null;
        "secret-scanning-location": {
            /**
             * @description The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
             * @example commit
             * @enum {string}
             */
            type?: "commit" | "wiki_commit" | "issue_title" | "issue_body" | "issue_comment" | "discussion_title" | "discussion_body" | "discussion_comment" | "pull_request_title" | "pull_request_body" | "pull_request_comment" | "pull_request_review" | "pull_request_review_comment";
            details?: components["schemas"]["secret-scanning-location-commit"] | components["schemas"]["secret-scanning-location-wiki-commit"] | components["schemas"]["secret-scanning-location-issue-title"] | components["schemas"]["secret-scanning-location-issue-body"] | components["schemas"]["secret-scanning-location-issue-comment"] | components["schemas"]["secret-scanning-location-discussion-title"] | components["schemas"]["secret-scanning-location-discussion-body"] | components["schemas"]["secret-scanning-location-discussion-comment"] | components["schemas"]["secret-scanning-location-pull-request-title"] | components["schemas"]["secret-scanning-location-pull-request-body"] | components["schemas"]["secret-scanning-location-pull-request-comment"] | components["schemas"]["secret-scanning-location-pull-request-review"] | components["schemas"]["secret-scanning-location-pull-request-review-comment"];
        };
        /**
         * @description The reason for bypassing push protection.
         * @enum {string}
         */
        "secret-scanning-push-protection-bypass-reason": "false_positive" | "used_in_tests" | "will_fix_later";
        "secret-scanning-push-protection-bypass": {
            reason?: components["schemas"]["secret-scanning-push-protection-bypass-reason"];
            /**
             * Format: date-time
             * @description The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            expire_at?: string | null;
            /** @description The token type this bypass is for. */
            token_type?: string;
        };
        /** @description Information on a single scan performed by secret scanning on the repository */
        "secret-scanning-scan": {
            /** @description The type of scan */
            type?: string;
            /** @description The state of the scan. Either "completed", "running", or "pending" */
            status?: string;
            /**
             * Format: date-time
             * @description The time that the scan was completed. Empty if the scan is running
             */
            completed_at?: string | null;
            /**
             * Format: date-time
             * @description The time that the scan was started. Empty if the scan is pending
             */
            started_at?: string | null;
        };
        "secret-scanning-scan-history": {
            incremental_scans?: components["schemas"]["secret-scanning-scan"][];
            pattern_update_scans?: components["schemas"]["secret-scanning-scan"][];
            backfill_scans?: components["schemas"]["secret-scanning-scan"][];
            custom_pattern_backfill_scans?: (components["schemas"]["secret-scanning-scan"] & {
                /** @description Name of the custom pattern for custom pattern scans */
                pattern_name?: string;
                /** @description Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise" */
                pattern_scope?: string;
            })[];
        };
        "repository-advisory-create": {
            /** @description A short summary of the advisory. */
            summary: string;
            /** @description A detailed description of what the advisory impacts. */
            description: string;
            /** @description The Common Vulnerabilities and Exposures (CVE) ID. */
            cve_id?: string | null;
            /** @description A product affected by the vulnerability detailed in a repository security advisory. */
            vulnerabilities: {
                /** @description The name of the package affected by the vulnerability. */
                package: {
                    ecosystem: components["schemas"]["security-advisory-ecosystems"];
                    /** @description The unique package name within its ecosystem. */
                    name?: string | null;
                };
                /** @description The range of the package versions affected by the vulnerability. */
                vulnerable_version_range?: string | null;
                /** @description The package version(s) that resolve the vulnerability. */
                patched_versions?: string | null;
                /** @description The functions in the package that are affected. */
                vulnerable_functions?: string[] | null;
            }[];
            /** @description A list of Common Weakness Enumeration (CWE) IDs. */
            cwe_ids?: string[] | null;
            /** @description A list of users receiving credit for their participation in the security advisory. */
            credits?: {
                /** @description The username of the user credited. */
                login: string;
                type: components["schemas"]["security-advisory-credit-types"];
            }[] | null;
            /**
             * @description The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
             * @enum {string|null}
             */
            severity?: "critical" | "high" | "medium" | "low" | null;
            /** @description The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
            cvss_vector_string?: string | null;
            /**
             * @description Whether to create a temporary private fork of the repository to collaborate on a fix.
             * @default false
             */
            start_private_fork: boolean;
        };
        "private-vulnerability-report-create": {
            /** @description A short summary of the advisory. */
            summary: string;
            /** @description A detailed description of what the advisory impacts. */
            description: string;
            /** @description An array of products affected by the vulnerability detailed in a repository security advisory. */
            vulnerabilities?: {
                /** @description The name of the package affected by the vulnerability. */
                package: {
                    ecosystem: components["schemas"]["security-advisory-ecosystems"];
                    /** @description The unique package name within its ecosystem. */
                    name?: string | null;
                };
                /** @description The range of the package versions affected by the vulnerability. */
                vulnerable_version_range?: string | null;
                /** @description The package version(s) that resolve the vulnerability. */
                patched_versions?: string | null;
                /** @description The functions in the package that are affected. */
                vulnerable_functions?: string[] | null;
            }[] | null;
            /** @description A list of Common Weakness Enumeration (CWE) IDs. */
            cwe_ids?: string[] | null;
            /**
             * @description The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
             * @enum {string|null}
             */
            severity?: "critical" | "high" | "medium" | "low" | null;
            /** @description The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
            cvss_vector_string?: string | null;
            /**
             * @description Whether to create a temporary private fork of the repository to collaborate on a fix.
             * @default false
             */
            start_private_fork: boolean;
        };
        "repository-advisory-update": {
            /** @description A short summary of the advisory. */
            summary?: string;
            /** @description A detailed description of what the advisory impacts. */
            description?: string;
            /** @description The Common Vulnerabilities and Exposures (CVE) ID. */
            cve_id?: string | null;
            /** @description A product affected by the vulnerability detailed in a repository security advisory. */
            vulnerabilities?: {
                /** @description The name of the package affected by the vulnerability. */
                package: {
                    ecosystem: components["schemas"]["security-advisory-ecosystems"];
                    /** @description The unique package name within its ecosystem. */
                    name?: string | null;
                };
                /** @description The range of the package versions affected by the vulnerability. */
                vulnerable_version_range?: string | null;
                /** @description The package version(s) that resolve the vulnerability. */
                patched_versions?: string | null;
                /** @description The functions in the package that are affected. */
                vulnerable_functions?: string[] | null;
            }[];
            /** @description A list of Common Weakness Enumeration (CWE) IDs. */
            cwe_ids?: string[] | null;
            /** @description A list of users receiving credit for their participation in the security advisory. */
            credits?: {
                /** @description The username of the user credited. */
                login: string;
                type: components["schemas"]["security-advisory-credit-types"];
            }[] | null;
            /**
             * @description The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
             * @enum {string|null}
             */
            severity?: "critical" | "high" | "medium" | "low" | null;
            /** @description The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
            cvss_vector_string?: string | null;
            /**
             * @description The state of the advisory.
             * @enum {string}
             */
            state?: "published" | "closed" | "draft";
            /** @description A list of usernames who have been granted write access to the advisory. */
            collaborating_users?: string[] | null;
            /** @description A list of team slugs which have been granted write access to the advisory. */
            collaborating_teams?: string[] | null;
        };
        /**
         * Stargazer
         * @description Stargazer
         */
        stargazer: {
            /** Format: date-time */
            starred_at: string;
            user: components["schemas"]["nullable-simple-user"];
        };
        /**
         * Code Frequency Stat
         * @description Code Frequency Stat
         */
        "code-frequency-stat": number[];
        /**
         * Commit Activity
         * @description Commit Activity
         */
        "commit-activity": {
            /** @example [
             *       0,
             *       3,
             *       26,
             *       20,
             *       39,
             *       1,
             *       0
             *     ] */
            days: number[];
            /** @example 89 */
            total: number;
            /** @example 1336280400 */
            week: number;
        };
        /**
         * Contributor Activity
         * @description Contributor Activity
         */
        "contributor-activity": {
            author: components["schemas"]["nullable-simple-user"];
            /** @example 135 */
            total: number;
            /** @example [
             *       {
             *         "w": "1367712000",
             *         "a": 6898,
             *         "d": 77,
             *         "c": 10
             *       }
             *     ] */
            weeks: {
                w?: number;
                a?: number;
                d?: number;
                c?: number;
            }[];
        };
        /** Participation Stats */
        "participation-stats": {
            all: number[];
            owner: number[];
        };
        /**
         * Repository Invitation
         * @description Repository invitations let you manage who you collaborate with.
         */
        "repository-subscription": {
            /**
             * @description Determines if notifications should be received from this repository.
             * @example true
             */
            subscribed: boolean;
            /** @description Determines if all notifications should be blocked from this repository. */
            ignored: boolean;
            reason: string | null;
            /**
             * Format: date-time
             * @example 2012-10-06T21:34:12Z
             */
            created_at: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example/subscription
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/example
             */
            repository_url: string;
        };
        /**
         * Tag
         * @description Tag
         */
        tag: {
            /** @example v0.1 */
            name: string;
            commit: {
                sha: string;
                /** Format: uri */
                url: string;
            };
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/zipball/v0.1
             */
            zipball_url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World/tarball/v0.1
             */
            tarball_url: string;
            node_id: string;
        };
        /**
         * Tag protection
         * @description Tag protection
         */
        "tag-protection": {
            /** @example 2 */
            id?: number;
            /** @example 2011-01-26T19:01:12Z */
            created_at?: string;
            /** @example 2011-01-26T19:01:12Z */
            updated_at?: string;
            /** @example true */
            enabled?: boolean;
            /** @example v1.* */
            pattern: string;
        };
        /**
         * Topic
         * @description A topic aggregates entities that are related to a subject.
         */
        topic: {
            names: string[];
        };
        /** Traffic */
        traffic: {
            /** Format: date-time */
            timestamp: string;
            uniques: number;
            count: number;
        };
        /**
         * Clone Traffic
         * @description Clone Traffic
         */
        "clone-traffic": {
            /** @example 173 */
            count: number;
            /** @example 128 */
            uniques: number;
            clones: components["schemas"]["traffic"][];
        };
        /**
         * Content Traffic
         * @description Content Traffic
         */
        "content-traffic": {
            /** @example /github/hubot */
            path: string;
            /** @example github/hubot: A customizable life embetterment robot. */
            title: string;
            /** @example 3542 */
            count: number;
            /** @example 2225 */
            uniques: number;
        };
        /**
         * Referrer Traffic
         * @description Referrer Traffic
         */
        "referrer-traffic": {
            /** @example Google */
            referrer: string;
            /** @example 4 */
            count: number;
            /** @example 3 */
            uniques: number;
        };
        /**
         * View Traffic
         * @description View Traffic
         */
        "view-traffic": {
            /** @example 14850 */
            count: number;
            /** @example 3782 */
            uniques: number;
            views: components["schemas"]["traffic"][];
        };
        /** Search Result Text Matches */
        "search-result-text-matches": {
            object_url?: string;
            object_type?: string | null;
            property?: string;
            fragment?: string;
            matches?: {
                text?: string;
                indices?: number[];
            }[];
        }[];
        /**
         * Code Search Result Item
         * @description Code Search Result Item
         */
        "code-search-result-item": {
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string;
            /** Format: uri */
            html_url: string;
            repository: components["schemas"]["minimal-repository"];
            score: number;
            file_size?: number;
            language?: string | null;
            /** Format: date-time */
            last_modified_at?: string;
            /** @example [
             *       "73..77",
             *       "77..78"
             *     ] */
            line_numbers?: string[];
            text_matches?: components["schemas"]["search-result-text-matches"];
        };
        /**
         * Commit Search Result Item
         * @description Commit Search Result Item
         */
        "commit-search-result-item": {
            /** Format: uri */
            url: string;
            sha: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            comments_url: string;
            commit: {
                author: {
                    name: string;
                    email: string;
                    /** Format: date-time */
                    date: string;
                };
                committer: components["schemas"]["nullable-git-user"];
                comment_count: number;
                message: string;
                tree: {
                    sha: string;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                url: string;
                verification?: components["schemas"]["verification"];
            };
            author: components["schemas"]["nullable-simple-user"];
            committer: components["schemas"]["nullable-git-user"];
            parents: {
                url?: string;
                html_url?: string;
                sha?: string;
            }[];
            repository: components["schemas"]["minimal-repository"];
            score: number;
            node_id: string;
            text_matches?: components["schemas"]["search-result-text-matches"];
        };
        /**
         * Issue Search Result Item
         * @description Issue Search Result Item
         */
        "issue-search-result-item": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            repository_url: string;
            labels_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            /** Format: int64 */
            id: number;
            node_id: string;
            number: number;
            title: string;
            locked: boolean;
            active_lock_reason?: string | null;
            assignees?: components["schemas"]["simple-user"][] | null;
            user: components["schemas"]["nullable-simple-user"];
            labels: {
                /** Format: int64 */
                id?: number;
                node_id?: string;
                url?: string;
                name?: string;
                color?: string;
                default?: boolean;
                description?: string | null;
            }[];
            /** Sub-issues Summary */
            sub_issues_summary?: {
                total: number;
                completed: number;
                percent_completed: number;
            };
            state: string;
            state_reason?: string | null;
            assignee: components["schemas"]["nullable-simple-user"];
            milestone: components["schemas"]["nullable-milestone"];
            comments: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            closed_at: string | null;
            text_matches?: components["schemas"]["search-result-text-matches"];
            pull_request?: {
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                diff_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                patch_url: string | null;
                /** Format: uri */
                url: string | null;
            };
            body?: string;
            score: number;
            author_association: components["schemas"]["author-association"];
            draft?: boolean;
            repository?: components["schemas"]["repository"];
            body_html?: string;
            body_text?: string;
            /** Format: uri */
            timeline_url?: string;
            type?: components["schemas"]["issue-type"];
            performed_via_github_app?: components["schemas"]["nullable-integration"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Label Search Result Item
         * @description Label Search Result Item
         */
        "label-search-result-item": {
            id: number;
            node_id: string;
            /** Format: uri */
            url: string;
            name: string;
            color: string;
            default: boolean;
            description: string | null;
            score: number;
            text_matches?: components["schemas"]["search-result-text-matches"];
        };
        /**
         * Repo Search Result Item
         * @description Repo Search Result Item
         */
        "repo-search-result-item": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: components["schemas"]["nullable-simple-user"];
            private: boolean;
            /** Format: uri */
            html_url: string;
            description: string | null;
            fork: boolean;
            /** Format: uri */
            url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            pushed_at: string;
            /** Format: uri */
            homepage: string | null;
            size: number;
            stargazers_count: number;
            watchers_count: number;
            language: string | null;
            forks_count: number;
            open_issues_count: number;
            master_branch?: string;
            default_branch: string;
            score: number;
            /** Format: uri */
            forks_url: string;
            keys_url: string;
            collaborators_url: string;
            /** Format: uri */
            teams_url: string;
            /** Format: uri */
            hooks_url: string;
            issue_events_url: string;
            /** Format: uri */
            events_url: string;
            assignees_url: string;
            branches_url: string;
            /** Format: uri */
            tags_url: string;
            blobs_url: string;
            git_tags_url: string;
            git_refs_url: string;
            trees_url: string;
            statuses_url: string;
            /** Format: uri */
            languages_url: string;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri */
            contributors_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            commits_url: string;
            git_commits_url: string;
            comments_url: string;
            issue_comment_url: string;
            contents_url: string;
            compare_url: string;
            /** Format: uri */
            merges_url: string;
            archive_url: string;
            /** Format: uri */
            downloads_url: string;
            issues_url: string;
            pulls_url: string;
            milestones_url: string;
            notifications_url: string;
            labels_url: string;
            releases_url: string;
            /** Format: uri */
            deployments_url: string;
            git_url: string;
            ssh_url: string;
            clone_url: string;
            /** Format: uri */
            svn_url: string;
            forks: number;
            open_issues: number;
            watchers: number;
            topics?: string[];
            /** Format: uri */
            mirror_url: string | null;
            has_issues: boolean;
            has_projects: boolean;
            has_pages: boolean;
            has_wiki: boolean;
            has_downloads: boolean;
            has_discussions?: boolean;
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /** @description The repository visibility: public, private, or internal. */
            visibility?: string;
            license: components["schemas"]["nullable-license-simple"];
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            text_matches?: components["schemas"]["search-result-text-matches"];
            temp_clone_token?: string;
            allow_merge_commit?: boolean;
            allow_squash_merge?: boolean;
            allow_rebase_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_forking?: boolean;
            is_template?: boolean;
            /** @example false */
            web_commit_signoff_required?: boolean;
        };
        /**
         * Topic Search Result Item
         * @description Topic Search Result Item
         */
        "topic-search-result-item": {
            name: string;
            display_name: string | null;
            short_description: string | null;
            description: string | null;
            created_by: string | null;
            released: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            featured: boolean;
            curated: boolean;
            score: number;
            repository_count?: number | null;
            /** Format: uri */
            logo_url?: string | null;
            text_matches?: components["schemas"]["search-result-text-matches"];
            related?: {
                topic_relation?: {
                    id?: number;
                    name?: string;
                    topic_id?: number;
                    relation_type?: string;
                };
            }[] | null;
            aliases?: {
                topic_relation?: {
                    id?: number;
                    name?: string;
                    topic_id?: number;
                    relation_type?: string;
                };
            }[] | null;
        };
        /**
         * User Search Result Item
         * @description User Search Result Item
         */
        "user-search-result-item": {
            login: string;
            /** Format: int64 */
            id: number;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            score: number;
            following_url: string;
            gists_url: string;
            starred_url: string;
            events_url: string;
            public_repos?: number;
            public_gists?: number;
            followers?: number;
            following?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            bio?: string | null;
            /** Format: email */
            email?: string | null;
            location?: string | null;
            site_admin: boolean;
            hireable?: boolean | null;
            text_matches?: components["schemas"]["search-result-text-matches"];
            blog?: string | null;
            company?: string | null;
            /** Format: date-time */
            suspended_at?: string | null;
            user_view_type?: string;
        };
        /**
         * Private User
         * @description Private User
         */
        "private-user": {
            /** @example octocat */
            login: string;
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            user_view_type: "private";
            /** @example MDQ6VXNlcjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /** @example 41d064eb2195891e12d0413f63227ea7 */
            gravatar_id: string | null;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/octocat
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/followers
             */
            followers_url: string;
            /** @example https://api.github.com/users/octocat/following{/other_user} */
            following_url: string;
            /** @example https://api.github.com/users/octocat/gists{/gist_id} */
            gists_url: string;
            /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
            starred_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/orgs
             */
            organizations_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/repos
             */
            repos_url: string;
            /** @example https://api.github.com/users/octocat/events{/privacy} */
            events_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/users/octocat/received_events
             */
            received_events_url: string;
            /** @example User */
            type: string;
            site_admin: boolean;
            /** @example monalisa octocat */
            name: string | null;
            /** @example GitHub */
            company: string | null;
            /** @example https://github.com/blog */
            blog: string | null;
            /** @example San Francisco */
            location: string | null;
            /**
             * Format: email
             * @example octocat@github.com
             */
            email: string | null;
            /**
             * Format: email
             * @example octocat@github.com
             */
            notification_email?: string | null;
            hireable: boolean | null;
            /** @example There once was... */
            bio: string | null;
            /** @example monalisa */
            twitter_username?: string | null;
            /** @example 2 */
            public_repos: number;
            /** @example 1 */
            public_gists: number;
            /** @example 20 */
            followers: number;
            /** @example 0 */
            following: number;
            /**
             * Format: date-time
             * @example 2008-01-14T04:33:35Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2008-01-14T04:33:35Z
             */
            updated_at: string;
            /** @example 81 */
            private_gists: number;
            /** @example 100 */
            total_private_repos: number;
            /** @example 100 */
            owned_private_repos: number;
            /** @example 10000 */
            disk_usage: number;
            /** @example 8 */
            collaborators: number;
            /** @example true */
            two_factor_authentication: boolean;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            business_plus?: boolean;
            ldap_dn?: string;
        };
        /**
         * Codespaces Secret
         * @description Secrets for a GitHub Codespace.
         */
        "codespaces-secret": {
            /**
             * @description The name of the secret
             * @example SECRET_NAME
             */
            name: string;
            /**
             * Format: date-time
             * @description The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
             */
            updated_at: string;
            /**
             * @description The type of repositories in the organization that the secret is visible to
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /**
             * Format: uri
             * @description The API URL at which the list of repositories this secret is visible to can be retrieved
             * @example https://api.github.com/user/secrets/SECRET_NAME/repositories
             */
            selected_repositories_url: string;
        };
        /**
         * CodespacesUserPublicKey
         * @description The public key used for setting user Codespaces' Secrets.
         */
        "codespaces-user-public-key": {
            /**
             * @description The identifier for the key.
             * @example 1234567
             */
            key_id: string;
            /**
             * @description The Base64 encoded public key.
             * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
        };
        /**
         * Fetches information about an export of a codespace.
         * @description An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
         */
        "codespace-export-details": {
            /**
             * @description State of the latest export
             * @example succeeded | failed | in_progress
             */
            state?: string | null;
            /**
             * Format: date-time
             * @description Completion time of the last export operation
             * @example 2021-01-01T19:01:12Z
             */
            completed_at?: string | null;
            /**
             * @description Name of the exported branch
             * @example codespace-monalisa-octocat-hello-world-g4wpq6h95q
             */
            branch?: string | null;
            /**
             * @description Git commit SHA of the exported branch
             * @example fd95a81ca01e48ede9f39c799ecbcef817b8a3b2
             */
            sha?: string | null;
            /**
             * @description Id for the export details
             * @example latest
             */
            id?: string;
            /**
             * @description Url for fetching export details
             * @example https://api.github.com/user/codespaces/:name/exports/latest
             */
            export_url?: string;
            /**
             * @description Web url for the exported branch
             * @example https://github.com/octocat/hello-world/tree/:branch
             */
            html_url?: string | null;
        };
        /**
         * Codespace
         * @description A codespace.
         */
        "codespace-with-full-repository": {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /**
             * @description Automatically generated name of this codespace.
             * @example monalisa-octocat-hello-world-g4wpq6h95q
             */
            name: string;
            /**
             * @description Display name for this codespace.
             * @example bookish space pancake
             */
            display_name?: string | null;
            /**
             * @description UUID identifying this codespace's environment.
             * @example 26a7c758-7299-4a73-b978-5a92a7ae98a0
             */
            environment_id: string | null;
            owner: components["schemas"]["simple-user"];
            billable_owner: components["schemas"]["simple-user"];
            repository: components["schemas"]["full-repository"];
            machine: components["schemas"]["nullable-codespace-machine"];
            /**
             * @description Path to devcontainer.json from repo root used to create Codespace.
             * @example .devcontainer/example/devcontainer.json
             */
            devcontainer_path?: string | null;
            /**
             * @description Whether the codespace was created from a prebuild.
             * @example false
             */
            prebuild: boolean | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description Last known time this codespace was started.
             * @example 2011-01-26T19:01:12Z
             */
            last_used_at: string;
            /**
             * @description State of this codespace.
             * @example Available
             * @enum {string}
             */
            state: "Unknown" | "Created" | "Queued" | "Provisioning" | "Available" | "Awaiting" | "Unavailable" | "Deleted" | "Moved" | "Shutdown" | "Archived" | "Starting" | "ShuttingDown" | "Failed" | "Exporting" | "Updating" | "Rebuilding";
            /**
             * Format: uri
             * @description API URL for this codespace.
             */
            url: string;
            /** @description Details about the codespace's git repository. */
            git_status: {
                /**
                 * @description The number of commits the local repository is ahead of the remote.
                 * @example 0
                 */
                ahead?: number;
                /**
                 * @description The number of commits the local repository is behind the remote.
                 * @example 0
                 */
                behind?: number;
                /** @description Whether the local repository has unpushed changes. */
                has_unpushed_changes?: boolean;
                /** @description Whether the local repository has uncommitted changes. */
                has_uncommitted_changes?: boolean;
                /**
                 * @description The current branch (or SHA if in detached HEAD state) of the local repository.
                 * @example main
                 */
                ref?: string;
            };
            /**
             * @description The initally assigned location of a new codespace.
             * @example WestUs2
             * @enum {string}
             */
            location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
            /**
             * @description The number of minutes of inactivity after which this codespace will be automatically stopped.
             * @example 60
             */
            idle_timeout_minutes: number | null;
            /**
             * Format: uri
             * @description URL to access this codespace on the web.
             */
            web_url: string;
            /**
             * Format: uri
             * @description API URL to access available alternate machine types for this codespace.
             */
            machines_url: string;
            /**
             * Format: uri
             * @description API URL to start this codespace.
             */
            start_url: string;
            /**
             * Format: uri
             * @description API URL to stop this codespace.
             */
            stop_url: string;
            /**
             * Format: uri
             * @description API URL to publish this codespace to a new repository.
             */
            publish_url?: string | null;
            /**
             * Format: uri
             * @description API URL for the Pull Request associated with this codespace, if any.
             */
            pulls_url: string | null;
            recent_folders: string[];
            runtime_constraints?: {
                /** @description The privacy settings a user can select from when forwarding a port. */
                allowed_port_privacy_settings?: string[] | null;
            };
            /** @description Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
            pending_operation?: boolean | null;
            /** @description Text to show user when codespace is disabled by a pending operation */
            pending_operation_disabled_reason?: string | null;
            /** @description Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
            idle_timeout_notice?: string | null;
            /**
             * @description Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
             * @example 60
             */
            retention_period_minutes?: number | null;
            /**
             * Format: date-time
             * @description When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
             * @example 2011-01-26T20:01:12Z
             */
            retention_expires_at?: string | null;
        };
        /**
         * Email
         * @description Email
         */
        email: {
            /**
             * Format: email
             * @example octocat@github.com
             */
            email: string;
            /** @example true */
            primary: boolean;
            /** @example true */
            verified: boolean;
            /** @example public */
            visibility: string | null;
        };
        /**
         * GPG Key
         * @description A unique encryption key
         */
        "gpg-key": {
            /**
             * Format: int64
             * @example 3
             */
            id: number;
            /** @example Octocat's GPG Key */
            name?: string | null;
            primary_key_id: number | null;
            /** @example 3262EFF25BA0D270 */
            key_id: string;
            /** @example xsBNBFayYZ... */
            public_key: string;
            /** @example [
             *       {
             *         "email": "octocat@users.noreply.github.com",
             *         "verified": true
             *       }
             *     ] */
            emails: {
                email?: string;
                verified?: boolean;
            }[];
            /** @example [
             *       {
             *         "id": 4,
             *         "primary_key_id": 3,
             *         "key_id": "4A595D4C72EE49C7",
             *         "public_key": "zsBNBFayYZ...",
             *         "emails": [],
             *         "can_sign": false,
             *         "can_encrypt_comms": true,
             *         "can_encrypt_storage": true,
             *         "can_certify": false,
             *         "created_at": "2016-03-24T11:31:04-06:00",
             *         "expires_at": null,
             *         "revoked": false
             *       }
             *     ] */
            subkeys: {
                /** Format: int64 */
                id?: number;
                primary_key_id?: number;
                key_id?: string;
                public_key?: string;
                emails?: {
                    email?: string;
                    verified?: boolean;
                }[];
                subkeys?: unknown[];
                can_sign?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_certify?: boolean;
                created_at?: string;
                expires_at?: string | null;
                raw_key?: string | null;
                revoked?: boolean;
            }[];
            /** @example true */
            can_sign: boolean;
            can_encrypt_comms: boolean;
            can_encrypt_storage: boolean;
            /** @example true */
            can_certify: boolean;
            /**
             * Format: date-time
             * @example 2016-03-24T11:31:04-06:00
             */
            created_at: string;
            /** Format: date-time */
            expires_at: string | null;
            /** @example true */
            revoked: boolean;
            raw_key: string | null;
        };
        /**
         * Key
         * @description Key
         */
        key: {
            key: string;
            /** Format: int64 */
            id: number;
            url: string;
            title: string;
            /** Format: date-time */
            created_at: string;
            verified: boolean;
            read_only: boolean;
        };
        /** Marketplace Account */
        "marketplace-account": {
            /** Format: uri */
            url: string;
            id: number;
            type: string;
            node_id?: string;
            login: string;
            /** Format: email */
            email?: string | null;
            /** Format: email */
            organization_billing_email?: string | null;
        };
        /**
         * User Marketplace Purchase
         * @description User Marketplace Purchase
         */
        "user-marketplace-purchase": {
            /** @example monthly */
            billing_cycle: string;
            /**
             * Format: date-time
             * @example 2017-11-11T00:00:00Z
             */
            next_billing_date: string | null;
            unit_count: number | null;
            /** @example true */
            on_free_trial: boolean;
            /**
             * Format: date-time
             * @example 2017-11-11T00:00:00Z
             */
            free_trial_ends_on: string | null;
            /**
             * Format: date-time
             * @example 2017-11-02T01:12:12Z
             */
            updated_at: string | null;
            account: components["schemas"]["marketplace-account"];
            plan: components["schemas"]["marketplace-listing-plan"];
        };
        /**
         * Social account
         * @description Social media account
         */
        "social-account": {
            /** @example linkedin */
            provider: string;
            /** @example https://www.linkedin.com/company/github/ */
            url: string;
        };
        /**
         * SSH Signing Key
         * @description A public SSH key used to sign Git commits
         */
        "ssh-signing-key": {
            key: string;
            id: number;
            title: string;
            /** Format: date-time */
            created_at: string;
        };
        /**
         * Starred Repository
         * @description Starred Repository
         */
        "starred-repository": {
            /** Format: date-time */
            starred_at: string;
            repo: components["schemas"]["repository"];
        };
        /**
         * Hovercard
         * @description Hovercard
         */
        hovercard: {
            contexts: {
                message: string;
                octicon: string;
            }[];
        };
        /**
         * Key Simple
         * @description Key Simple
         */
        "key-simple": {
            id: number;
            key: string;
            /** Format: date-time */
            created_at?: string;
        };
        "billing-usage-report-user": {
            usageItems?: {
                /** @description Date of the usage line item. */
                date: string;
                /** @description Product name. */
                product: string;
                /** @description SKU name. */
                sku: string;
                /** @description Quantity of the usage line item. */
                quantity: number;
                /** @description Unit type of the usage line item. */
                unitType: string;
                /** @description Price per unit of the usage line item. */
                pricePerUnit: number;
                /** @description Gross amount of the usage line item. */
                grossAmount: number;
                /** @description Discount amount of the usage line item. */
                discountAmount: number;
                /** @description Net amount of the usage line item. */
                netAmount: number;
                /** @description Name of the repository. */
                repositoryName?: string;
            }[];
        };
        /**
         * Enterprise
         * @description An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
         *     on an enterprise account or an organization that's part of an enterprise account. For more information,
         *     see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
         */
        "enterprise-webhooks": {
            /** @description A short description of the enterprise. */
            description?: string | null;
            /**
             * Format: uri
             * @example https://github.com/enterprises/octo-business
             */
            html_url: string;
            /**
             * Format: uri
             * @description The enterprise's website URL.
             */
            website_url?: string | null;
            /**
             * @description Unique identifier of the enterprise
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the enterprise.
             * @example Octo Business
             */
            name: string;
            /**
             * @description The slug url identifier for the enterprise.
             * @example octo-business
             */
            slug: string;
            /**
             * Format: date-time
             * @example 2019-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2019-01-26T19:14:43Z
             */
            updated_at: string | null;
            /** Format: uri */
            avatar_url: string;
        };
        /**
         * Simple Installation
         * @description The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
         *     for and sent to a GitHub App. For more information,
         *     see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
         */
        "simple-installation": {
            /**
             * @description The ID of the installation.
             * @example 1
             */
            id: number;
            /**
             * @description The global node ID of the installation.
             * @example MDQ6VXNlcjU4MzIzMQ==
             */
            node_id: string;
        };
        /**
         * Organization Simple
         * @description A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
         *     organization, or when the event occurs from activity in a repository owned by an organization.
         */
        "organization-simple-webhooks": {
            /** @example github */
            login: string;
            /** @example 1 */
            id: number;
            /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
            node_id: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github
             */
            url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/repos
             */
            repos_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/orgs/github/events
             */
            events_url: string;
            /** @example https://api.github.com/orgs/github/hooks */
            hooks_url: string;
            /** @example https://api.github.com/orgs/github/issues */
            issues_url: string;
            /** @example https://api.github.com/orgs/github/members{/member} */
            members_url: string;
            /** @example https://api.github.com/orgs/github/public_members{/member} */
            public_members_url: string;
            /** @example https://github.com/images/error/octocat_happy.gif */
            avatar_url: string;
            /** @example A great organization */
            description: string | null;
        };
        /**
         * Repository
         * @description The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
         *     when the event occurs from activity in a repository.
         */
        "repository-webhooks": {
            /**
             * Format: int64
             * @description Unique identifier of the repository
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Team Environment
             */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            organization?: components["schemas"]["nullable-simple-user"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            /** @example git:github.com/octocat/Hello-World.git */
            git_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            /** @example git@github.com:octocat/Hello-World.git */
            ssh_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            /** @example https://github.com/octocat/Hello-World.git */
            clone_url: string;
            /**
             * Format: uri
             * @example git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            /**
             * Format: uri
             * @example https://svn.github.com/octocat/Hello-World
             */
            svn_url: string;
            /**
             * Format: uri
             * @example https://github.com
             */
            homepage: string | null;
            language: string | null;
            /** @example 9 */
            forks_count: number;
            /** @example 80 */
            stargazers_count: number;
            /** @example 80 */
            watchers_count: number;
            /**
             * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
             * @example 108
             */
            size: number;
            /**
             * @description The default branch of the repository.
             * @example master
             */
            default_branch: string;
            /** @example 0 */
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             * @example true
             */
            is_template: boolean;
            topics?: string[];
            /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
            custom_properties?: {
                [key: string]: unknown;
            };
            /**
             * @description Whether issues are enabled.
             * @default true
             * @example true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             * @example true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             * @example true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @description Whether downloads are enabled.
             * @default true
             * @example true
             */
            has_downloads: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             * @example true
             */
            has_discussions: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             * @example true
             */
            allow_rebase_merge: boolean;
            template_repository?: {
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                allow_auto_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                use_squash_pr_title_as_default?: boolean;
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 *     - `PR_TITLE` - default to the pull request's title.
                 *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 *     - `PR_BODY` - default to the pull request's body.
                 *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 *     - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 *     - `PR_TITLE` - default to the pull request's title.
                 *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /**
                 * @description The default value for a merge commit message.
                 *
                 *     - `PR_TITLE` - default to the pull request's title.
                 *     - `PR_BODY` - default to the pull request's body.
                 *     - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            } | null;
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             * @example true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to allow Auto-merge to be used on pull requests.
             * @default false
             * @example false
             */
            allow_auto_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             * @example false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
             * @default false
             * @example false
             */
            allow_update_branch: boolean;
            /**
             * @deprecated
             * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default: boolean;
            /**
             * @description The default value for a squash merge commit title:
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            /**
             * @description The default value for a squash merge commit message:
             *
             *     - `PR_BODY` - default to the pull request's body.
             *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @description The default value for a merge commit message.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `PR_BODY` - default to the pull request's body.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             * @example true
             */
            allow_merge_commit: boolean;
            /** @description Whether to allow forking this repo */
            allow_forking?: boolean;
            /**
             * @description Whether to require contributors to sign off on web-based commits
             * @default false
             */
            web_commit_signoff_required: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            /** @example "2020-07-09T00:17:42Z" */
            starred_at?: string;
            /** @description Whether anonymous git access is enabled for this repository */
            anonymous_access_enabled?: boolean;
        };
        /**
         * branch protection rule
         * @description The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
         */
        webhooks_rule: {
            admin_enforced: boolean;
            /** @enum {string} */
            allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
            /** @enum {string} */
            allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
            authorized_actor_names: string[];
            authorized_actors_only: boolean;
            authorized_dismissal_actors_only: boolean;
            create_protected?: boolean;
            /** Format: date-time */
            created_at: string;
            dismiss_stale_reviews_on_push: boolean;
            id: number;
            ignore_approvals_from_contributors: boolean;
            /** @enum {string} */
            linear_history_requirement_enforcement_level: "off" | "non_admins" | "everyone";
            /**
             * @description The enforcement level of the branch lock setting. `off` means the branch is not locked, `non_admins` means the branch is read-only for non_admins, and `everyone` means the branch is read-only for everyone.
             * @enum {string}
             */
            lock_branch_enforcement_level: "off" | "non_admins" | "everyone";
            /** @description Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks. */
            lock_allows_fork_sync?: boolean;
            /** @enum {string} */
            merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
            name: string;
            /** @enum {string} */
            pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
            repository_id: number;
            require_code_owner_review: boolean;
            /** @description Whether the most recent push must be approved by someone other than the person who pushed it */
            require_last_push_approval?: boolean;
            required_approving_review_count: number;
            /** @enum {string} */
            required_conversation_resolution_level: "off" | "non_admins" | "everyone";
            /** @enum {string} */
            required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
            required_status_checks: string[];
            /** @enum {string} */
            required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
            /** @enum {string} */
            signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
            strict_required_status_checks_policy: boolean;
            /** Format: date-time */
            updated_at: string;
        };
        /** @description A suite of checks performed on the code of a given code change */
        "simple-check-suite": {
            /** @example d6fde92930d4715a2b49857d24b940956b26d2d3 */
            after?: string | null;
            app?: components["schemas"]["integration"];
            /** @example 146e867f55c26428e5f9fade55a9bbf5e95a7912 */
            before?: string | null;
            /**
             * @example neutral
             * @enum {string|null}
             */
            conclusion?: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | "stale" | "startup_failure" | null;
            /** Format: date-time */
            created_at?: string;
            /** @example master */
            head_branch?: string | null;
            /**
             * @description The SHA of the head commit that is being checked.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha?: string;
            /** @example 5 */
            id?: number;
            /** @example MDEwOkNoZWNrU3VpdGU1 */
            node_id?: string;
            pull_requests?: components["schemas"]["pull-request-minimal"][];
            repository?: components["schemas"]["minimal-repository"];
            /**
             * @example completed
             * @enum {string}
             */
            status?: "queued" | "in_progress" | "completed" | "pending" | "waiting";
            /** Format: date-time */
            updated_at?: string;
            /** @example https://api.github.com/repos/github/hello-world/check-suites/5 */
            url?: string;
        };
        /**
         * CheckRun
         * @description A check performed on the code of a given code change
         */
        "check-run-with-simple-check-suite": {
            app: components["schemas"]["integration"];
            check_suite: components["schemas"]["simple-check-suite"];
            /**
             * Format: date-time
             * @example 2018-05-04T01:14:52Z
             */
            completed_at: string | null;
            /**
             * @example neutral
             * @enum {string|null}
             */
            conclusion: "waiting" | "pending" | "startup_failure" | "stale" | "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
            deployment?: components["schemas"]["deployment-simple"];
            /** @example https://example.com */
            details_url: string;
            /** @example 42 */
            external_id: string;
            /**
             * @description The SHA of the commit that is being checked.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /** @example https://github.com/github/hello-world/runs/4 */
            html_url: string;
            /**
             * @description The id of the check.
             * @example 21
             */
            id: number;
            /**
             * @description The name of the check.
             * @example test-coverage
             */
            name: string;
            /** @example MDg6Q2hlY2tSdW40 */
            node_id: string;
            output: {
                annotations_count: number;
                /** Format: uri */
                annotations_url: string;
                summary: string | null;
                text: string | null;
                title: string | null;
            };
            pull_requests: components["schemas"]["pull-request-minimal"][];
            /**
             * Format: date-time
             * @example 2018-05-04T01:14:52Z
             */
            started_at: string;
            /**
             * @description The phase of the lifecycle that the check is currently in.
             * @example queued
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed" | "pending";
            /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
            url: string;
        };
        /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
        webhooks_code_scanning_commit_oid: string;
        /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
        webhooks_code_scanning_ref: string;
        /** @description The pusher type for the event. Can be either `user` or a deploy key. */
        webhooks_deploy_pusher_type: string;
        /** @description The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
        webhooks_ref_0: string;
        /** @description The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
        webhooks_deploy_key: {
            added_by?: string | null;
            created_at: string;
            id: number;
            key: string;
            last_used?: string | null;
            read_only: boolean;
            title: string;
            /** Format: uri */
            url: string;
            verified: boolean;
            enabled?: boolean;
        };
        /** Workflow */
        webhooks_workflow: {
            /** Format: uri */
            badge_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            node_id: string;
            path: string;
            state: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
        } | null;
        webhooks_approver: {
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: number;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
            user_view_type?: string;
        };
        webhooks_reviewers: {
            /** User */
            reviewer?: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
            } | null;
            /** @enum {string} */
            type?: "User";
        }[];
        webhooks_workflow_job_run: {
            conclusion: unknown;
            created_at: string;
            environment: string;
            html_url: string;
            id: number;
            name: unknown;
            status: string;
            updated_at: string;
        };
        /** User */
        webhooks_user: {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            /** Format: int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
            user_view_type?: string;
        } | null;
        webhooks_answer: {
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            body: string;
            child_comment_count: number;
            /** Format: date-time */
            created_at: string;
            discussion_id: number;
            html_url: string;
            id: number;
            node_id: string;
            parent_id: unknown;
            /** Reactions */
            reactions?: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            repository_url: string;
            /** Format: date-time */
            updated_at: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /**
         * Discussion
         * @description A Discussion in a repository.
         */
        discussion: {
            active_lock_reason: string | null;
            answer_chosen_at: string | null;
            /** User */
            answer_chosen_by: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            answer_html_url: string | null;
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            body: string;
            category: {
                /** Format: date-time */
                created_at: string;
                description: string;
                emoji: string;
                id: number;
                is_answerable: boolean;
                name: string;
                node_id?: string;
                repository_id: number;
                slug: string;
                updated_at: string;
            };
            comments: number;
            /** Format: date-time */
            created_at: string;
            html_url: string;
            id: number;
            locked: boolean;
            node_id: string;
            number: number;
            /** Reactions */
            reactions?: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            repository_url: string;
            /**
             * @description The current state of the discussion.
             *     `converting` means that the discussion is being converted from an issue.
             *     `transferring` means that the discussion is being transferred from another repository.
             * @enum {string}
             */
            state: "open" | "closed" | "locked" | "converting" | "transferring";
            /**
             * @description The reason for the current state
             * @example resolved
             * @enum {string|null}
             */
            state_reason: "resolved" | "outdated" | "duplicate" | "reopened" | null;
            timeline_url?: string;
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            labels?: components["schemas"]["label"][];
        };
        webhooks_comment: {
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            body: string;
            child_comment_count: number;
            created_at: string;
            discussion_id: number;
            html_url: string;
            id: number;
            node_id: string;
            parent_id: number | null;
            /** Reactions */
            reactions: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            repository_url: string;
            updated_at: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /** Label */
        webhooks_label: {
            /** @description 6-character hex code, without the leading #, identifying the color */
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            /** @description The name of the label. */
            name: string;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the label
             */
            url: string;
        };
        /** @description An array of repository objects that the installation can access. */
        webhooks_repositories: {
            full_name: string;
            /** @description Unique identifier of the repository */
            id: number;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** @description Whether the repository is private or public. */
            private: boolean;
        }[];
        /** @description An array of repository objects, which were added to the installation. */
        webhooks_repositories_added: {
            full_name: string;
            /** @description Unique identifier of the repository */
            id: number;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** @description Whether the repository is private or public. */
            private: boolean;
        }[];
        /**
         * @description Describe whether all repositories have been selected or there's a selection involved
         * @enum {string}
         */
        webhooks_repository_selection: "all" | "selected";
        /**
         * issue comment
         * @description The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
         */
        webhooks_issue_comment: {
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            /** @description Contents of the issue comment */
            body: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            /**
             * Format: int64
             * @description Unique identifier of the issue comment
             */
            id: number;
            /** Format: uri */
            issue_url: string;
            node_id: string;
            performed_via_github_app: components["schemas"]["integration"];
            /** Reactions */
            reactions: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            /** Format: date-time */
            updated_at: string;
            /**
             * Format: uri
             * @description URL for the issue comment
             */
            url: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /** @description The changes to the comment. */
        webhooks_changes: {
            body?: {
                /** @description The previous version of the body. */
                from: string;
            };
        };
        /**
         * Issue
         * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
         */
        webhooks_issue: {
            /** @enum {string|null} */
            active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
            /** User */
            assignee?: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            assignees: ({
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null)[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            /** @description Contents of the issue */
            body: string | null;
            /** Format: date-time */
            closed_at: string | null;
            comments: number;
            /** Format: uri */
            comments_url: string;
            /** Format: date-time */
            created_at: string;
            draft?: boolean;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            /** Format: int64 */
            id: number;
            labels?: {
                /** @description 6-character hex code, without the leading #, identifying the color */
                color: string;
                default: boolean;
                description: string | null;
                id: number;
                /** @description The name of the label. */
                name: string;
                node_id: string;
                /**
                 * Format: uri
                 * @description URL for the label
                 */
                url: string;
            }[];
            /** Format: uri-template */
            labels_url: string;
            locked?: boolean;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: {
                /** Format: date-time */
                closed_at: string | null;
                closed_issues: number;
                /** Format: date-time */
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                description: string | null;
                /** Format: date-time */
                due_on: string | null;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                labels_url: string;
                node_id: string;
                /** @description The number of the milestone. */
                number: number;
                open_issues: number;
                /**
                 * @description The state of the milestone.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** @description The title of the milestone. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
            } | null;
            node_id: string;
            number: number;
            /**
             * App
             * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            performed_via_github_app?: {
                /** Format: date-time */
                created_at: string | null;
                description: string | null;
                /** @description The list of events for the GitHub app */
                events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "pull_request_review_thread")[];
                /** Format: uri */
                external_url: string | null;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the GitHub app */
                id: number | null;
                /** @description The name of the GitHub app */
                name: string;
                node_id: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** @description The set of permissions for the GitHub app */
                permissions?: {
                    /** @enum {string} */
                    actions?: "read" | "write";
                    /** @enum {string} */
                    administration?: "read" | "write";
                    /** @enum {string} */
                    checks?: "read" | "write";
                    /** @enum {string} */
                    content_references?: "read" | "write";
                    /** @enum {string} */
                    contents?: "read" | "write";
                    /** @enum {string} */
                    deployments?: "read" | "write";
                    /** @enum {string} */
                    discussions?: "read" | "write";
                    /** @enum {string} */
                    emails?: "read" | "write";
                    /** @enum {string} */
                    environments?: "read" | "write";
                    /** @enum {string} */
                    issues?: "read" | "write";
                    /** @enum {string} */
                    keys?: "read" | "write";
                    /** @enum {string} */
                    members?: "read" | "write";
                    /** @enum {string} */
                    metadata?: "read" | "write";
                    /** @enum {string} */
                    organization_administration?: "read" | "write";
                    /** @enum {string} */
                    organization_hooks?: "read" | "write";
                    /** @enum {string} */
                    organization_packages?: "read" | "write";
                    /** @enum {string} */
                    organization_plan?: "read" | "write";
                    /** @enum {string} */
                    organization_projects?: "read" | "write" | "admin";
                    /** @enum {string} */
                    organization_secrets?: "read" | "write";
                    /** @enum {string} */
                    organization_self_hosted_runners?: "read" | "write";
                    /** @enum {string} */
                    organization_user_blocking?: "read" | "write";
                    /** @enum {string} */
                    packages?: "read" | "write";
                    /** @enum {string} */
                    pages?: "read" | "write";
                    /** @enum {string} */
                    pull_requests?: "read" | "write";
                    /** @enum {string} */
                    repository_hooks?: "read" | "write";
                    /** @enum {string} */
                    repository_projects?: "read" | "write";
                    /** @enum {string} */
                    secret_scanning_alerts?: "read" | "write";
                    /** @enum {string} */
                    secrets?: "read" | "write";
                    /** @enum {string} */
                    security_events?: "read" | "write";
                    /** @enum {string} */
                    security_scanning_alert?: "read" | "write";
                    /** @enum {string} */
                    single_file?: "read" | "write";
                    /** @enum {string} */
                    statuses?: "read" | "write";
                    /** @enum {string} */
                    team_discussions?: "read" | "write";
                    /** @enum {string} */
                    vulnerability_alerts?: "read" | "write";
                    /** @enum {string} */
                    workflows?: "read" | "write";
                };
                /** @description The slug name of the GitHub app */
                slug?: string;
                /** Format: date-time */
                updated_at: string | null;
            } | null;
            pull_request?: {
                /** Format: uri */
                diff_url?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                patch_url?: string;
                /** Format: uri */
                url?: string;
            };
            /** Reactions */
            reactions: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            /** Format: uri */
            repository_url: string;
            /** Sub-issues Summary */
            sub_issues_summary?: {
                total: number;
                completed: number;
                percent_completed: number;
            };
            /**
             * @description State of the issue; either 'open' or 'closed'
             * @enum {string}
             */
            state?: "open" | "closed";
            state_reason?: string | null;
            /** Format: uri */
            timeline_url?: string;
            /** @description Title of the issue */
            title: string;
            type?: components["schemas"]["issue-type"];
            /** Format: date-time */
            updated_at: string;
            /**
             * Format: uri
             * @description URL for the issue
             */
            url: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        webhooks_milestone: {
            /** Format: date-time */
            closed_at: string | null;
            closed_issues: number;
            /** Format: date-time */
            created_at: string;
            /** User */
            creator: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            description: string | null;
            /** Format: date-time */
            due_on: string | null;
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            labels_url: string;
            node_id: string;
            /** @description The number of the milestone. */
            number: number;
            open_issues: number;
            /**
             * @description The state of the milestone.
             * @enum {string}
             */
            state: "open" | "closed";
            /** @description The title of the milestone. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
        };
        /**
         * Issue
         * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
         */
        webhooks_issue_2: {
            /** @enum {string|null} */
            active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
            /** User */
            assignee?: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            assignees: ({
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null)[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            /** @description Contents of the issue */
            body: string | null;
            /** Format: date-time */
            closed_at: string | null;
            comments: number;
            /** Format: uri */
            comments_url: string;
            /** Format: date-time */
            created_at: string;
            draft?: boolean;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            /** Format: int64 */
            id: number;
            labels?: {
                /** @description 6-character hex code, without the leading #, identifying the color */
                color: string;
                default: boolean;
                description: string | null;
                id: number;
                /** @description The name of the label. */
                name: string;
                node_id: string;
                /**
                 * Format: uri
                 * @description URL for the label
                 */
                url: string;
            }[];
            /** Format: uri-template */
            labels_url: string;
            locked?: boolean;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: {
                /** Format: date-time */
                closed_at: string | null;
                closed_issues: number;
                /** Format: date-time */
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                description: string | null;
                /** Format: date-time */
                due_on: string | null;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                labels_url: string;
                node_id: string;
                /** @description The number of the milestone. */
                number: number;
                open_issues: number;
                /**
                 * @description The state of the milestone.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** @description The title of the milestone. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
            } | null;
            node_id: string;
            number: number;
            /**
             * App
             * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            performed_via_github_app?: {
                /** Format: date-time */
                created_at: string | null;
                description: string | null;
                /** @description The list of events for the GitHub app */
                events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[];
                /** Format: uri */
                external_url: string | null;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the GitHub app */
                id: number | null;
                /** @description The name of the GitHub app */
                name: string;
                node_id: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** @description The set of permissions for the GitHub app */
                permissions?: {
                    /** @enum {string} */
                    actions?: "read" | "write";
                    /** @enum {string} */
                    administration?: "read" | "write";
                    /** @enum {string} */
                    checks?: "read" | "write";
                    /** @enum {string} */
                    content_references?: "read" | "write";
                    /** @enum {string} */
                    contents?: "read" | "write";
                    /** @enum {string} */
                    deployments?: "read" | "write";
                    /** @enum {string} */
                    discussions?: "read" | "write";
                    /** @enum {string} */
                    emails?: "read" | "write";
                    /** @enum {string} */
                    environments?: "read" | "write";
                    /** @enum {string} */
                    issues?: "read" | "write";
                    /** @enum {string} */
                    keys?: "read" | "write";
                    /** @enum {string} */
                    members?: "read" | "write";
                    /** @enum {string} */
                    metadata?: "read" | "write";
                    /** @enum {string} */
                    organization_administration?: "read" | "write";
                    /** @enum {string} */
                    organization_hooks?: "read" | "write";
                    /** @enum {string} */
                    organization_packages?: "read" | "write";
                    /** @enum {string} */
                    organization_plan?: "read" | "write";
                    /** @enum {string} */
                    organization_projects?: "read" | "write";
                    /** @enum {string} */
                    organization_secrets?: "read" | "write";
                    /** @enum {string} */
                    organization_self_hosted_runners?: "read" | "write";
                    /** @enum {string} */
                    organization_user_blocking?: "read" | "write";
                    /** @enum {string} */
                    packages?: "read" | "write";
                    /** @enum {string} */
                    pages?: "read" | "write";
                    /** @enum {string} */
                    pull_requests?: "read" | "write";
                    /** @enum {string} */
                    repository_hooks?: "read" | "write";
                    /** @enum {string} */
                    repository_projects?: "read" | "write";
                    /** @enum {string} */
                    secret_scanning_alerts?: "read" | "write";
                    /** @enum {string} */
                    secrets?: "read" | "write";
                    /** @enum {string} */
                    security_events?: "read" | "write";
                    /** @enum {string} */
                    security_scanning_alert?: "read" | "write";
                    /** @enum {string} */
                    single_file?: "read" | "write";
                    /** @enum {string} */
                    statuses?: "read" | "write";
                    /** @enum {string} */
                    team_discussions?: "read" | "write";
                    /** @enum {string} */
                    vulnerability_alerts?: "read" | "write";
                    /** @enum {string} */
                    workflows?: "read" | "write";
                };
                /** @description The slug name of the GitHub app */
                slug?: string;
                /** Format: date-time */
                updated_at: string | null;
            } | null;
            pull_request?: {
                /** Format: uri */
                diff_url?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                patch_url?: string;
                /** Format: uri */
                url?: string;
            };
            /** Reactions */
            reactions: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            /** Format: uri */
            repository_url: string;
            /** Sub-issues Summary */
            sub_issues_summary?: {
                total: number;
                completed: number;
                percent_completed: number;
            };
            /**
             * @description State of the issue; either 'open' or 'closed'
             * @enum {string}
             */
            state?: "open" | "closed";
            state_reason?: string | null;
            /** Format: uri */
            timeline_url?: string;
            /** @description Title of the issue */
            title: string;
            type?: components["schemas"]["issue-type"];
            /** Format: date-time */
            updated_at: string;
            /**
             * Format: uri
             * @description URL for the issue
             */
            url: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /** User */
        webhooks_user_mannequin: {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** Format: uri */
            url?: string;
            user_view_type?: string;
        } | null;
        /** Marketplace Purchase */
        webhooks_marketplace_purchase: {
            account: {
                id: number;
                login: string;
                node_id: string;
                organization_billing_email: string | null;
                type: string;
            };
            billing_cycle: string;
            free_trial_ends_on: string | null;
            next_billing_date: string | null;
            on_free_trial: boolean;
            plan: {
                bullets: (string | null)[];
                description: string;
                has_free_trial: boolean;
                id: number;
                monthly_price_in_cents: number;
                name: string;
                /** @enum {string} */
                price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
                unit_name: string | null;
                yearly_price_in_cents: number;
            };
            unit_count: number;
        };
        /** Marketplace Purchase */
        webhooks_previous_marketplace_purchase: {
            account: {
                id: number;
                login: string;
                node_id: string;
                organization_billing_email: string | null;
                type: string;
            };
            billing_cycle: string;
            free_trial_ends_on: unknown;
            next_billing_date?: string | null;
            on_free_trial: boolean;
            plan: {
                bullets: string[];
                description: string;
                has_free_trial: boolean;
                id: number;
                monthly_price_in_cents: number;
                name: string;
                /** @enum {string} */
                price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
                unit_name: string | null;
                yearly_price_in_cents: number;
            };
            unit_count: number;
        };
        /**
         * Team
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        webhooks_team: {
            deleted?: boolean;
            /** @description Description of the team */
            description?: string | null;
            /** Format: uri */
            html_url?: string;
            /** @description Unique identifier of the team */
            id: number;
            /** Format: uri-template */
            members_url?: string;
            /** @description Name of the team */
            name: string;
            node_id?: string;
            parent?: {
                /** @description Description of the team */
                description: string | null;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /**
                 * @description Whether team members will receive notifications when their team is @mentioned
                 * @enum {string}
                 */
                notification_setting: "notifications_enabled" | "notifications_disabled";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
            } | null;
            /** @description Permission that the team will have for its repositories */
            permission?: string;
            /** @enum {string} */
            privacy?: "open" | "closed" | "secret";
            /** @enum {string} */
            notification_setting?: "notifications_enabled" | "notifications_disabled";
            /** Format: uri */
            repositories_url?: string;
            slug?: string;
            /**
             * Format: uri
             * @description URL for the team
             */
            url?: string;
        };
        /**
         * Merge Group
         * @description A group of pull requests that the merge queue has grouped together to be merged.
         */
        "merge-group": {
            /** @description The SHA of the merge group. */
            head_sha: string;
            /** @description The full ref of the merge group. */
            head_ref: string;
            /** @description The SHA of the merge group's parent commit. */
            base_sha: string;
            /** @description The full ref of the branch the merge group will be merged into. */
            base_ref: string;
            head_commit: components["schemas"]["simple-commit"];
        };
        /**
         * Repository
         * @description The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
         *     when the event occurs from activity in a repository.
         */
        "nullable-repository-webhooks": {
            /**
             * Format: int64
             * @description Unique identifier of the repository
             * @example 42
             */
            id: number;
            /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
            node_id: string;
            /**
             * @description The name of the repository.
             * @example Team Environment
             */
            name: string;
            /** @example octocat/Hello-World */
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            organization?: components["schemas"]["nullable-simple-user"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /**
             * Format: uri
             * @example https://github.com/octocat/Hello-World
             */
            html_url: string;
            /** @example This your first repo! */
            description: string | null;
            fork: boolean;
            /**
             * Format: uri
             * @example https://api.github.com/repos/octocat/Hello-World
             */
            url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
            archive_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
            assignees_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
            blobs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
            branches_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
            collaborators_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
            comments_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
            commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
            compare_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
            contents_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
            git_commits_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
            git_refs_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
            git_tags_url: string;
            /** @example git:github.com/octocat/Hello-World.git */
            git_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
            issue_comment_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
            issue_events_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
            issues_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
            keys_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
            labels_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
            milestones_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
            notifications_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
            pulls_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
            releases_url: string;
            /** @example git@github.com:octocat/Hello-World.git */
            ssh_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
            statuses_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string;
            /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
            trees_url: string;
            /** @example https://github.com/octocat/Hello-World.git */
            clone_url: string;
            /**
             * Format: uri
             * @example git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null;
            /**
             * Format: uri
             * @example http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string;
            /**
             * Format: uri
             * @example https://svn.github.com/octocat/Hello-World
             */
            svn_url: string;
            /**
             * Format: uri
             * @example https://github.com
             */
            homepage: string | null;
            language: string | null;
            /** @example 9 */
            forks_count: number;
            /** @example 80 */
            stargazers_count: number;
            /** @example 80 */
            watchers_count: number;
            /**
             * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
             * @example 108
             */
            size: number;
            /**
             * @description The default branch of the repository.
             * @example master
             */
            default_branch: string;
            /** @example 0 */
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             * @example true
             */
            is_template: boolean;
            topics?: string[];
            /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
            custom_properties?: {
                [key: string]: unknown;
            };
            /**
             * @description Whether issues are enabled.
             * @default true
             * @example true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             * @example true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             * @example true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @description Whether downloads are enabled.
             * @default true
             * @example true
             */
            has_downloads: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             * @example true
             */
            has_discussions: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /**
             * Format: date-time
             * @example 2011-01-26T19:06:43Z
             */
            pushed_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:01:12Z
             */
            created_at: string | null;
            /**
             * Format: date-time
             * @example 2011-01-26T19:14:43Z
             */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             * @example true
             */
            allow_rebase_merge: boolean;
            template_repository?: {
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                allow_auto_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                use_squash_pr_title_as_default?: boolean;
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 *     - `PR_TITLE` - default to the pull request's title.
                 *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 *     - `PR_BODY` - default to the pull request's body.
                 *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 *     - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 *     - `PR_TITLE` - default to the pull request's title.
                 *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /**
                 * @description The default value for a merge commit message.
                 *
                 *     - `PR_TITLE` - default to the pull request's title.
                 *     - `PR_BODY` - default to the pull request's body.
                 *     - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            } | null;
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             * @example true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to allow Auto-merge to be used on pull requests.
             * @default false
             * @example false
             */
            allow_auto_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             * @example false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
             * @default false
             * @example false
             */
            allow_update_branch: boolean;
            /**
             * @deprecated
             * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default: boolean;
            /**
             * @description The default value for a squash merge commit title:
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            /**
             * @description The default value for a squash merge commit message:
             *
             *     - `PR_BODY` - default to the pull request's body.
             *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @description The default value for a merge commit message.
             *
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `PR_BODY` - default to the pull request's body.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             * @example true
             */
            allow_merge_commit: boolean;
            /** @description Whether to allow forking this repo */
            allow_forking?: boolean;
            /**
             * @description Whether to require contributors to sign off on web-based commits
             * @default false
             */
            web_commit_signoff_required: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            /** @example "2020-07-09T00:17:42Z" */
            starred_at?: string;
            /** @description Whether anonymous git access is enabled for this repository */
            anonymous_access_enabled?: boolean;
        } | null;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        webhooks_milestone_3: {
            /** Format: date-time */
            closed_at: string | null;
            closed_issues: number;
            /** Format: date-time */
            created_at: string;
            /** User */
            creator: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            description: string | null;
            /** Format: date-time */
            due_on: string | null;
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            labels_url: string;
            node_id: string;
            /** @description The number of the milestone. */
            number: number;
            open_issues: number;
            /**
             * @description The state of the milestone.
             * @enum {string}
             */
            state: "open" | "closed";
            /** @description The title of the milestone. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
        };
        /**
         * Membership
         * @description The membership between the user and the organization. Not present when the action is `member_invited`.
         */
        webhooks_membership: {
            /** Format: uri */
            organization_url: string;
            role: string;
            /**
             * @description Whether the user has direct membership in the organization.
             * @example true
             */
            direct_membership?: boolean;
            /**
             * @description The slugs of the enterprise teams providing the user with indirect membership in the organization.
             *     A limit of 100 enterprise team slugs is returned.
             * @example [
             *       "ent:team-one",
             *       "ent:team-two"
             *     ]
             */
            enterprise_teams_providing_indirect_membership?: string[];
            state: string;
            /** Format: uri */
            url: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /**
         * Personal Access Token Request
         * @description Details of a Personal Access Token Request.
         */
        "personal-access-token-request": {
            /** @description Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls. */
            id: number;
            owner: components["schemas"]["simple-user"];
            /** @description New requested permissions, categorized by type of permission. */
            permissions_added: {
                organization?: {
                    [key: string]: string;
                };
                repository?: {
                    [key: string]: string;
                };
                other?: {
                    [key: string]: string;
                };
            };
            /** @description Requested permissions that elevate access for a previously approved request for access, categorized by type of permission. */
            permissions_upgraded: {
                organization?: {
                    [key: string]: string;
                };
                repository?: {
                    [key: string]: string;
                };
                other?: {
                    [key: string]: string;
                };
            };
            /** @description Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`. */
            permissions_result: {
                organization?: {
                    [key: string]: string;
                };
                repository?: {
                    [key: string]: string;
                };
                other?: {
                    [key: string]: string;
                };
            };
            /**
             * @description Type of repository selection requested.
             * @enum {string}
             */
            repository_selection: "none" | "all" | "subset";
            /** @description The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
            repository_count: number | null;
            /** @description An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
            repositories: {
                full_name: string;
                /** @description Unique identifier of the repository */
                id: number;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** @description Whether the repository is private or public. */
                private: boolean;
            }[] | null;
            /** @description Date and time when the request for access was created. */
            created_at: string;
            /** @description Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
            token_id: number;
            /** @description The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
            token_name: string;
            /** @description Whether the associated fine-grained personal access token has expired. */
            token_expired: boolean;
            /** @description Date and time when the associated fine-grained personal access token expires. */
            token_expires_at: string | null;
            /** @description Date and time when the associated fine-grained personal access token was last used for authentication. */
            token_last_used_at: string | null;
        };
        /** Project Card */
        webhooks_project_card: {
            after_id?: number | null;
            /** @description Whether or not the card is archived */
            archived: boolean;
            column_id: number;
            /** Format: uri */
            column_url: string;
            /** Format: uri */
            content_url?: string;
            /** Format: date-time */
            created_at: string;
            /** User */
            creator: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            /** @description The project card's ID */
            id: number;
            node_id: string;
            note: string | null;
            /** Format: uri */
            project_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
        };
        /** Project */
        webhooks_project: {
            /** @description Body of the project */
            body: string | null;
            /** Format: uri */
            columns_url: string;
            /** Format: date-time */
            created_at: string;
            /** User */
            creator: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            /** Format: uri */
            html_url: string;
            id: number;
            /** @description Name of the project */
            name: string;
            node_id: string;
            number: number;
            /** Format: uri */
            owner_url: string;
            /**
             * @description State of the project; either 'open' or 'closed'
             * @enum {string}
             */
            state: "open" | "closed";
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
        };
        /** Project Column */
        webhooks_project_column: {
            after_id?: number | null;
            /** Format: uri */
            cards_url: string;
            /** Format: date-time */
            created_at: string;
            /** @description The unique identifier of the project column */
            id: number;
            /** @description Name of the project column */
            name: string;
            node_id: string;
            /** Format: uri */
            project_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
        };
        /**
         * Projects v2 Project
         * @description A projects v2 project
         */
        "projects-v2": {
            id: number;
            node_id: string;
            owner: components["schemas"]["simple-user"];
            creator: components["schemas"]["simple-user"];
            title: string;
            description: string | null;
            public: boolean;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            closed_at: string | null;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            updated_at: string;
            number: number;
            short_description: string | null;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            deleted_at: string | null;
            deleted_by: components["schemas"]["nullable-simple-user"];
        };
        webhooks_project_changes: {
            archived_at?: {
                /** Format: date-time */
                from?: string | null;
                /** Format: date-time */
                to?: string | null;
            };
        };
        /**
         * Projects v2 Item Content Type
         * @description The type of content tracked in a project item
         * @enum {string}
         */
        "projects-v2-item-content-type": "Issue" | "PullRequest" | "DraftIssue";
        /**
         * Projects v2 Item
         * @description An item belonging to a project
         */
        "projects-v2-item": {
            id: number;
            node_id?: string;
            project_node_id?: string;
            content_node_id: string;
            content_type: components["schemas"]["projects-v2-item-content-type"];
            creator?: components["schemas"]["simple-user"];
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            updated_at: string;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            archived_at: string | null;
        };
        /**
         * Projects v2 Single Select Option
         * @description An option for a single select field
         */
        "projects-v2-single-select-option": {
            id: string;
            name: string;
            color?: string | null;
            description?: string | null;
        };
        /**
         * Projects v2 Iteration Setting
         * @description An iteration setting for an iteration field
         */
        "projects-v2-iteration-setting": {
            id: string;
            title: string;
            duration?: number | null;
            start_date?: string | null;
        };
        /**
         * Projects v2 Status Update
         * @description An status update belonging to a project
         */
        "projects-v2-status-update": {
            id: number;
            node_id: string;
            project_node_id?: string;
            creator?: components["schemas"]["simple-user"];
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2022-04-28T12:00:00Z
             */
            updated_at: string;
            /** @enum {string|null} */
            status?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
            /**
             * Format: date
             * @example 2022-04-28
             */
            start_date?: string;
            /**
             * Format: date
             * @example 2022-04-28
             */
            target_date?: string;
            /**
             * @description Body of the status update
             * @example The project is off to a great start!
             */
            body?: string | null;
        };
        /** @description The pull request number. */
        webhooks_number: number;
        "pull-request-webhook": components["schemas"]["pull-request"] & {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge: boolean;
            /** @description Whether to allow updating the pull request's branch. */
            allow_update_branch?: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged.
             * @default false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description The default value for a merge commit message.
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `PR_BODY` - default to the pull request's body.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @description The default value for a squash merge commit message:
             *     - `PR_BODY` - default to the pull request's body.
             *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
             *     - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *     - `PR_TITLE` - default to the pull request's title.
             *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.**
             * @default false
             */
            use_squash_pr_title_as_default: boolean;
        };
        /** Pull Request */
        webhooks_pull_request_5: {
            _links: {
                /** Link */
                comments: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                commits: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                html: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                issue: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                review_comment: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                review_comments: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                self: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                statuses: {
                    /** Format: uri-template */
                    href: string;
                };
            };
            /** @enum {string|null} */
            active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
            additions?: number;
            /** User */
            assignee: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            assignees: ({
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
            } | null)[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            /**
             * PullRequestAutoMerge
             * @description The status of auto merging a pull request.
             */
            auto_merge: {
                /** @description Commit message for the merge commit. */
                commit_message: string | null;
                /** @description Title for the merge commit message. */
                commit_title: string | null;
                /** User */
                enabled_by: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * @description The merge method to use.
                 * @enum {string}
                 */
                merge_method: "merge" | "squash" | "rebase";
            } | null;
            base: {
                label: string;
                ref: string;
                /**
                 * Repository
                 * @description A git repository
                 */
                repo: {
                    /**
                     * @description Whether to allow auto-merge for pull requests.
                     * @default false
                     */
                    allow_auto_merge: boolean;
                    /** @description Whether to allow private forks */
                    allow_forking?: boolean;
                    /**
                     * @description Whether to allow merge commits for pull requests.
                     * @default true
                     */
                    allow_merge_commit: boolean;
                    /**
                     * @description Whether to allow rebase merges for pull requests.
                     * @default true
                     */
                    allow_rebase_merge: boolean;
                    /**
                     * @description Whether to allow squash merges for pull requests.
                     * @default true
                     */
                    allow_squash_merge: boolean;
                    allow_update_branch?: boolean;
                    /** Format: uri-template */
                    archive_url: string;
                    /**
                     * @description Whether the repository is archived.
                     * @default false
                     */
                    archived: boolean;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri */
                    clone_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    created_at: number | string;
                    /** @description The default branch of the repository. */
                    default_branch: string;
                    /**
                     * @description Whether to delete head branches when pull requests are merged
                     * @default false
                     */
                    delete_branch_on_merge: boolean;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** @description Returns whether or not this repository is disabled. */
                    disabled?: boolean;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    forks: number;
                    forks_count: number;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    git_url: string;
                    /**
                     * @description Whether downloads are enabled.
                     * @default true
                     */
                    has_downloads: boolean;
                    /**
                     * @description Whether issues are enabled.
                     * @default true
                     */
                    has_issues: boolean;
                    has_pages: boolean;
                    /**
                     * @description Whether projects are enabled.
                     * @default true
                     */
                    has_projects: boolean;
                    /**
                     * @description Whether the wiki is enabled.
                     * @default true
                     */
                    has_wiki: boolean;
                    /**
                     * @description Whether discussions are enabled.
                     * @default false
                     */
                    has_discussions: boolean;
                    homepage: string | null;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /**
                     * Format: int64
                     * @description Unique identifier of the repository
                     */
                    id: number;
                    is_template?: boolean;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    language: string | null;
                    /** Format: uri */
                    languages_url: string;
                    /** License */
                    license: {
                        key: string;
                        name: string;
                        node_id: string;
                        spdx_id: string;
                        /** Format: uri */
                        url: string | null;
                    } | null;
                    master_branch?: string;
                    /**
                     * @description The default value for a merge commit message.
                     *
                     *     - `PR_TITLE` - default to the pull request's title.
                     *     - `PR_BODY` - default to the pull request's body.
                     *     - `BLANK` - default to a blank commit message.
                     * @enum {string}
                     */
                    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                    /**
                     * @description The default value for a merge commit title.
                     *
                     *     - `PR_TITLE` - default to the pull request's title.
                     *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                     * @enum {string}
                     */
                    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** Format: uri */
                    mirror_url: string | null;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    open_issues: number;
                    open_issues_count: number;
                    organization?: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        pull: boolean;
                        push: boolean;
                        triage?: boolean;
                    };
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    public?: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    pushed_at: (number | string) | null;
                    /** Format: uri-template */
                    releases_url: string;
                    role_name?: string | null;
                    size: number;
                    /**
                     * @description The default value for a squash merge commit message:
                     *
                     *     - `PR_BODY` - default to the pull request's body.
                     *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                     *     - `BLANK` - default to a blank commit message.
                     * @enum {string}
                     */
                    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                    /**
                     * @description The default value for a squash merge commit title:
                     *
                     *     - `PR_TITLE` - default to the pull request's title.
                     *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                     * @enum {string}
                     */
                    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                    ssh_url: string;
                    stargazers?: number;
                    stargazers_count: number;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    svn_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    topics: string[];
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                    /**
                     * @description Whether a squash merge commit can use the pull request title as default.
                     * @default false
                     */
                    use_squash_pr_title_as_default: boolean;
                    /** @enum {string} */
                    visibility: "public" | "private" | "internal";
                    watchers: number;
                    watchers_count: number;
                    /** @description Whether to require contributors to sign off on web-based commits */
                    web_commit_signoff_required?: boolean;
                };
                sha: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            body: string | null;
            changed_files?: number;
            /** Format: date-time */
            closed_at: string | null;
            comments?: number;
            /** Format: uri */
            comments_url: string;
            commits?: number;
            /** Format: uri */
            commits_url: string;
            /** Format: date-time */
            created_at: string;
            deletions?: number;
            /** Format: uri */
            diff_url: string;
            /** @description Indicates whether or not the pull request is a draft. */
            draft: boolean;
            head: {
                label: string;
                ref: string;
                /**
                 * Repository
                 * @description A git repository
                 */
                repo: {
                    /**
                     * @description Whether to allow auto-merge for pull requests.
                     * @default false
                     */
                    allow_auto_merge: boolean;
                    /** @description Whether to allow private forks */
                    allow_forking?: boolean;
                    /**
                     * @description Whether to allow merge commits for pull requests.
                     * @default true
                     */
                    allow_merge_commit: boolean;
                    /**
                     * @description Whether to allow rebase merges for pull requests.
                     * @default true
                     */
                    allow_rebase_merge: boolean;
                    /**
                     * @description Whether to allow squash merges for pull requests.
                     * @default true
                     */
                    allow_squash_merge: boolean;
                    allow_update_branch?: boolean;
                    /** Format: uri-template */
                    archive_url: string;
                    /**
                     * @description Whether the repository is archived.
                     * @default false
                     */
                    archived: boolean;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri */
                    clone_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    created_at: number | string;
                    /** @description The default branch of the repository. */
                    default_branch: string;
                    /**
                     * @description Whether to delete head branches when pull requests are merged
                     * @default false
                     */
                    delete_branch_on_merge: boolean;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** @description Returns whether or not this repository is disabled. */
                    disabled?: boolean;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    forks: number;
                    forks_count: number;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    git_url: string;
                    /**
                     * @description Whether downloads are enabled.
                     * @default true
                     */
                    has_downloads: boolean;
                    /**
                     * @description Whether issues are enabled.
                     * @default true
                     */
                    has_issues: boolean;
                    has_pages: boolean;
                    /**
                     * @description Whether projects are enabled.
                     * @default true
                     */
                    has_projects: boolean;
                    /**
                     * @description Whether the wiki is enabled.
                     * @default true
                     */
                    has_wiki: boolean;
                    /**
                     * @description Whether discussions are enabled.
                     * @default false
                     */
                    has_discussions: boolean;
                    homepage: string | null;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /**
                     * Format: int64
                     * @description Unique identifier of the repository
                     */
                    id: number;
                    is_template?: boolean;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    language: string | null;
                    /** Format: uri */
                    languages_url: string;
                    /** License */
                    license: {
                        key: string;
                        name: string;
                        node_id: string;
                        spdx_id: string;
                        /** Format: uri */
                        url: string | null;
                    } | null;
                    master_branch?: string;
                    /**
                     * @description The default value for a merge commit message.
                     *
                     *     - `PR_TITLE` - default to the pull request's title.
                     *     - `PR_BODY` - default to the pull request's body.
                     *     - `BLANK` - default to a blank commit message.
                     * @enum {string}
                     */
                    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                    /**
                     * @description The default value for a merge commit title.
                     *
                     *     - `PR_TITLE` - default to the pull request's title.
                     *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                     * @enum {string}
                     */
                    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** Format: uri */
                    mirror_url: string | null;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    open_issues: number;
                    open_issues_count: number;
                    organization?: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        pull: boolean;
                        push: boolean;
                        triage?: boolean;
                    };
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    public?: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    pushed_at: (number | string) | null;
                    /** Format: uri-template */
                    releases_url: string;
                    role_name?: string | null;
                    size: number;
                    /**
                     * @description The default value for a squash merge commit message:
                     *
                     *     - `PR_BODY` - default to the pull request's body.
                     *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                     *     - `BLANK` - default to a blank commit message.
                     * @enum {string}
                     */
                    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                    /**
                     * @description The default value for a squash merge commit title:
                     *
                     *     - `PR_TITLE` - default to the pull request's title.
                     *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                     * @enum {string}
                     */
                    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                    ssh_url: string;
                    stargazers?: number;
                    stargazers_count: number;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    svn_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    topics: string[];
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                    /**
                     * @description Whether a squash merge commit can use the pull request title as default.
                     * @default false
                     */
                    use_squash_pr_title_as_default: boolean;
                    /** @enum {string} */
                    visibility: "public" | "private" | "internal";
                    watchers: number;
                    watchers_count: number;
                    /** @description Whether to require contributors to sign off on web-based commits */
                    web_commit_signoff_required?: boolean;
                };
                sha: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            issue_url: string;
            labels: {
                /** @description 6-character hex code, without the leading #, identifying the color */
                color: string;
                default: boolean;
                description: string | null;
                id: number;
                /** @description The name of the label. */
                name: string;
                node_id: string;
                /**
                 * Format: uri
                 * @description URL for the label
                 */
                url: string;
            }[];
            locked: boolean;
            /** @description Indicates whether maintainers can modify the pull request. */
            maintainer_can_modify?: boolean;
            merge_commit_sha: string | null;
            mergeable?: boolean | null;
            mergeable_state?: string;
            merged?: boolean | null;
            /** Format: date-time */
            merged_at: string | null;
            /** User */
            merged_by?: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: {
                /** Format: date-time */
                closed_at: string | null;
                closed_issues: number;
                /** Format: date-time */
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                description: string | null;
                /** Format: date-time */
                due_on: string | null;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                labels_url: string;
                node_id: string;
                /** @description The number of the milestone. */
                number: number;
                open_issues: number;
                /**
                 * @description The state of the milestone.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** @description The title of the milestone. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
            } | null;
            node_id: string;
            /** @description Number uniquely identifying the pull request within its repository. */
            number: number;
            /** Format: uri */
            patch_url: string;
            rebaseable?: boolean | null;
            requested_reviewers: (({
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
            } | null) | {
                deleted?: boolean;
                /** @description Description of the team */
                description?: string | null;
                /** Format: uri */
                html_url?: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url?: string;
                /** @description Name of the team */
                name: string;
                node_id?: string;
                parent?: {
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                } | null;
                /** @description Permission that the team will have for its repositories */
                permission?: string;
                /** @enum {string} */
                privacy?: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url?: string;
                slug?: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url?: string;
            })[];
            requested_teams: {
                deleted?: boolean;
                /** @description Description of the team */
                description?: string | null;
                /** Format: uri */
                html_url?: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url?: string;
                /** @description Name of the team */
                name: string;
                node_id?: string;
                parent?: {
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                } | null;
                /** @description Permission that the team will have for its repositories */
                permission?: string;
                /** @enum {string} */
                privacy?: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url?: string;
                slug?: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url?: string;
            }[];
            /** Format: uri-template */
            review_comment_url: string;
            review_comments?: number;
            /** Format: uri */
            review_comments_url: string;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @enum {string}
             */
            state: "open" | "closed";
            /** Format: uri */
            statuses_url: string;
            /** @description The title of the pull request. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /**
         * Pull Request Review Comment
         * @description The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
         */
        webhooks_review_comment: {
            _links: {
                /** Link */
                html: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                pull_request: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                self: {
                    /** Format: uri-template */
                    href: string;
                };
            };
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            /** @description The text of the comment. */
            body: string;
            /** @description The SHA of the commit to which the comment applies. */
            commit_id: string;
            /** Format: date-time */
            created_at: string;
            /** @description The diff of the line that the comment refers to. */
            diff_hunk: string;
            /**
             * Format: uri
             * @description HTML URL for the pull request review comment.
             */
            html_url: string;
            /** @description The ID of the pull request review comment. */
            id: number;
            /** @description The comment ID to reply to. */
            in_reply_to_id?: number;
            /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
            line: number | null;
            /** @description The node ID of the pull request review comment. */
            node_id: string;
            /** @description The SHA of the original commit to which the comment applies. */
            original_commit_id: string;
            /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
            original_line: number;
            /** @description The index of the original line in the diff to which the comment applies. */
            original_position: number;
            /** @description The first line of the range for a multi-line comment. */
            original_start_line: number | null;
            /** @description The relative path of the file to which the comment applies. */
            path: string;
            /** @description The line index in the diff to which the comment applies. */
            position: number | null;
            /** @description The ID of the pull request review to which the comment belongs. */
            pull_request_review_id: number | null;
            /**
             * Format: uri
             * @description URL for the pull request that the review comment belongs to.
             */
            pull_request_url: string;
            /** Reactions */
            reactions: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @enum {string}
             */
            side: "LEFT" | "RIGHT";
            /** @description The first line of the range for a multi-line comment. */
            start_line: number | null;
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string|null}
             */
            start_side: "LEFT" | "RIGHT" | null;
            /**
             * @description The level at which the comment is targeted, can be a diff line or a file.
             * @enum {string}
             */
            subject_type?: "line" | "file";
            /** Format: date-time */
            updated_at: string;
            /**
             * Format: uri
             * @description URL for the pull request review comment
             */
            url: string;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        /** @description The review that was affected. */
        webhooks_review: {
            _links: {
                /** Link */
                html: {
                    /** Format: uri-template */
                    href: string;
                };
                /** Link */
                pull_request: {
                    /** Format: uri-template */
                    href: string;
                };
            };
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
            /** @description The text of the review. */
            body: string | null;
            /** @description A commit SHA for the review. */
            commit_id: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the review */
            id: number;
            node_id: string;
            /** Format: uri */
            pull_request_url: string;
            state: string;
            /** Format: date-time */
            submitted_at: string | null;
            /** User */
            user: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: int64 */
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
        };
        webhooks_nullable_string: string | null;
        /**
         * Release
         * @description The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
         */
        webhooks_release: {
            assets: {
                /** Format: uri */
                browser_download_url: string;
                content_type: string;
                /** Format: date-time */
                created_at: string;
                download_count: number;
                id: number;
                label: string | null;
                /** @description The file name of the asset. */
                name: string;
                node_id: string;
                size: number;
                digest: string | null;
                /**
                 * @description State of the release asset.
                 * @enum {string}
                 */
                state: "uploaded";
                /** Format: date-time */
                updated_at: string;
                /** User */
                uploader?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                /** Format: uri */
                url: string;
            }[];
            /** Format: uri */
            assets_url: string;
            /** User */
            author: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            body: string | null;
            /** Format: date-time */
            created_at: string | null;
            /** Format: uri */
            discussion_url?: string;
            /** @description Whether the release is a draft or published */
            draft: boolean;
            /** Format: uri */
            html_url: string;
            id: number;
            /** @description Whether or not the release is immutable. */
            immutable: boolean;
            name: string | null;
            node_id: string;
            /** @description Whether the release is identified as a prerelease or a full release. */
            prerelease: boolean;
            /** Format: date-time */
            published_at: string | null;
            /** Reactions */
            reactions?: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            /** @description The name of the tag. */
            tag_name: string;
            /** Format: uri */
            tarball_url: string | null;
            /** @description Specifies the commitish value that determines where the Git tag is created from. */
            target_commitish: string;
            /** Format: uri-template */
            upload_url: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            zipball_url: string | null;
        };
        /**
         * Release
         * @description The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
         */
        webhooks_release_1: {
            assets: ({
                /** Format: uri */
                browser_download_url: string;
                content_type: string;
                /** Format: date-time */
                created_at: string;
                download_count: number;
                id: number;
                label: string | null;
                /** @description The file name of the asset. */
                name: string;
                node_id: string;
                size: number;
                digest: string | null;
                /**
                 * @description State of the release asset.
                 * @enum {string}
                 */
                state: "uploaded";
                /** Format: date-time */
                updated_at: string;
                /** User */
                uploader?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                /** Format: uri */
                url: string;
            } | null)[];
            /** Format: uri */
            assets_url: string;
            /** User */
            author: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            body: string | null;
            /** Format: date-time */
            created_at: string | null;
            /** Format: uri */
            discussion_url?: string;
            /** @description Whether the release is a draft or published */
            draft: boolean;
            /** Format: uri */
            html_url: string;
            id: number;
            /** @description Whether or not the release is immutable. */
            immutable: boolean;
            name: string | null;
            node_id: string;
            /** @description Whether the release is identified as a prerelease or a full release. */
            prerelease: boolean;
            /** Format: date-time */
            published_at: string | null;
            /** Reactions */
            reactions?: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
            };
            /** @description The name of the tag. */
            tag_name: string;
            /** Format: uri */
            tarball_url: string | null;
            /** @description Specifies the commitish value that determines where the Git tag is created from. */
            target_commitish: string;
            /** Format: uri-template */
            upload_url: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            zipball_url: string | null;
        };
        /**
         * Repository Vulnerability Alert Alert
         * @description The security alert of the vulnerable dependency.
         */
        webhooks_alert: {
            affected_package_name: string;
            affected_range: string;
            created_at: string;
            dismiss_reason?: string;
            dismissed_at?: string;
            /** User */
            dismisser?: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
            } | null;
            external_identifier: string;
            /** Format: uri */
            external_reference: string | null;
            fix_reason?: string;
            /** Format: date-time */
            fixed_at?: string;
            fixed_in?: string;
            ghsa_id: string;
            id: number;
            node_id: string;
            number: number;
            severity: string;
            /** @enum {string} */
            state: "open";
        };
        /**
         * @description The reason for resolving the alert.
         * @enum {string|null}
         */
        "secret-scanning-alert-resolution-webhook": "false_positive" | "wont_fix" | "revoked" | "used_in_tests" | "pattern_deleted" | "pattern_edited" | null;
        "secret-scanning-alert-webhook": {
            number?: components["schemas"]["alert-number"];
            created_at?: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["nullable-alert-updated-at"];
            url?: components["schemas"]["alert-url"];
            html_url?: components["schemas"]["alert-html-url"];
            /**
             * Format: uri
             * @description The REST API URL of the code locations for this alert.
             */
            locations_url?: string;
            resolution?: components["schemas"]["secret-scanning-alert-resolution-webhook"];
            /**
             * Format: date-time
             * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            resolved_at?: string | null;
            resolved_by?: components["schemas"]["nullable-simple-user"];
            /** @description An optional comment to resolve an alert. */
            resolution_comment?: string | null;
            /** @description The type of secret that secret scanning detected. */
            secret_type?: string;
            /** @description User-friendly name for the detected secret, matching the `secret_type`.
             *     For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)." */
            secret_type_display_name?: string;
            /**
             * @description The token status as of the latest validity check.
             * @enum {string}
             */
            validity?: "active" | "inactive" | "unknown";
            /** @description Whether push protection was bypassed for the detected secret. */
            push_protection_bypassed?: boolean | null;
            push_protection_bypassed_by?: components["schemas"]["nullable-simple-user"];
            /**
             * Format: date-time
             * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            push_protection_bypassed_at?: string | null;
            push_protection_bypass_request_reviewer?: components["schemas"]["nullable-simple-user"];
            /** @description An optional comment when reviewing a push protection bypass. */
            push_protection_bypass_request_reviewer_comment?: string | null;
            /** @description An optional comment when requesting a push protection bypass. */
            push_protection_bypass_request_comment?: string | null;
            /**
             * Format: uri
             * @description The URL to a push protection bypass request.
             */
            push_protection_bypass_request_html_url?: string | null;
            /** @description Whether the detected secret was publicly leaked. */
            publicly_leaked?: boolean | null;
            /** @description Whether the detected secret was found in multiple repositories in the same organization or business. */
            multi_repo?: boolean | null;
        };
        /** @description The details of the security advisory, including summary, description, and severity. */
        webhooks_security_advisory: {
            cvss: {
                score: number;
                vector_string: string | null;
            };
            cvss_severities?: components["schemas"]["cvss-severities"];
            cwes: {
                cwe_id: string;
                name: string;
            }[];
            description: string;
            ghsa_id: string;
            identifiers: {
                type: string;
                value: string;
            }[];
            published_at: string;
            references: {
                /** Format: uri */
                url: string;
            }[];
            severity: string;
            summary: string;
            updated_at: string;
            vulnerabilities: {
                first_patched_version: {
                    identifier: string;
                } | null;
                package: {
                    ecosystem: string;
                    name: string;
                };
                severity: string;
                vulnerable_version_range: string;
            }[];
            withdrawn_at: string | null;
        };
        webhooks_sponsorship: {
            created_at: string;
            maintainer?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: number;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
                user_view_type?: string;
            };
            node_id: string;
            privacy_level: string;
            /** User */
            sponsor: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            /** User */
            sponsorable: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            /**
             * Sponsorship Tier
             * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
             */
            tier: {
                created_at: string;
                description: string;
                is_custom_ammount?: boolean;
                is_custom_amount?: boolean;
                is_one_time: boolean;
                monthly_price_in_cents: number;
                monthly_price_in_dollars: number;
                name: string;
                node_id: string;
            };
        };
        /** @description The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
        webhooks_effective_date: string;
        webhooks_changes_8: {
            tier: {
                /**
                 * Sponsorship Tier
                 * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
                 */
                from: {
                    created_at: string;
                    description: string;
                    is_custom_ammount?: boolean;
                    is_custom_amount?: boolean;
                    is_one_time: boolean;
                    monthly_price_in_cents: number;
                    monthly_price_in_dollars: number;
                    name: string;
                    node_id: string;
                };
            };
        };
        /**
         * Team
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        webhooks_team_1: {
            deleted?: boolean;
            /** @description Description of the team */
            description?: string | null;
            /** Format: uri */
            html_url?: string;
            /** @description Unique identifier of the team */
            id: number;
            /** Format: uri-template */
            members_url?: string;
            /** @description Name of the team */
            name: string;
            node_id?: string;
            parent?: {
                /** @description Description of the team */
                description: string | null;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /**
                 * @description Whether team members will receive notifications when their team is @mentioned
                 * @enum {string}
                 */
                notification_setting: "notifications_enabled" | "notifications_disabled";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
            } | null;
            /** @description Permission that the team will have for its repositories */
            permission?: string;
            /** @enum {string} */
            privacy?: "open" | "closed" | "secret";
            /**
             * @description Whether team members will receive notifications when their team is @mentioned
             * @enum {string}
             */
            notification_setting?: "notifications_enabled" | "notifications_disabled";
            /** Format: uri */
            repositories_url?: string;
            slug?: string;
            /**
             * Format: uri
             * @description URL for the team
             */
            url?: string;
        };
        /** branch protection configuration disabled event */
        "webhook-branch-protection-configuration-disabled": {
            /** @enum {string} */
            action: "disabled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** branch protection configuration enabled event */
        "webhook-branch-protection-configuration-enabled": {
            /** @enum {string} */
            action: "enabled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** branch protection rule created event */
        "webhook-branch-protection-rule-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            rule: components["schemas"]["webhooks_rule"];
            sender: components["schemas"]["simple-user"];
        };
        /** branch protection rule deleted event */
        "webhook-branch-protection-rule-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            rule: components["schemas"]["webhooks_rule"];
            sender: components["schemas"]["simple-user"];
        };
        /** branch protection rule edited event */
        "webhook-branch-protection-rule-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description If the action was `edited`, the changes to the rule. */
            changes?: {
                admin_enforced?: {
                    from: boolean | null;
                };
                authorized_actor_names?: {
                    from: string[];
                };
                authorized_actors_only?: {
                    from: boolean | null;
                };
                authorized_dismissal_actors_only?: {
                    from: boolean | null;
                };
                linear_history_requirement_enforcement_level?: {
                    /** @enum {string} */
                    from: "off" | "non_admins" | "everyone";
                };
                lock_branch_enforcement_level?: {
                    /** @enum {string} */
                    from: "off" | "non_admins" | "everyone";
                };
                lock_allows_fork_sync?: {
                    from: boolean | null;
                };
                pull_request_reviews_enforcement_level?: {
                    /** @enum {string} */
                    from: "off" | "non_admins" | "everyone";
                };
                require_last_push_approval?: {
                    from: boolean | null;
                };
                required_status_checks?: {
                    from: string[];
                };
                required_status_checks_enforcement_level?: {
                    /** @enum {string} */
                    from: "off" | "non_admins" | "everyone";
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            rule: components["schemas"]["webhooks_rule"];
            sender: components["schemas"]["simple-user"];
        };
        /** Check Run Completed Event */
        "webhook-check-run-completed": {
            /** @enum {string} */
            action?: "completed";
            check_run: components["schemas"]["check-run-with-simple-check-suite"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /**
         * Check Run Completed Event
         * @description The check_run.completed webhook encoded with URL encoding
         */
        "webhook-check-run-completed-form-encoded": {
            /** @description A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object. */
            payload: string;
        };
        /** Check Run Created Event */
        "webhook-check-run-created": {
            /** @enum {string} */
            action?: "created";
            check_run: components["schemas"]["check-run-with-simple-check-suite"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /**
         * Check Run Created Event
         * @description The check_run.created webhook encoded with URL encoding
         */
        "webhook-check-run-created-form-encoded": {
            /** @description A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object. */
            payload: string;
        };
        /** Check Run Requested Action Event */
        "webhook-check-run-requested-action": {
            /** @enum {string} */
            action: "requested_action";
            check_run: components["schemas"]["check-run-with-simple-check-suite"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            /** @description The action requested by the user. */
            requested_action?: {
                /** @description The integrator reference of the action requested by the user. */
                identifier?: string;
            };
            sender: components["schemas"]["simple-user"];
        };
        /**
         * Check Run Requested Action Event
         * @description The check_run.requested_action webhook encoded with URL encoding
         */
        "webhook-check-run-requested-action-form-encoded": {
            /** @description A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object. */
            payload: string;
        };
        /** Check Run Re-Requested Event */
        "webhook-check-run-rerequested": {
            /** @enum {string} */
            action?: "rerequested";
            check_run: components["schemas"]["check-run-with-simple-check-suite"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /**
         * Check Run Re-Requested Event
         * @description The check_run.rerequested webhook encoded with URL encoding
         */
        "webhook-check-run-rerequested-form-encoded": {
            /** @description A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object. */
            payload: string;
        };
        /** check_suite completed event */
        "webhook-check-suite-completed": {
            /** @enum {string} */
            action: "completed";
            /** @description The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
            check_suite: {
                after: string | null;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                app: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "merge_group" | "pull_request_review_thread" | "workflow_job" | "merge_queue_entry" | "security_and_analysis" | "projects_v2_item" | "secret_scanning_alert_location")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The client ID of the GitHub app */
                    client_id?: string | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                };
                before: string | null;
                /** Format: uri */
                check_runs_url: string;
                /**
                 * @description The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
                 * @enum {string|null}
                 */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null | "skipped" | "startup_failure";
                /** Format: date-time */
                created_at: string;
                /** @description The head branch name the changes are on. */
                head_branch: string | null;
                /** SimpleCommit */
                head_commit: {
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    id: string;
                    message: string;
                    timestamp: string;
                    tree_id: string;
                };
                /** @description The SHA of the head commit that is being checked. */
                head_sha: string;
                id: number;
                latest_check_runs_count: number;
                node_id: string;
                /** @description An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                rerequestable?: boolean;
                runs_rerequestable?: boolean;
                /**
                 * @description The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
                 * @enum {string|null}
                 */
                status: "requested" | "in_progress" | "completed" | "queued" | null | "pending";
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL that points to the check suite API resource.
                 */
                url: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** check_suite requested event */
        "webhook-check-suite-requested": {
            /** @enum {string} */
            action: "requested";
            /** @description The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
            check_suite: {
                after: string | null;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                app: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "workflow_job" | "merge_queue_entry" | "security_and_analysis" | "secret_scanning_alert_location" | "projects_v2_item" | "merge_group" | "repository_import")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description Client ID of the GitHub app */
                    client_id?: string | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                };
                before: string | null;
                /** Format: uri */
                check_runs_url: string;
                /**
                 * @description The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
                 * @enum {string|null}
                 */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null | "skipped";
                /** Format: date-time */
                created_at: string;
                /** @description The head branch name the changes are on. */
                head_branch: string | null;
                /** SimpleCommit */
                head_commit: {
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    id: string;
                    message: string;
                    timestamp: string;
                    tree_id: string;
                };
                /** @description The SHA of the head commit that is being checked. */
                head_sha: string;
                id: number;
                latest_check_runs_count: number;
                node_id: string;
                /** @description An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                rerequestable?: boolean;
                runs_rerequestable?: boolean;
                /**
                 * @description The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
                 * @enum {string|null}
                 */
                status: "requested" | "in_progress" | "completed" | "queued" | null;
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL that points to the check suite API resource.
                 */
                url: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** check_suite rerequested event */
        "webhook-check-suite-rerequested": {
            /** @enum {string} */
            action: "rerequested";
            /** @description The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
            check_suite: {
                after: string | null;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                app: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "merge_queue_entry" | "workflow_job")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The Client ID for the GitHub app */
                    client_id?: string | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                };
                before: string | null;
                /** Format: uri */
                check_runs_url: string;
                /**
                 * @description The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
                 * @enum {string|null}
                 */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
                /** Format: date-time */
                created_at: string;
                /** @description The head branch name the changes are on. */
                head_branch: string | null;
                /** SimpleCommit */
                head_commit: {
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    id: string;
                    message: string;
                    timestamp: string;
                    tree_id: string;
                };
                /** @description The SHA of the head commit that is being checked. */
                head_sha: string;
                id: number;
                latest_check_runs_count: number;
                node_id: string;
                /** @description An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                rerequestable?: boolean;
                runs_rerequestable?: boolean;
                /**
                 * @description The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
                 * @enum {string|null}
                 */
                status: "requested" | "in_progress" | "completed" | "queued" | null;
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL that points to the check suite API resource.
                 */
                url: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** code_scanning_alert appeared_in_branch event */
        "webhook-code-scanning-alert-appeared-in-branch": {
            /** @enum {string} */
            action: "appeared_in_branch";
            /** @description The code scanning alert involved in the event. */
            alert: {
                /**
                 * Format: date-time
                 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
                 */
                created_at: string;
                /**
                 * Format: date-time
                 * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
                 */
                dismissed_at: string | null;
                /** User */
                dismissed_by: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
                /**
                 * @description The reason for dismissing or closing the alert.
                 * @enum {string|null}
                 */
                dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
                /** @description The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                fixed_at?: unknown;
                /**
                 * Format: uri
                 * @description The GitHub URL of the alert resource.
                 */
                html_url: string;
                /** Alert Instance */
                most_recent_instance?: {
                    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                    analysis_key: string;
                    /** @description Identifies the configuration under which the analysis was executed. */
                    category?: string;
                    classifications?: string[];
                    commit_sha?: string;
                    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                    environment: string;
                    location?: {
                        end_column?: number;
                        end_line?: number;
                        path?: string;
                        start_column?: number;
                        start_line?: number;
                    };
                    message?: {
                        text?: string;
                    };
                    /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                    ref: string;
                    /**
                     * @description State of a code scanning alert.
                     * @enum {string}
                     */
                    state: "open" | "dismissed" | "fixed";
                } | null;
                /** @description The code scanning alert number. */
                number: number;
                rule: {
                    /** @description A short description of the rule used to detect the alert. */
                    description: string;
                    /** @description A unique identifier for the rule used to detect the alert. */
                    id: string;
                    /**
                     * @description The severity of the alert.
                     * @enum {string|null}
                     */
                    severity: "none" | "note" | "warning" | "error" | null;
                };
                /**
                 * @description State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed.
                 * @enum {string|null}
                 */
                state: "open" | "dismissed" | "fixed" | null;
                tool: {
                    /** @description The name of the tool used to generate the code scanning analysis alert. */
                    name: string;
                    /** @description The version of the tool used to detect the alert. */
                    version: string | null;
                };
                /** Format: uri */
                url: string;
            };
            commit_oid: components["schemas"]["webhooks_code_scanning_commit_oid"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            ref: components["schemas"]["webhooks_code_scanning_ref"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** code_scanning_alert closed_by_user event */
        "webhook-code-scanning-alert-closed-by-user": {
            /** @enum {string} */
            action: "closed_by_user";
            /** @description The code scanning alert involved in the event. */
            alert: {
                /**
                 * Format: date-time
                 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
                 */
                created_at: string;
                /**
                 * Format: date-time
                 * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
                 */
                dismissed_at: string;
                /** User */
                dismissed_by: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
                /**
                 * @description The reason for dismissing or closing the alert.
                 * @enum {string|null}
                 */
                dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
                /** @description The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                fixed_at?: unknown;
                /**
                 * Format: uri
                 * @description The GitHub URL of the alert resource.
                 */
                html_url: string;
                /** Alert Instance */
                most_recent_instance?: {
                    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                    analysis_key: string;
                    /** @description Identifies the configuration under which the analysis was executed. */
                    category?: string;
                    classifications?: string[];
                    commit_sha?: string;
                    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                    environment: string;
                    location?: {
                        end_column?: number;
                        end_line?: number;
                        path?: string;
                        start_column?: number;
                        start_line?: number;
                    };
                    message?: {
                        text?: string;
                    };
                    /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                    ref: string;
                    /**
                     * @description State of a code scanning alert.
                     * @enum {string}
                     */
                    state: "open" | "dismissed" | "fixed";
                } | null;
                /** @description The code scanning alert number. */
                number: number;
                rule: {
                    /** @description A short description of the rule used to detect the alert. */
                    description: string;
                    full_description?: string;
                    help?: string | null;
                    /** @description A link to the documentation for the rule used to detect the alert. */
                    help_uri?: string | null;
                    /** @description A unique identifier for the rule used to detect the alert. */
                    id: string;
                    name?: string;
                    /**
                     * @description The severity of the alert.
                     * @enum {string|null}
                     */
                    severity: "none" | "note" | "warning" | "error" | null;
                    tags?: string[] | null;
                };
                /**
                 * @description State of a code scanning alert.
                 * @enum {string}
                 */
                state: "dismissed" | "fixed";
                tool: {
                    guid?: string | null;
                    /** @description The name of the tool used to generate the code scanning analysis alert. */
                    name: string;
                    /** @description The version of the tool used to detect the alert. */
                    version: string | null;
                };
                /** Format: uri */
                url: string;
                /** User */
                dismissal_approved_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            commit_oid: components["schemas"]["webhooks_code_scanning_commit_oid"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            ref: components["schemas"]["webhooks_code_scanning_ref"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** code_scanning_alert created event */
        "webhook-code-scanning-alert-created": {
            /** @enum {string} */
            action: "created";
            /** @description The code scanning alert involved in the event. */
            alert: {
                /**
                 * Format: date-time
                 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
                 */
                created_at: string | null;
                /** @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                dismissed_at: unknown;
                dismissed_by: unknown;
                dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
                /** @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
                dismissed_reason: unknown;
                /** @description The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                fixed_at?: unknown;
                /**
                 * Format: uri
                 * @description The GitHub URL of the alert resource.
                 */
                html_url: string;
                instances_url?: string;
                /** Alert Instance */
                most_recent_instance?: {
                    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                    analysis_key: string;
                    /** @description Identifies the configuration under which the analysis was executed. */
                    category?: string;
                    classifications?: string[];
                    commit_sha?: string;
                    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                    environment: string;
                    location?: {
                        end_column?: number;
                        end_line?: number;
                        path?: string;
                        start_column?: number;
                        start_line?: number;
                    };
                    message?: {
                        text?: string;
                    };
                    /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                    ref: string;
                    /**
                     * @description State of a code scanning alert.
                     * @enum {string}
                     */
                    state: "open" | "dismissed" | "fixed";
                } | null;
                /** @description The code scanning alert number. */
                number: number;
                rule: {
                    /** @description A short description of the rule used to detect the alert. */
                    description: string;
                    full_description?: string;
                    help?: string | null;
                    /** @description A link to the documentation for the rule used to detect the alert. */
                    help_uri?: string | null;
                    /** @description A unique identifier for the rule used to detect the alert. */
                    id: string;
                    name?: string;
                    /**
                     * @description The severity of the alert.
                     * @enum {string|null}
                     */
                    severity: "none" | "note" | "warning" | "error" | null;
                    tags?: string[] | null;
                };
                /**
                 * @description State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed.
                 * @enum {string|null}
                 */
                state: "open" | "dismissed" | null;
                tool: {
                    guid?: string | null;
                    /** @description The name of the tool used to generate the code scanning analysis alert. */
                    name: string;
                    /** @description The version of the tool used to detect the alert. */
                    version: string | null;
                } | null;
                updated_at?: string | null;
                /** Format: uri */
                url: string;
                dismissal_approved_by?: unknown;
            };
            commit_oid: components["schemas"]["webhooks_code_scanning_commit_oid"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            ref: components["schemas"]["webhooks_code_scanning_ref"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** code_scanning_alert fixed event */
        "webhook-code-scanning-alert-fixed": {
            /** @enum {string} */
            action: "fixed";
            /** @description The code scanning alert involved in the event. */
            alert: {
                /**
                 * Format: date-time
                 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
                 */
                created_at: string;
                /**
                 * Format: date-time
                 * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
                 */
                dismissed_at: string | null;
                /** User */
                dismissed_by: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
                /**
                 * @description The reason for dismissing or closing the alert.
                 * @enum {string|null}
                 */
                dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
                /** @description The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                fixed_at?: unknown;
                /**
                 * Format: uri
                 * @description The GitHub URL of the alert resource.
                 */
                html_url: string;
                /** Format: uri */
                instances_url?: string;
                /** Alert Instance */
                most_recent_instance?: {
                    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                    analysis_key: string;
                    /** @description Identifies the configuration under which the analysis was executed. */
                    category?: string;
                    classifications?: string[];
                    commit_sha?: string;
                    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                    environment: string;
                    location?: {
                        end_column?: number;
                        end_line?: number;
                        path?: string;
                        start_column?: number;
                        start_line?: number;
                    };
                    message?: {
                        text?: string;
                    };
                    /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                    ref: string;
                    /**
                     * @description State of a code scanning alert.
                     * @enum {string}
                     */
                    state: "open" | "dismissed" | "fixed";
                } | null;
                /** @description The code scanning alert number. */
                number: number;
                rule: {
                    /** @description A short description of the rule used to detect the alert. */
                    description: string;
                    full_description?: string;
                    help?: string | null;
                    /** @description A link to the documentation for the rule used to detect the alert. */
                    help_uri?: string | null;
                    /** @description A unique identifier for the rule used to detect the alert. */
                    id: string;
                    name?: string;
                    /**
                     * @description The severity of the alert.
                     * @enum {string|null}
                     */
                    severity: "none" | "note" | "warning" | "error" | null;
                    tags?: string[] | null;
                };
                /**
                 * @description State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed.
                 * @enum {string|null}
                 */
                state: "fixed" | null;
                tool: {
                    guid?: string | null;
                    /** @description The name of the tool used to generate the code scanning analysis alert. */
                    name: string;
                    /** @description The version of the tool used to detect the alert. */
                    version: string | null;
                };
                /** Format: uri */
                url: string;
            };
            commit_oid: components["schemas"]["webhooks_code_scanning_commit_oid"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            ref: components["schemas"]["webhooks_code_scanning_ref"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** code_scanning_alert reopened event */
        "webhook-code-scanning-alert-reopened": {
            /** @enum {string} */
            action: "reopened";
            /** @description The code scanning alert involved in the event. */
            alert: {
                /**
                 * Format: date-time
                 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
                 */
                created_at: string;
                /** @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                dismissed_at: string | null;
                dismissed_by: Record<string, never> | null;
                dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
                /** @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
                dismissed_reason: string | null;
                /** @description The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                fixed_at?: unknown;
                /**
                 * Format: uri
                 * @description The GitHub URL of the alert resource.
                 */
                html_url: string;
                /** Alert Instance */
                most_recent_instance?: {
                    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                    analysis_key: string;
                    /** @description Identifies the configuration under which the analysis was executed. */
                    category?: string;
                    classifications?: string[];
                    commit_sha?: string;
                    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                    environment: string;
                    location?: {
                        end_column?: number;
                        end_line?: number;
                        path?: string;
                        start_column?: number;
                        start_line?: number;
                    };
                    message?: {
                        text?: string;
                    };
                    /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                    ref: string;
                    /**
                     * @description State of a code scanning alert.
                     * @enum {string}
                     */
                    state: "open" | "dismissed" | "fixed";
                } | null;
                /** @description The code scanning alert number. */
                number: number;
                rule: {
                    /** @description A short description of the rule used to detect the alert. */
                    description: string;
                    full_description?: string;
                    help?: string | null;
                    /** @description A link to the documentation for the rule used to detect the alert. */
                    help_uri?: string | null;
                    /** @description A unique identifier for the rule used to detect the alert. */
                    id: string;
                    name?: string;
                    /**
                     * @description The severity of the alert.
                     * @enum {string|null}
                     */
                    severity: "none" | "note" | "warning" | "error" | null;
                    tags?: string[] | null;
                };
                /**
                 * @description State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed.
                 * @enum {string|null}
                 */
                state: "open" | "dismissed" | "fixed" | null;
                tool: {
                    guid?: string | null;
                    /** @description The name of the tool used to generate the code scanning analysis alert. */
                    name: string;
                    /** @description The version of the tool used to detect the alert. */
                    version: string | null;
                };
                /** Format: uri */
                url: string;
            } | null;
            /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
            commit_oid: string | null;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
            ref: string | null;
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** code_scanning_alert reopened_by_user event */
        "webhook-code-scanning-alert-reopened-by-user": {
            /** @enum {string} */
            action: "reopened_by_user";
            /** @description The code scanning alert involved in the event. */
            alert: {
                /**
                 * Format: date-time
                 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
                 */
                created_at: string;
                /** @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                dismissed_at: unknown;
                dismissed_by: unknown;
                dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
                /** @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
                dismissed_reason: unknown;
                /** @description The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
                fixed_at?: unknown;
                /**
                 * Format: uri
                 * @description The GitHub URL of the alert resource.
                 */
                html_url: string;
                /** Alert Instance */
                most_recent_instance?: {
                    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                    analysis_key: string;
                    /** @description Identifies the configuration under which the analysis was executed. */
                    category?: string;
                    classifications?: string[];
                    commit_sha?: string;
                    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                    environment: string;
                    location?: {
                        end_column?: number;
                        end_line?: number;
                        path?: string;
                        start_column?: number;
                        start_line?: number;
                    };
                    message?: {
                        text?: string;
                    };
                    /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                    ref: string;
                    /**
                     * @description State of a code scanning alert.
                     * @enum {string}
                     */
                    state: "open" | "dismissed" | "fixed";
                } | null;
                /** @description The code scanning alert number. */
                number: number;
                rule: {
                    /** @description A short description of the rule used to detect the alert. */
                    description: string;
                    /** @description A unique identifier for the rule used to detect the alert. */
                    id: string;
                    /**
                     * @description The severity of the alert.
                     * @enum {string|null}
                     */
                    severity: "none" | "note" | "warning" | "error" | null;
                };
                /**
                 * @description State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed.
                 * @enum {string|null}
                 */
                state: "open" | "fixed" | null;
                tool: {
                    /** @description The name of the tool used to generate the code scanning analysis alert. */
                    name: string;
                    /** @description The version of the tool used to detect the alert. */
                    version: string | null;
                };
                /** Format: uri */
                url: string;
            };
            commit_oid: components["schemas"]["webhooks_code_scanning_commit_oid"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            ref: components["schemas"]["webhooks_code_scanning_ref"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** commit_comment created event */
        "webhook-commit-comment-created": {
            /**
             * @description The action performed. Can be `created`.
             * @enum {string}
             */
            action: "created";
            /** @description The [commit comment](${externalDocsUpapp/api/description/components/schemas/webhooks/issue-comment-created.yamlrl}/rest/commits/comments#get-a-commit-comment) resource. */
            comment: {
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description The text of the comment. */
                body: string;
                /** @description The SHA of the commit to which the comment applies. */
                commit_id: string;
                created_at: string;
                /** Format: uri */
                html_url: string;
                /** @description The ID of the commit comment. */
                id: number;
                /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                line: number | null;
                /** @description The node ID of the commit comment. */
                node_id: string;
                /** @description The relative path of the file to which the comment applies. */
                path: string | null;
                /** @description The line index in the diff to which the comment applies. */
                position: number | null;
                /** Reactions */
                reactions?: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** create event */
        "webhook-create": {
            /** @description The repository's current description. */
            description: string | null;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The name of the repository's default branch (usually `main`). */
            master_branch: string;
            organization?: components["schemas"]["organization-simple-webhooks"];
            pusher_type: components["schemas"]["webhooks_deploy_pusher_type"];
            ref: components["schemas"]["webhooks_ref_0"];
            /**
             * @description The type of Git ref object created in the repository.
             * @enum {string}
             */
            ref_type: "tag" | "branch";
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** custom property created event */
        "webhook-custom-property-created": {
            /** @enum {string} */
            action: "created";
            definition: components["schemas"]["custom-property"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** custom property deleted event */
        "webhook-custom-property-deleted": {
            /** @enum {string} */
            action: "deleted";
            definition: {
                /** @description The name of the property that was deleted. */
                property_name: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** custom property promoted to business event */
        "webhook-custom-property-promoted-to-enterprise": {
            /** @enum {string} */
            action: "promote_to_enterprise";
            definition: components["schemas"]["custom-property"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** custom property updated event */
        "webhook-custom-property-updated": {
            /** @enum {string} */
            action: "updated";
            definition: components["schemas"]["custom-property"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** Custom property values updated event */
        "webhook-custom-property-values-updated": {
            /** @enum {string} */
            action: "updated";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            repository: components["schemas"]["repository-webhooks"];
            organization: components["schemas"]["organization-simple-webhooks"];
            sender?: components["schemas"]["simple-user"];
            /** @description The new custom property values for the repository. */
            new_property_values: components["schemas"]["custom-property-value"][];
            /** @description The old custom property values for the repository. */
            old_property_values: components["schemas"]["custom-property-value"][];
        };
        /** delete event */
        "webhook-delete": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pusher_type: components["schemas"]["webhooks_deploy_pusher_type"];
            ref: components["schemas"]["webhooks_ref_0"];
            /**
             * @description The type of Git ref object deleted in the repository.
             * @enum {string}
             */
            ref_type: "tag" | "branch";
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert auto-dismissed event */
        "webhook-dependabot-alert-auto-dismissed": {
            /** @enum {string} */
            action: "auto_dismissed";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert auto-reopened event */
        "webhook-dependabot-alert-auto-reopened": {
            /** @enum {string} */
            action: "auto_reopened";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert created event */
        "webhook-dependabot-alert-created": {
            /** @enum {string} */
            action: "created";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert dismissed event */
        "webhook-dependabot-alert-dismissed": {
            /** @enum {string} */
            action: "dismissed";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert fixed event */
        "webhook-dependabot-alert-fixed": {
            /** @enum {string} */
            action: "fixed";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert reintroduced event */
        "webhook-dependabot-alert-reintroduced": {
            /** @enum {string} */
            action: "reintroduced";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Dependabot alert reopened event */
        "webhook-dependabot-alert-reopened": {
            /** @enum {string} */
            action: "reopened";
            alert: components["schemas"]["dependabot-alert"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** deploy_key created event */
        "webhook-deploy-key-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            key: components["schemas"]["webhooks_deploy_key"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** deploy_key deleted event */
        "webhook-deploy-key-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            key: components["schemas"]["webhooks_deploy_key"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** deployment created event */
        "webhook-deployment-created": {
            /** @enum {string} */
            action: "created";
            /**
             * Deployment
             * @description The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
             */
            deployment: {
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                description: string | null;
                environment: string;
                id: number;
                node_id: string;
                original_environment: string;
                payload: Record<string, never> | string;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "workflow_job" | "pull_request_review_thread" | "merge_queue_entry" | "secret_scanning_alert_location" | "merge_group")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                production_environment?: boolean;
                ref: string;
                /** Format: uri */
                repository_url: string;
                sha: string;
                /** Format: uri */
                statuses_url: string;
                task: string;
                transient_environment?: boolean;
                updated_at: string;
                /** Format: uri */
                url: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow: components["schemas"]["webhooks_workflow"];
            /** Deployment Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_id: number;
                check_suite_node_id: string;
                check_suite_url?: string;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
                /** Format: date-time */
                created_at: string;
                display_title: string;
                event: string;
                head_branch: string;
                head_commit?: unknown;
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: unknown;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                jobs_url?: string;
                logs_url?: string;
                name: string;
                node_id: string;
                path: string;
                previous_attempt_url?: unknown;
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: unknown;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
                /** User */
                triggering_actor?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                workflow_url?: string;
            } | null;
        };
        /** deployment protection rule requested event */
        "webhook-deployment-protection-rule-requested": {
            /** @enum {string} */
            action?: "requested";
            /** @description The name of the environment that has the deployment protection rule. */
            environment?: string;
            /** @description The event that triggered the deployment protection rule. */
            event?: string;
            /**
             * Format: uri
             * @description The URL to review the deployment protection rule.
             */
            deployment_callback_url?: string;
            deployment?: components["schemas"]["deployment"];
            pull_requests?: components["schemas"]["pull-request"][];
            repository?: components["schemas"]["repository-webhooks"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            sender?: components["schemas"]["simple-user"];
        };
        "webhook-deployment-review-approved": {
            /** @enum {string} */
            action: "approved";
            approver?: components["schemas"]["webhooks_approver"];
            comment?: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            reviewers?: components["schemas"]["webhooks_reviewers"];
            sender: components["schemas"]["simple-user"];
            since: string;
            workflow_job_run?: components["schemas"]["webhooks_workflow_job_run"];
            workflow_job_runs?: {
                conclusion?: unknown;
                created_at?: string;
                environment?: string;
                html_url?: string;
                id?: number;
                name?: string | null;
                status?: string;
                updated_at?: string;
            }[];
            /** Deployment Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_id: number;
                check_suite_node_id: string;
                check_suite_url?: string;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
                /** Format: date-time */
                created_at: string;
                display_title: string;
                event: string;
                head_branch: string;
                head_commit?: Record<string, never> | null;
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string | null;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                        user_view_type?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                jobs_url?: string;
                logs_url?: string;
                name: string;
                node_id: string;
                path: string;
                previous_attempt_url?: string | null;
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string | null;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                        user_view_type?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                workflow_url?: string;
            } | null;
        };
        "webhook-deployment-review-rejected": {
            /** @enum {string} */
            action: "rejected";
            approver?: components["schemas"]["webhooks_approver"];
            comment?: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            reviewers?: components["schemas"]["webhooks_reviewers"];
            sender: components["schemas"]["simple-user"];
            since: string;
            workflow_job_run?: components["schemas"]["webhooks_workflow_job_run"];
            workflow_job_runs?: {
                conclusion?: string | null;
                created_at?: string;
                environment?: string;
                html_url?: string;
                id?: number;
                name?: string | null;
                status?: string;
                updated_at?: string;
            }[];
            /** Deployment Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_id: number;
                check_suite_node_id: string;
                check_suite_url?: string;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
                /** Format: date-time */
                created_at: string;
                event: string;
                head_branch: string;
                head_commit?: Record<string, never> | null;
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string | null;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                        user_view_type?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                jobs_url?: string;
                logs_url?: string;
                name: string;
                node_id: string;
                path: string;
                previous_attempt_url?: string | null;
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string | null;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                        user_view_type?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "waiting";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                workflow_url?: string;
                display_title: string;
            } | null;
        };
        "webhook-deployment-review-requested": {
            /** @enum {string} */
            action: "requested";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            environment: string;
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            requestor: components["schemas"]["webhooks_user"];
            reviewers: {
                /** User */
                reviewer?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login?: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** @enum {string} */
                type?: "User" | "Team";
            }[];
            sender: components["schemas"]["simple-user"];
            since: string;
            workflow_job_run: {
                conclusion: unknown;
                created_at: string;
                environment: string;
                html_url: string;
                id: number;
                name: string | null;
                status: string;
                updated_at: string;
            };
            /** Deployment Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_id: number;
                check_suite_node_id: string;
                check_suite_url?: string;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
                /** Format: date-time */
                created_at: string;
                event: string;
                head_branch: string;
                head_commit?: Record<string, never> | null;
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string | null;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                        user_view_type?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                jobs_url?: string;
                logs_url?: string;
                name: string;
                node_id: string;
                path: string;
                previous_attempt_url?: string | null;
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: string | null;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                        user_view_type?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                workflow_url?: string;
                display_title: string;
            } | null;
        };
        /** deployment_status created event */
        "webhook-deployment-status-created": {
            /** @enum {string} */
            action: "created";
            check_run?: {
                /** Format: date-time */
                completed_at: string | null;
                /**
                 * @description The result of the completed check run. This value will be `null` until the check run has completed.
                 * @enum {string|null}
                 */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "skipped" | null;
                /** Format: uri */
                details_url: string;
                external_id: string;
                /** @description The SHA of the commit that is being checked. */
                head_sha: string;
                /** Format: uri */
                html_url: string;
                /** @description The id of the check. */
                id: number;
                /** @description The name of the check run. */
                name: string;
                node_id: string;
                /** Format: date-time */
                started_at: string;
                /**
                 * @description The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
                 * @enum {string}
                 */
                status: "queued" | "in_progress" | "completed" | "waiting" | "pending";
                /** Format: uri */
                url: string;
            } | null;
            /**
             * Deployment
             * @description The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
             */
            deployment: {
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                description: string | null;
                environment: string;
                id: number;
                node_id: string;
                original_environment: string;
                payload: (string | Record<string, never>) | null;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "merge_queue_entry" | "workflow_job" | "pull_request_review_thread" | "secret_scanning_alert_location" | "merge_group")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                production_environment?: boolean;
                ref: string;
                /** Format: uri */
                repository_url: string;
                sha: string;
                /** Format: uri */
                statuses_url: string;
                task: string;
                transient_environment?: boolean;
                updated_at: string;
                /** Format: uri */
                url: string;
            };
            /** @description The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses). */
            deployment_status: {
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: uri */
                deployment_url: string;
                /** @description The optional human-readable description added to the status. */
                description: string;
                environment: string;
                /** Format: uri */
                environment_url?: string;
                id: number;
                /** Format: uri */
                log_url?: string;
                node_id: string;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "merge_queue_entry" | "workflow_job" | "merge_group" | "secret_scanning_alert_location")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                /** Format: uri */
                repository_url: string;
                /** @description The new state. Can be `pending`, `success`, `failure`, or `error`. */
                state: string;
                /** @description The optional link added to the status. */
                target_url: string;
                updated_at: string;
                /** Format: uri */
                url: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow?: components["schemas"]["webhooks_workflow"];
            /** Deployment Workflow Run */
            workflow_run?: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                artifacts_url?: string;
                cancel_url?: string;
                check_suite_id: number;
                check_suite_node_id: string;
                check_suite_url?: string;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null | "startup_failure";
                /** Format: date-time */
                created_at: string;
                display_title: string;
                event: string;
                head_branch: string;
                head_commit?: unknown;
                head_repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: unknown;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                jobs_url?: string;
                logs_url?: string;
                name: string;
                node_id: string;
                path: string;
                previous_attempt_url?: unknown;
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                repository?: {
                    archive_url?: string;
                    assignees_url?: string;
                    blobs_url?: string;
                    branches_url?: string;
                    collaborators_url?: string;
                    comments_url?: string;
                    commits_url?: string;
                    compare_url?: string;
                    contents_url?: string;
                    contributors_url?: string;
                    deployments_url?: string;
                    description?: unknown;
                    downloads_url?: string;
                    events_url?: string;
                    fork?: boolean;
                    forks_url?: string;
                    full_name?: string;
                    git_commits_url?: string;
                    git_refs_url?: string;
                    git_tags_url?: string;
                    hooks_url?: string;
                    html_url?: string;
                    id?: number;
                    issue_comment_url?: string;
                    issue_events_url?: string;
                    issues_url?: string;
                    keys_url?: string;
                    labels_url?: string;
                    languages_url?: string;
                    merges_url?: string;
                    milestones_url?: string;
                    name?: string;
                    node_id?: string;
                    notifications_url?: string;
                    owner?: {
                        avatar_url?: string;
                        events_url?: string;
                        followers_url?: string;
                        following_url?: string;
                        gists_url?: string;
                        gravatar_id?: string;
                        html_url?: string;
                        id?: number;
                        login?: string;
                        node_id?: string;
                        organizations_url?: string;
                        received_events_url?: string;
                        repos_url?: string;
                        site_admin?: boolean;
                        starred_url?: string;
                        subscriptions_url?: string;
                        type?: string;
                        url?: string;
                    };
                    private?: boolean;
                    pulls_url?: string;
                    releases_url?: string;
                    stargazers_url?: string;
                    statuses_url?: string;
                    subscribers_url?: string;
                    subscription_url?: string;
                    tags_url?: string;
                    teams_url?: string;
                    trees_url?: string;
                    url?: string;
                };
                rerun_url?: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                workflow_url?: string;
            } | null;
        };
        /** discussion answered event */
        "webhook-discussion-answered": {
            /** @enum {string} */
            action: "answered";
            answer: components["schemas"]["webhooks_answer"];
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion category changed event */
        "webhook-discussion-category-changed": {
            /** @enum {string} */
            action: "category_changed";
            changes: {
                category: {
                    from: {
                        /** Format: date-time */
                        created_at: string;
                        description: string;
                        emoji: string;
                        id: number;
                        is_answerable: boolean;
                        name: string;
                        node_id?: string;
                        repository_id: number;
                        slug: string;
                        updated_at: string;
                    };
                };
            };
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion closed event */
        "webhook-discussion-closed": {
            /** @enum {string} */
            action: "closed";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion_comment created event */
        "webhook-discussion-comment-created": {
            /** @enum {string} */
            action: "created";
            comment: components["schemas"]["webhooks_comment"];
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion_comment deleted event */
        "webhook-discussion-comment-deleted": {
            /** @enum {string} */
            action: "deleted";
            comment: components["schemas"]["webhooks_comment"];
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion_comment edited event */
        "webhook-discussion-comment-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                body: {
                    from: string;
                };
            };
            comment: components["schemas"]["webhooks_comment"];
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion created event */
        "webhook-discussion-created": {
            /** @enum {string} */
            action: "created";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion deleted event */
        "webhook-discussion-deleted": {
            /** @enum {string} */
            action: "deleted";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion edited event */
        "webhook-discussion-edited": {
            /** @enum {string} */
            action: "edited";
            changes?: {
                body?: {
                    from: string;
                };
                title?: {
                    from: string;
                };
            };
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion labeled event */
        "webhook-discussion-labeled": {
            /** @enum {string} */
            action: "labeled";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion locked event */
        "webhook-discussion-locked": {
            /** @enum {string} */
            action: "locked";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion pinned event */
        "webhook-discussion-pinned": {
            /** @enum {string} */
            action: "pinned";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion reopened event */
        "webhook-discussion-reopened": {
            /** @enum {string} */
            action: "reopened";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion transferred event */
        "webhook-discussion-transferred": {
            /** @enum {string} */
            action: "transferred";
            changes: {
                new_discussion: components["schemas"]["discussion"];
                new_repository: components["schemas"]["repository-webhooks"];
            };
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion unanswered event */
        "webhook-discussion-unanswered": {
            /** @enum {string} */
            action: "unanswered";
            discussion: components["schemas"]["discussion"];
            old_answer: components["schemas"]["webhooks_answer"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** discussion unlabeled event */
        "webhook-discussion-unlabeled": {
            /** @enum {string} */
            action: "unlabeled";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion unlocked event */
        "webhook-discussion-unlocked": {
            /** @enum {string} */
            action: "unlocked";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** discussion unpinned event */
        "webhook-discussion-unpinned": {
            /** @enum {string} */
            action: "unpinned";
            discussion: components["schemas"]["discussion"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /**
         * fork event
         * @description A user forks a repository.
         */
        "webhook-fork": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            /** @description The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource. */
            forkee: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
            } & {
                allow_forking?: boolean;
                archive_url?: string;
                archived?: boolean;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                clone_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                created_at?: string;
                default_branch?: string;
                deployments_url?: string;
                description?: string | null;
                disabled?: boolean;
                downloads_url?: string;
                events_url?: string;
                /** @enum {boolean} */
                fork?: true;
                forks?: number;
                forks_count?: number;
                forks_url?: string;
                full_name?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                has_downloads?: boolean;
                has_issues?: boolean;
                has_pages?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                homepage?: string | null;
                hooks_url?: string;
                html_url?: string;
                id?: number;
                is_template?: boolean;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                language?: unknown;
                languages_url?: string;
                license?: Record<string, never> | null;
                merges_url?: string;
                milestones_url?: string;
                mirror_url?: unknown;
                name?: string;
                node_id?: string;
                notifications_url?: string;
                open_issues?: number;
                open_issues_count?: number;
                owner?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: number;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
                private?: boolean;
                public?: boolean;
                pulls_url?: string;
                pushed_at?: string;
                releases_url?: string;
                size?: number;
                ssh_url?: string;
                stargazers_count?: number;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                svn_url?: string;
                tags_url?: string;
                teams_url?: string;
                topics?: unknown[];
                trees_url?: string;
                updated_at?: string;
                url?: string;
                visibility?: string;
                watchers?: number;
                watchers_count?: number;
            };
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** github_app_authorization revoked event */
        "webhook-github-app-authorization-revoked": {
            /** @enum {string} */
            action: "revoked";
            sender: components["schemas"]["simple-user"];
        };
        /** gollum event */
        "webhook-gollum": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** @description The pages that were updated. */
            pages: {
                /**
                 * @description The action that was performed on the page. Can be `created` or `edited`.
                 * @enum {string}
                 */
                action: "created" | "edited";
                /**
                 * Format: uri
                 * @description Points to the HTML wiki page.
                 */
                html_url: string;
                /** @description The name of the page. */
                page_name: string;
                /** @description The latest commit SHA of the page. */
                sha: string;
                summary: string | null;
                /** @description The current page title. */
                title: string;
            }[];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** installation created event */
        "webhook-installation-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories?: components["schemas"]["webhooks_repositories"];
            repository?: components["schemas"]["repository-webhooks"];
            requester?: components["schemas"]["webhooks_user"];
            sender: components["schemas"]["simple-user"];
        };
        /** installation deleted event */
        "webhook-installation-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories?: components["schemas"]["webhooks_repositories"];
            repository?: components["schemas"]["repository-webhooks"];
            requester?: unknown;
            sender: components["schemas"]["simple-user"];
        };
        /** installation new_permissions_accepted event */
        "webhook-installation-new-permissions-accepted": {
            /** @enum {string} */
            action: "new_permissions_accepted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories?: components["schemas"]["webhooks_repositories"];
            repository?: components["schemas"]["repository-webhooks"];
            requester?: unknown;
            sender: components["schemas"]["simple-user"];
        };
        /** installation_repositories added event */
        "webhook-installation-repositories-added": {
            /** @enum {string} */
            action: "added";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories_added: components["schemas"]["webhooks_repositories_added"];
            /** @description An array of repository objects, which were removed from the installation. */
            repositories_removed: {
                full_name?: string;
                /** @description Unique identifier of the repository */
                id?: number;
                /** @description The name of the repository. */
                name?: string;
                node_id?: string;
                /** @description Whether the repository is private or public. */
                private?: boolean;
            }[];
            repository?: components["schemas"]["repository-webhooks"];
            repository_selection: components["schemas"]["webhooks_repository_selection"];
            requester: components["schemas"]["webhooks_user"];
            sender: components["schemas"]["simple-user"];
        };
        /** installation_repositories removed event */
        "webhook-installation-repositories-removed": {
            /** @enum {string} */
            action: "removed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories_added: components["schemas"]["webhooks_repositories_added"];
            /** @description An array of repository objects, which were removed from the installation. */
            repositories_removed: {
                full_name: string;
                /** @description Unique identifier of the repository */
                id: number;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** @description Whether the repository is private or public. */
                private: boolean;
            }[];
            repository?: components["schemas"]["repository-webhooks"];
            repository_selection: components["schemas"]["webhooks_repository_selection"];
            requester: components["schemas"]["webhooks_user"];
            sender: components["schemas"]["simple-user"];
        };
        /** installation suspend event */
        "webhook-installation-suspend": {
            /** @enum {string} */
            action: "suspend";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories?: components["schemas"]["webhooks_repositories"];
            repository?: components["schemas"]["repository-webhooks"];
            requester?: unknown;
            sender: components["schemas"]["simple-user"];
        };
        "webhook-installation-target-renamed": {
            account: {
                archived_at?: string | null;
                avatar_url: string;
                created_at?: string;
                description?: unknown;
                events_url?: string;
                followers?: number;
                followers_url?: string;
                following?: number;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                has_organization_projects?: boolean;
                has_repository_projects?: boolean;
                hooks_url?: string;
                html_url: string;
                id: number;
                is_verified?: boolean;
                issues_url?: string;
                login?: string;
                members_url?: string;
                name?: string;
                node_id: string;
                organizations_url?: string;
                public_gists?: number;
                public_members_url?: string;
                public_repos?: number;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                slug?: string;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                updated_at?: string;
                url?: string;
                website_url?: unknown;
                user_view_type?: string;
            };
            /** @enum {string} */
            action: "renamed";
            changes: {
                login?: {
                    from: string;
                };
                slug?: {
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
            target_type: string;
        };
        /** installation unsuspend event */
        "webhook-installation-unsuspend": {
            /** @enum {string} */
            action: "unsuspend";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repositories?: components["schemas"]["webhooks_repositories"];
            repository?: components["schemas"]["repository-webhooks"];
            requester?: unknown;
            sender: components["schemas"]["simple-user"];
        };
        /** issue_comment created event */
        "webhook-issue-comment-created": {
            /** @enum {string} */
            action: "created";
            /**
             * issue comment
             * @description The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
             */
            comment: {
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue comment */
                body: string;
                /** Format: date-time */
                created_at: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the issue comment
                 */
                id: number;
                /** Format: uri */
                issue_url: string;
                node_id: string;
                performed_via_github_app: components["schemas"]["nullable-integration"];
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue comment
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "pull_request_review_thread")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            } & {
                active_lock_reason?: string | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees?: (Record<string, never> | null)[];
                author_association?: string;
                body?: string | null;
                closed_at?: string | null;
                comments?: number;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: number;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                labels_url?: string;
                locked: boolean;
                milestone?: Record<string, never> | null;
                node_id?: string;
                number?: number;
                performed_via_github_app?: Record<string, never> | null;
                reactions?: {
                    "+1"?: number;
                    "-1"?: number;
                    confused?: number;
                    eyes?: number;
                    heart?: number;
                    hooray?: number;
                    laugh?: number;
                    rocket?: number;
                    total_count?: number;
                    url?: string;
                };
                repository_url?: string;
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state: "open" | "closed";
                timeline_url?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    /** Format: int64 */
                    id?: number;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issue_comment deleted event */
        "webhook-issue-comment-deleted": {
            /** @enum {string} */
            action: "deleted";
            comment: components["schemas"]["webhooks_issue_comment"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            } & {
                active_lock_reason?: string | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees?: (Record<string, never> | null)[];
                author_association?: string;
                body?: string | null;
                closed_at?: string | null;
                comments?: number;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: number;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                labels_url?: string;
                locked: boolean;
                milestone?: Record<string, never> | null;
                node_id?: string;
                number?: number;
                performed_via_github_app?: Record<string, never> | null;
                reactions?: {
                    "+1"?: number;
                    "-1"?: number;
                    confused?: number;
                    eyes?: number;
                    heart?: number;
                    hooray?: number;
                    laugh?: number;
                    rocket?: number;
                    total_count?: number;
                    url?: string;
                };
                repository_url?: string;
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state: "open" | "closed";
                timeline_url?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    /** Format: int64 */
                    id?: number;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                    user_view_type?: string;
                };
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issue_comment edited event */
        "webhook-issue-comment-edited": {
            /** @enum {string} */
            action: "edited";
            changes: components["schemas"]["webhooks_changes"];
            comment: components["schemas"]["webhooks_issue_comment"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "pull_request_review_thread")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            } & {
                active_lock_reason?: string | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees?: (Record<string, never> | null)[];
                author_association?: string;
                body?: string | null;
                closed_at?: string | null;
                comments?: number;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: number;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                labels_url?: string;
                locked: boolean;
                milestone?: Record<string, never> | null;
                node_id?: string;
                number?: number;
                performed_via_github_app?: Record<string, never> | null;
                reactions?: {
                    "+1"?: number;
                    "-1"?: number;
                    confused?: number;
                    eyes?: number;
                    heart?: number;
                    hooray?: number;
                    laugh?: number;
                    rocket?: number;
                    total_count?: number;
                    url?: string;
                };
                repository_url?: string;
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state: "open" | "closed";
                timeline_url?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    /** Format: int64 */
                    id?: number;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                };
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues assigned event */
        "webhook-issues-assigned": {
            /**
             * @description The action that was performed.
             * @enum {string}
             */
            action: "assigned";
            assignee?: components["schemas"]["webhooks_user"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues closed event */
        "webhook-issues-closed": {
            /**
             * @description The action that was performed.
             * @enum {string}
             */
            action: "closed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "security_and_analysis" | "reminder" | "pull_request_review_thread")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            } & {
                active_lock_reason?: string | null;
                assignee?: Record<string, never> | null;
                assignees?: (Record<string, never> | null)[];
                author_association?: string;
                body?: string | null;
                closed_at: string | null;
                comments?: number;
                comments_url?: string;
                created_at?: string;
                events_url?: string;
                html_url?: string;
                id?: number;
                labels?: (Record<string, never> | null)[];
                labels_url?: string;
                locked?: boolean;
                milestone?: Record<string, never> | null;
                node_id?: string;
                number?: number;
                performed_via_github_app?: Record<string, never> | null;
                reactions?: {
                    "+1"?: number;
                    "-1"?: number;
                    confused?: number;
                    eyes?: number;
                    heart?: number;
                    hooray?: number;
                    laugh?: number;
                    rocket?: number;
                    total_count?: number;
                    url?: string;
                };
                repository_url?: string;
                /** @enum {string} */
                state: "closed" | "open";
                timeline_url?: string;
                title?: string;
                updated_at?: string;
                url?: string;
                user?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    /** Format: int64 */
                    id?: number;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                    user_view_type?: string;
                };
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues deleted event */
        "webhook-issues-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues demilestoned event */
        "webhook-issues-demilestoned": {
            /** @enum {string} */
            action: "demilestoned";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: ({
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                } | null)[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            milestone?: components["schemas"]["webhooks_milestone"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues edited event */
        "webhook-issues-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the issue. */
            changes: {
                body?: {
                    /** @description The previous version of the body. */
                    from: string;
                };
                title?: {
                    /** @description The previous version of the title. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "security_and_analysis" | "pull_request_review_thread" | "reminder")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                type?: components["schemas"]["issue-type"];
                /** @description Title of the issue */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            label?: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues labeled event */
        "webhook-issues-labeled": {
            /** @enum {string} */
            action: "labeled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "reminder")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                type?: components["schemas"]["issue-type"];
                /** @description Title of the issue */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            label?: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues locked event */
        "webhook-issues-locked": {
            /** @enum {string} */
            action: "locked";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: ({
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                } | null)[];
                /** Format: uri-template */
                labels_url: string;
                /** @enum {boolean} */
                locked: true;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "security_and_analysis")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                type?: components["schemas"]["issue-type"];
                /** @description Title of the issue */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues milestoned event */
        "webhook-issues-milestoned": {
            /** @enum {string} */
            action: "milestoned";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: ({
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                } | null)[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            milestone: components["schemas"]["webhooks_milestone"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues opened event */
        "webhook-issues-opened": {
            /** @enum {string} */
            action: "opened";
            changes?: {
                /**
                 * Issue
                 * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
                 */
                old_issue: {
                    /** @enum {string|null} */
                    active_lock_reason?: "resolved" | "off-topic" | "too heated" | "spam" | null;
                    /** User */
                    assignee?: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    assignees?: ({
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null)[];
                    /**
                     * AuthorAssociation
                     * @description How the author is associated with the repository.
                     * @enum {string}
                     */
                    author_association?: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                    /** @description Contents of the issue */
                    body?: string | null;
                    /** Format: date-time */
                    closed_at?: string | null;
                    comments?: number;
                    /** Format: uri */
                    comments_url?: string;
                    /** Format: date-time */
                    created_at?: string;
                    draft?: boolean;
                    /** Format: uri */
                    events_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    labels?: {
                        /** @description 6-character hex code, without the leading #, identifying the color */
                        color: string;
                        default: boolean;
                        description: string | null;
                        id: number;
                        /** @description The name of the label. */
                        name: string;
                        node_id: string;
                        /**
                         * Format: uri
                         * @description URL for the label
                         */
                        url: string;
                    }[];
                    /** Format: uri-template */
                    labels_url?: string;
                    locked?: boolean;
                    /**
                     * Milestone
                     * @description A collection of related issues and pull requests.
                     */
                    milestone?: {
                        /** Format: date-time */
                        closed_at: string | null;
                        closed_issues: number;
                        /** Format: date-time */
                        created_at: string;
                        /** User */
                        creator: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        description: string | null;
                        /** Format: date-time */
                        due_on: string | null;
                        /** Format: uri */
                        html_url: string;
                        id: number;
                        /** Format: uri */
                        labels_url: string;
                        node_id: string;
                        /** @description The number of the milestone. */
                        number: number;
                        open_issues: number;
                        /**
                         * @description The state of the milestone.
                         * @enum {string}
                         */
                        state: "open" | "closed";
                        /** @description The title of the milestone. */
                        title: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                    } | null;
                    node_id?: string;
                    number: number;
                    /**
                     * App
                     * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                     */
                    performed_via_github_app?: {
                        /** Format: date-time */
                        created_at: string | null;
                        description: string | null;
                        /** @description The list of events for the GitHub app */
                        events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[];
                        /** Format: uri */
                        external_url: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the GitHub app */
                        id: number | null;
                        /** @description The name of the GitHub app */
                        name: string;
                        node_id: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        /** @description The set of permissions for the GitHub app */
                        permissions?: {
                            /** @enum {string} */
                            actions?: "read" | "write";
                            /** @enum {string} */
                            administration?: "read" | "write";
                            /** @enum {string} */
                            checks?: "read" | "write";
                            /** @enum {string} */
                            content_references?: "read" | "write";
                            /** @enum {string} */
                            contents?: "read" | "write";
                            /** @enum {string} */
                            deployments?: "read" | "write";
                            /** @enum {string} */
                            discussions?: "read" | "write";
                            /** @enum {string} */
                            emails?: "read" | "write";
                            /** @enum {string} */
                            environments?: "read" | "write";
                            /** @enum {string} */
                            issues?: "read" | "write";
                            /** @enum {string} */
                            keys?: "read" | "write";
                            /** @enum {string} */
                            members?: "read" | "write";
                            /** @enum {string} */
                            metadata?: "read" | "write";
                            /** @enum {string} */
                            organization_administration?: "read" | "write";
                            /** @enum {string} */
                            organization_hooks?: "read" | "write";
                            /** @enum {string} */
                            organization_packages?: "read" | "write";
                            /** @enum {string} */
                            organization_plan?: "read" | "write";
                            /** @enum {string} */
                            organization_projects?: "read" | "write";
                            /** @enum {string} */
                            organization_secrets?: "read" | "write";
                            /** @enum {string} */
                            organization_self_hosted_runners?: "read" | "write";
                            /** @enum {string} */
                            organization_user_blocking?: "read" | "write";
                            /** @enum {string} */
                            packages?: "read" | "write";
                            /** @enum {string} */
                            pages?: "read" | "write";
                            /** @enum {string} */
                            pull_requests?: "read" | "write";
                            /** @enum {string} */
                            repository_hooks?: "read" | "write";
                            /** @enum {string} */
                            repository_projects?: "read" | "write";
                            /** @enum {string} */
                            secret_scanning_alerts?: "read" | "write";
                            /** @enum {string} */
                            secrets?: "read" | "write";
                            /** @enum {string} */
                            security_events?: "read" | "write";
                            /** @enum {string} */
                            security_scanning_alert?: "read" | "write";
                            /** @enum {string} */
                            single_file?: "read" | "write";
                            /** @enum {string} */
                            statuses?: "read" | "write";
                            /** @enum {string} */
                            team_discussions?: "read" | "write";
                            /** @enum {string} */
                            vulnerability_alerts?: "read" | "write";
                            /** @enum {string} */
                            workflows?: "read" | "write";
                        };
                        /** @description The slug name of the GitHub app */
                        slug?: string;
                        /** Format: date-time */
                        updated_at: string | null;
                    } | null;
                    pull_request?: {
                        /** Format: uri */
                        diff_url?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: date-time */
                        merged_at?: string | null;
                        /** Format: uri */
                        patch_url?: string;
                        /** Format: uri */
                        url?: string;
                    };
                    /** Reactions */
                    reactions?: {
                        "+1": number;
                        "-1": number;
                        confused: number;
                        eyes: number;
                        heart: number;
                        hooray: number;
                        laugh: number;
                        rocket: number;
                        total_count: number;
                        /** Format: uri */
                        url: string;
                    };
                    /** Format: uri */
                    repository_url?: string;
                    /** Sub-issues Summary */
                    sub_issues_summary?: {
                        total: number;
                        completed: number;
                        percent_completed: number;
                    };
                    /**
                     * @description State of the issue; either 'open' or 'closed'
                     * @enum {string}
                     */
                    state?: "open" | "closed";
                    state_reason?: string | null;
                    /** Format: uri */
                    timeline_url?: string;
                    /** @description Title of the issue */
                    title?: string;
                    /** Format: date-time */
                    updated_at?: string;
                    /**
                     * Format: uri
                     * @description URL for the issue
                     */
                    url?: string;
                    /** User */
                    user?: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    type?: components["schemas"]["issue-type"];
                } | null;
                /**
                 * Repository
                 * @description A git repository
                 */
                old_repository: {
                    /**
                     * @description Whether to allow auto-merge for pull requests.
                     * @default false
                     */
                    allow_auto_merge: boolean;
                    /** @description Whether to allow private forks */
                    allow_forking?: boolean;
                    /**
                     * @description Whether to allow merge commits for pull requests.
                     * @default true
                     */
                    allow_merge_commit: boolean;
                    /**
                     * @description Whether to allow rebase merges for pull requests.
                     * @default true
                     */
                    allow_rebase_merge: boolean;
                    /**
                     * @description Whether to allow squash merges for pull requests.
                     * @default true
                     */
                    allow_squash_merge: boolean;
                    allow_update_branch?: boolean;
                    /** Format: uri-template */
                    archive_url: string;
                    /**
                     * @description Whether the repository is archived.
                     * @default false
                     */
                    archived: boolean;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri */
                    clone_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    created_at: number | string;
                    /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                    custom_properties?: {
                        [key: string]: unknown;
                    };
                    /** @description The default branch of the repository. */
                    default_branch: string;
                    /**
                     * @description Whether to delete head branches when pull requests are merged
                     * @default false
                     */
                    delete_branch_on_merge: boolean;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** @description Returns whether or not this repository is disabled. */
                    disabled?: boolean;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    forks: number;
                    forks_count: number;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    git_url: string;
                    /** @description Whether the repository has discussions enabled. */
                    has_discussions?: boolean;
                    /**
                     * @description Whether downloads are enabled.
                     * @default true
                     */
                    has_downloads: boolean;
                    /**
                     * @description Whether issues are enabled.
                     * @default true
                     */
                    has_issues: boolean;
                    has_pages: boolean;
                    /**
                     * @description Whether projects are enabled.
                     * @default true
                     */
                    has_projects: boolean;
                    /**
                     * @description Whether the wiki is enabled.
                     * @default true
                     */
                    has_wiki: boolean;
                    homepage: string | null;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /**
                     * Format: int64
                     * @description Unique identifier of the repository
                     */
                    id: number;
                    is_template?: boolean;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    language: string | null;
                    /** Format: uri */
                    languages_url: string;
                    /** License */
                    license: {
                        key: string;
                        name: string;
                        node_id: string;
                        spdx_id: string;
                        /** Format: uri */
                        url: string | null;
                    } | null;
                    master_branch?: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** Format: uri */
                    mirror_url: string | null;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    open_issues: number;
                    open_issues_count: number;
                    organization?: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        pull: boolean;
                        push: boolean;
                        triage?: boolean;
                    };
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    public?: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    pushed_at: (number | string) | null;
                    /** Format: uri-template */
                    releases_url: string;
                    role_name?: string | null;
                    size: number;
                    ssh_url: string;
                    stargazers?: number;
                    stargazers_count: number;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    svn_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    topics: string[];
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                    /** @enum {string} */
                    visibility: "public" | "private" | "internal";
                    watchers: number;
                    watchers_count: number;
                    /** @description Whether to require commit signoff. */
                    web_commit_signoff_required?: boolean;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "security_and_analysis" | "pull_request_review_thread" | "reminder")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues pinned event */
        "webhook-issues-pinned": {
            /** @enum {string} */
            action: "pinned";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue_2"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues reopened event */
        "webhook-issues-reopened": {
            /** @enum {string} */
            action: "reopened";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: ({
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                } | null)[];
                /** Format: uri-template */
                labels_url: string;
                locked?: boolean;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "reminder")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write" | "admin";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                type?: components["schemas"]["issue-type"];
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues transferred event */
        "webhook-issues-transferred": {
            /** @enum {string} */
            action: "transferred";
            changes: {
                /**
                 * Issue
                 * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
                 */
                new_issue: {
                    /** @enum {string|null} */
                    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                    /** User */
                    assignee?: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    assignees: ({
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null)[];
                    /**
                     * AuthorAssociation
                     * @description How the author is associated with the repository.
                     * @enum {string}
                     */
                    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                    /** @description Contents of the issue */
                    body: string | null;
                    /** Format: date-time */
                    closed_at: string | null;
                    comments: number;
                    /** Format: uri */
                    comments_url: string;
                    /** Format: date-time */
                    created_at: string;
                    draft?: boolean;
                    /** Format: uri */
                    events_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** Format: int64 */
                    id: number;
                    labels?: {
                        /** @description 6-character hex code, without the leading #, identifying the color */
                        color: string;
                        default: boolean;
                        description: string | null;
                        id: number;
                        /** @description The name of the label. */
                        name: string;
                        node_id: string;
                        /**
                         * Format: uri
                         * @description URL for the label
                         */
                        url: string;
                    }[];
                    /** Format: uri-template */
                    labels_url: string;
                    locked?: boolean;
                    /**
                     * Milestone
                     * @description A collection of related issues and pull requests.
                     */
                    milestone: {
                        /** Format: date-time */
                        closed_at: string | null;
                        closed_issues: number;
                        /** Format: date-time */
                        created_at: string;
                        /** User */
                        creator: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        description: string | null;
                        /** Format: date-time */
                        due_on: string | null;
                        /** Format: uri */
                        html_url: string;
                        id: number;
                        /** Format: uri */
                        labels_url: string;
                        node_id: string;
                        /** @description The number of the milestone. */
                        number: number;
                        open_issues: number;
                        /**
                         * @description The state of the milestone.
                         * @enum {string}
                         */
                        state: "open" | "closed";
                        /** @description The title of the milestone. */
                        title: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                    } | null;
                    node_id: string;
                    number: number;
                    /**
                     * App
                     * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                     */
                    performed_via_github_app?: {
                        /** Format: date-time */
                        created_at: string | null;
                        description: string | null;
                        /** @description The list of events for the GitHub app */
                        events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[];
                        /** Format: uri */
                        external_url: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the GitHub app */
                        id: number | null;
                        /** @description The name of the GitHub app */
                        name: string;
                        node_id: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        /** @description The set of permissions for the GitHub app */
                        permissions?: {
                            /** @enum {string} */
                            actions?: "read" | "write";
                            /** @enum {string} */
                            administration?: "read" | "write";
                            /** @enum {string} */
                            checks?: "read" | "write";
                            /** @enum {string} */
                            content_references?: "read" | "write";
                            /** @enum {string} */
                            contents?: "read" | "write";
                            /** @enum {string} */
                            deployments?: "read" | "write";
                            /** @enum {string} */
                            discussions?: "read" | "write";
                            /** @enum {string} */
                            emails?: "read" | "write";
                            /** @enum {string} */
                            environments?: "read" | "write";
                            /** @enum {string} */
                            issues?: "read" | "write";
                            /** @enum {string} */
                            keys?: "read" | "write";
                            /** @enum {string} */
                            members?: "read" | "write";
                            /** @enum {string} */
                            metadata?: "read" | "write";
                            /** @enum {string} */
                            organization_administration?: "read" | "write";
                            /** @enum {string} */
                            organization_hooks?: "read" | "write";
                            /** @enum {string} */
                            organization_packages?: "read" | "write";
                            /** @enum {string} */
                            organization_plan?: "read" | "write";
                            /** @enum {string} */
                            organization_projects?: "read" | "write";
                            /** @enum {string} */
                            organization_secrets?: "read" | "write";
                            /** @enum {string} */
                            organization_self_hosted_runners?: "read" | "write";
                            /** @enum {string} */
                            organization_user_blocking?: "read" | "write";
                            /** @enum {string} */
                            packages?: "read" | "write";
                            /** @enum {string} */
                            pages?: "read" | "write";
                            /** @enum {string} */
                            pull_requests?: "read" | "write";
                            /** @enum {string} */
                            repository_hooks?: "read" | "write";
                            /** @enum {string} */
                            repository_projects?: "read" | "write";
                            /** @enum {string} */
                            secret_scanning_alerts?: "read" | "write";
                            /** @enum {string} */
                            secrets?: "read" | "write";
                            /** @enum {string} */
                            security_events?: "read" | "write";
                            /** @enum {string} */
                            security_scanning_alert?: "read" | "write";
                            /** @enum {string} */
                            single_file?: "read" | "write";
                            /** @enum {string} */
                            statuses?: "read" | "write";
                            /** @enum {string} */
                            team_discussions?: "read" | "write";
                            /** @enum {string} */
                            vulnerability_alerts?: "read" | "write";
                            /** @enum {string} */
                            workflows?: "read" | "write";
                        };
                        /** @description The slug name of the GitHub app */
                        slug?: string;
                        /** Format: date-time */
                        updated_at: string | null;
                    } | null;
                    pull_request?: {
                        /** Format: uri */
                        diff_url?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: date-time */
                        merged_at?: string | null;
                        /** Format: uri */
                        patch_url?: string;
                        /** Format: uri */
                        url?: string;
                    };
                    /** Reactions */
                    reactions: {
                        "+1": number;
                        "-1": number;
                        confused: number;
                        eyes: number;
                        heart: number;
                        hooray: number;
                        laugh: number;
                        rocket: number;
                        total_count: number;
                        /** Format: uri */
                        url: string;
                    };
                    /** Format: uri */
                    repository_url: string;
                    /** Sub-issues Summary */
                    sub_issues_summary?: {
                        total: number;
                        completed: number;
                        percent_completed: number;
                    };
                    /**
                     * @description State of the issue; either 'open' or 'closed'
                     * @enum {string}
                     */
                    state?: "open" | "closed";
                    state_reason?: string | null;
                    /** Format: uri */
                    timeline_url?: string;
                    /** @description Title of the issue */
                    title: string;
                    type?: components["schemas"]["issue-type"];
                    /** Format: date-time */
                    updated_at: string;
                    /**
                     * Format: uri
                     * @description URL for the issue
                     */
                    url: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /**
                 * Repository
                 * @description A git repository
                 */
                new_repository: {
                    /**
                     * @description Whether to allow auto-merge for pull requests.
                     * @default false
                     */
                    allow_auto_merge: boolean;
                    /** @description Whether to allow private forks */
                    allow_forking?: boolean;
                    /**
                     * @description Whether to allow merge commits for pull requests.
                     * @default true
                     */
                    allow_merge_commit: boolean;
                    /**
                     * @description Whether to allow rebase merges for pull requests.
                     * @default true
                     */
                    allow_rebase_merge: boolean;
                    /**
                     * @description Whether to allow squash merges for pull requests.
                     * @default true
                     */
                    allow_squash_merge: boolean;
                    allow_update_branch?: boolean;
                    /** Format: uri-template */
                    archive_url: string;
                    /**
                     * @description Whether the repository is archived.
                     * @default false
                     */
                    archived: boolean;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri */
                    clone_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    created_at: number | string;
                    /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                    custom_properties?: {
                        [key: string]: unknown;
                    };
                    /** @description The default branch of the repository. */
                    default_branch: string;
                    /**
                     * @description Whether to delete head branches when pull requests are merged
                     * @default false
                     */
                    delete_branch_on_merge: boolean;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** @description Returns whether or not this repository is disabled. */
                    disabled?: boolean;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    forks: number;
                    forks_count: number;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    git_url: string;
                    /**
                     * @description Whether downloads are enabled.
                     * @default true
                     */
                    has_downloads: boolean;
                    /**
                     * @description Whether issues are enabled.
                     * @default true
                     */
                    has_issues: boolean;
                    has_pages: boolean;
                    /**
                     * @description Whether projects are enabled.
                     * @default true
                     */
                    has_projects: boolean;
                    /**
                     * @description Whether the wiki is enabled.
                     * @default true
                     */
                    has_wiki: boolean;
                    /**
                     * @description Whether discussions are enabled.
                     * @default false
                     */
                    has_discussions: boolean;
                    homepage: string | null;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /**
                     * Format: int64
                     * @description Unique identifier of the repository
                     */
                    id: number;
                    is_template?: boolean;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    language: string | null;
                    /** Format: uri */
                    languages_url: string;
                    /** License */
                    license: {
                        key: string;
                        name: string;
                        node_id: string;
                        spdx_id: string;
                        /** Format: uri */
                        url: string | null;
                    } | null;
                    master_branch?: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** Format: uri */
                    mirror_url: string | null;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    open_issues: number;
                    open_issues_count: number;
                    organization?: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        pull: boolean;
                        push: boolean;
                        triage?: boolean;
                    };
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    public?: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    pushed_at: (number | string) | null;
                    /** Format: uri-template */
                    releases_url: string;
                    role_name?: string | null;
                    size: number;
                    ssh_url: string;
                    stargazers?: number;
                    stargazers_count: number;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    svn_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    topics: string[];
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                    /** @enum {string} */
                    visibility: "public" | "private" | "internal";
                    watchers: number;
                    watchers_count: number;
                    /** @description Whether to require contributors to sign off on web-based commits */
                    web_commit_signoff_required?: boolean;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue_2"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues typed event */
        "webhook-issues-typed": {
            /** @enum {string} */
            action: "typed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue"];
            type: components["schemas"]["issue-type"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues unassigned event */
        "webhook-issues-unassigned": {
            /**
             * @description The action that was performed.
             * @enum {string}
             */
            action: "unassigned";
            assignee?: components["schemas"]["webhooks_user_mannequin"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues unlabeled event */
        "webhook-issues-unlabeled": {
            /** @enum {string} */
            action: "unlabeled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue"];
            label?: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues unlocked event */
        "webhook-issues-unlocked": {
            /** @enum {string} */
            action: "unlocked";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /**
             * Issue
             * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
             */
            issue: {
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description Contents of the issue */
                body: string | null;
                /** Format: date-time */
                closed_at: string | null;
                comments: number;
                /** Format: uri */
                comments_url: string;
                /** Format: date-time */
                created_at: string;
                draft?: boolean;
                /** Format: uri */
                events_url: string;
                /** Format: uri */
                html_url: string;
                /** Format: int64 */
                id: number;
                labels?: ({
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                } | null)[];
                /** Format: uri-template */
                labels_url: string;
                /** @enum {boolean} */
                locked: false;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /**
                 * App
                 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                 */
                performed_via_github_app?: {
                    /** Format: date-time */
                    created_at: string | null;
                    description: string | null;
                    /** @description The list of events for the GitHub app */
                    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[];
                    /** Format: uri */
                    external_url: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: number | null;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                        /** @enum {string} */
                        actions?: "read" | "write";
                        /** @enum {string} */
                        administration?: "read" | "write";
                        /** @enum {string} */
                        checks?: "read" | "write";
                        /** @enum {string} */
                        content_references?: "read" | "write";
                        /** @enum {string} */
                        contents?: "read" | "write";
                        /** @enum {string} */
                        deployments?: "read" | "write";
                        /** @enum {string} */
                        discussions?: "read" | "write";
                        /** @enum {string} */
                        emails?: "read" | "write";
                        /** @enum {string} */
                        environments?: "read" | "write";
                        /** @enum {string} */
                        issues?: "read" | "write";
                        /** @enum {string} */
                        keys?: "read" | "write";
                        /** @enum {string} */
                        members?: "read" | "write";
                        /** @enum {string} */
                        metadata?: "read" | "write";
                        /** @enum {string} */
                        organization_administration?: "read" | "write";
                        /** @enum {string} */
                        organization_hooks?: "read" | "write";
                        /** @enum {string} */
                        organization_packages?: "read" | "write";
                        /** @enum {string} */
                        organization_plan?: "read" | "write";
                        /** @enum {string} */
                        organization_projects?: "read" | "write";
                        /** @enum {string} */
                        organization_secrets?: "read" | "write";
                        /** @enum {string} */
                        organization_self_hosted_runners?: "read" | "write";
                        /** @enum {string} */
                        organization_user_blocking?: "read" | "write";
                        /** @enum {string} */
                        packages?: "read" | "write";
                        /** @enum {string} */
                        pages?: "read" | "write";
                        /** @enum {string} */
                        pull_requests?: "read" | "write";
                        /** @enum {string} */
                        repository_hooks?: "read" | "write";
                        /** @enum {string} */
                        repository_projects?: "read" | "write";
                        /** @enum {string} */
                        secret_scanning_alerts?: "read" | "write";
                        /** @enum {string} */
                        secrets?: "read" | "write";
                        /** @enum {string} */
                        security_events?: "read" | "write";
                        /** @enum {string} */
                        security_scanning_alert?: "read" | "write";
                        /** @enum {string} */
                        single_file?: "read" | "write";
                        /** @enum {string} */
                        statuses?: "read" | "write";
                        /** @enum {string} */
                        team_discussions?: "read" | "write";
                        /** @enum {string} */
                        vulnerability_alerts?: "read" | "write";
                        /** @enum {string} */
                        workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: string | null;
                } | null;
                pull_request?: {
                    /** Format: uri */
                    diff_url?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: date-time */
                    merged_at?: string | null;
                    /** Format: uri */
                    patch_url?: string;
                    /** Format: uri */
                    url?: string;
                };
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                repository_url: string;
                /** Sub-issues Summary */
                sub_issues_summary?: {
                    total: number;
                    completed: number;
                    percent_completed: number;
                };
                /**
                 * @description State of the issue; either 'open' or 'closed'
                 * @enum {string}
                 */
                state?: "open" | "closed";
                state_reason?: string | null;
                /** Format: uri */
                timeline_url?: string;
                /** @description Title of the issue */
                title: string;
                type?: components["schemas"]["issue-type"];
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the issue
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues unpinned event */
        "webhook-issues-unpinned": {
            /** @enum {string} */
            action: "unpinned";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue_2"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** issues untyped event */
        "webhook-issues-untyped": {
            /** @enum {string} */
            action: "untyped";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            issue: components["schemas"]["webhooks_issue"];
            type: components["schemas"]["issue-type"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** label created event */
        "webhook-label-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** label deleted event */
        "webhook-label-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** label edited event */
        "webhook-label-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the label if the action was `edited`. */
            changes?: {
                color?: {
                    /** @description The previous version of the color if the action was `edited`. */
                    from: string;
                };
                description?: {
                    /** @description The previous version of the description if the action was `edited`. */
                    from: string;
                };
                name?: {
                    /** @description The previous version of the name if the action was `edited`. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label: components["schemas"]["webhooks_label"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** marketplace_purchase cancelled event */
        "webhook-marketplace-purchase-cancelled": {
            /** @enum {string} */
            action: "cancelled";
            effective_date: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            marketplace_purchase: components["schemas"]["webhooks_marketplace_purchase"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            previous_marketplace_purchase?: components["schemas"]["webhooks_previous_marketplace_purchase"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** marketplace_purchase changed event */
        "webhook-marketplace-purchase-changed": {
            /** @enum {string} */
            action: "changed";
            effective_date: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            marketplace_purchase: components["schemas"]["webhooks_marketplace_purchase"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Marketplace Purchase */
            previous_marketplace_purchase?: {
                account: {
                    id: number;
                    login: string;
                    node_id: string;
                    organization_billing_email: string | null;
                    type: string;
                };
                billing_cycle: string;
                free_trial_ends_on: string | null;
                next_billing_date?: string | null;
                on_free_trial: boolean | null;
                plan: {
                    bullets: string[];
                    description: string;
                    has_free_trial: boolean;
                    id: number;
                    monthly_price_in_cents: number;
                    name: string;
                    /** @enum {string} */
                    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
                    unit_name: string | null;
                    yearly_price_in_cents: number;
                };
                unit_count: number;
            };
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** marketplace_purchase pending_change event */
        "webhook-marketplace-purchase-pending-change": {
            /** @enum {string} */
            action: "pending_change";
            effective_date: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            marketplace_purchase: components["schemas"]["webhooks_marketplace_purchase"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Marketplace Purchase */
            previous_marketplace_purchase?: {
                account: {
                    id: number;
                    login: string;
                    node_id: string;
                    organization_billing_email: string | null;
                    type: string;
                };
                billing_cycle: string;
                free_trial_ends_on: string | null;
                next_billing_date?: string | null;
                on_free_trial: boolean;
                plan: {
                    bullets: string[];
                    description: string;
                    has_free_trial: boolean;
                    id: number;
                    monthly_price_in_cents: number;
                    name: string;
                    /** @enum {string} */
                    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
                    unit_name: string | null;
                    yearly_price_in_cents: number;
                };
                unit_count: number;
            };
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** marketplace_purchase pending_change_cancelled event */
        "webhook-marketplace-purchase-pending-change-cancelled": {
            /** @enum {string} */
            action: "pending_change_cancelled";
            effective_date: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** Marketplace Purchase */
            marketplace_purchase: {
                account: {
                    id: number;
                    login: string;
                    node_id: string;
                    organization_billing_email: string | null;
                    type: string;
                };
                billing_cycle: string;
                free_trial_ends_on: unknown;
                next_billing_date: string | null;
                on_free_trial: boolean;
                plan: {
                    bullets: string[];
                    description: string;
                    has_free_trial: boolean;
                    id: number;
                    monthly_price_in_cents: number;
                    name: string;
                    /** @enum {string} */
                    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
                    unit_name: string | null;
                    yearly_price_in_cents: number;
                };
                unit_count: number;
            };
            organization?: components["schemas"]["organization-simple-webhooks"];
            previous_marketplace_purchase?: components["schemas"]["webhooks_previous_marketplace_purchase"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** marketplace_purchase purchased event */
        "webhook-marketplace-purchase-purchased": {
            /** @enum {string} */
            action: "purchased";
            effective_date: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            marketplace_purchase: components["schemas"]["webhooks_marketplace_purchase"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            previous_marketplace_purchase?: components["schemas"]["webhooks_previous_marketplace_purchase"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** member added event */
        "webhook-member-added": {
            /** @enum {string} */
            action: "added";
            changes?: {
                /** @description This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
                 *     role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
                 *     assigned to the collaborator, use the `role_name` field instead, which will provide the full
                 *     role name, including custom roles. */
                permission?: {
                    /** @enum {string} */
                    to: "write" | "admin" | "read";
                };
                /** @description The role assigned to the collaborator. */
                role_name?: {
                    to: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            member: components["schemas"]["webhooks_user"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** member edited event */
        "webhook-member-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the collaborator permissions */
            changes: {
                old_permission?: {
                    /** @description The previous permissions of the collaborator if the action was edited. */
                    from: string;
                };
                permission?: {
                    from?: string | null;
                    to?: string | null;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            member: components["schemas"]["webhooks_user"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** member removed event */
        "webhook-member-removed": {
            /** @enum {string} */
            action: "removed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            member: components["schemas"]["webhooks_user"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** membership added event */
        "webhook-membership-added": {
            /** @enum {string} */
            action: "added";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            member: components["schemas"]["webhooks_user"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            /**
             * @description The scope of the membership. Currently, can only be `team`.
             * @enum {string}
             */
            scope: "team";
            /** User */
            sender: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            team: components["schemas"]["webhooks_team"];
        };
        /** membership removed event */
        "webhook-membership-removed": {
            /** @enum {string} */
            action: "removed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            member: components["schemas"]["webhooks_user"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            /**
             * @description The scope of the membership. Currently, can only be `team`.
             * @enum {string}
             */
            scope: "team" | "organization";
            /** User */
            sender: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            team: components["schemas"]["webhooks_team"];
        };
        "webhook-merge-group-checks-requested": {
            /** @enum {string} */
            action: "checks_requested";
            installation?: components["schemas"]["simple-installation"];
            merge_group: components["schemas"]["merge-group"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        "webhook-merge-group-destroyed": {
            /** @enum {string} */
            action: "destroyed";
            /**
             * @description Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
             * @enum {string}
             */
            reason?: "merged" | "invalidated" | "dequeued";
            installation?: components["schemas"]["simple-installation"];
            merge_group: components["schemas"]["merge-group"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** meta deleted event */
        "webhook-meta-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            /** @description The deleted webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace. */
            hook: {
                active: boolean;
                config: {
                    /** @enum {string} */
                    content_type: "json" | "form";
                    insecure_ssl: string;
                    secret?: string;
                    /** Format: uri */
                    url: string;
                };
                created_at: string;
                events: ("*" | "branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "create" | "delete" | "deployment" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "meta" | "milestone" | "organization" | "org_block" | "package" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "pull_request_review_thread" | "push" | "registry_package" | "release" | "repository" | "repository_import" | "repository_vulnerability_alert" | "secret_scanning_alert" | "secret_scanning_alert_location" | "security_and_analysis" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_job" | "workflow_run" | "repository_dispatch" | "projects_v2_item")[];
                id: number;
                name: string;
                type: string;
                updated_at: string;
            };
            /** @description The id of the modified webhook. */
            hook_id: number;
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["nullable-repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** milestone closed event */
        "webhook-milestone-closed": {
            /** @enum {string} */
            action: "closed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            milestone: components["schemas"]["webhooks_milestone"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** milestone created event */
        "webhook-milestone-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            milestone: components["schemas"]["webhooks_milestone_3"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** milestone deleted event */
        "webhook-milestone-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            milestone: components["schemas"]["webhooks_milestone"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** milestone edited event */
        "webhook-milestone-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the milestone if the action was `edited`. */
            changes: {
                description?: {
                    /** @description The previous version of the description if the action was `edited`. */
                    from: string;
                };
                due_on?: {
                    /** @description The previous version of the due date if the action was `edited`. */
                    from: string;
                };
                title?: {
                    /** @description The previous version of the title if the action was `edited`. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            milestone: components["schemas"]["webhooks_milestone"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** milestone opened event */
        "webhook-milestone-opened": {
            /** @enum {string} */
            action: "opened";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            milestone: components["schemas"]["webhooks_milestone_3"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** org_block blocked event */
        "webhook-org-block-blocked": {
            /** @enum {string} */
            action: "blocked";
            blocked_user: components["schemas"]["webhooks_user"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** org_block unblocked event */
        "webhook-org-block-unblocked": {
            /** @enum {string} */
            action: "unblocked";
            blocked_user: components["schemas"]["webhooks_user"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** organization deleted event */
        "webhook-organization-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            membership?: components["schemas"]["webhooks_membership"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** organization member_added event */
        "webhook-organization-member-added": {
            /** @enum {string} */
            action: "member_added";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            membership: components["schemas"]["webhooks_membership"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** organization member_invited event */
        "webhook-organization-member-invited": {
            /** @enum {string} */
            action: "member_invited";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The invitation for the user or email if the action is `member_invited`. */
            invitation: {
                /** Format: date-time */
                created_at: string;
                email: string | null;
                /** Format: date-time */
                failed_at: string | null;
                failed_reason: string | null;
                id: number;
                /** Format: uri */
                invitation_teams_url: string;
                /** User */
                inviter: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                login: string | null;
                node_id: string;
                role: string;
                team_count: number;
                invitation_source?: string;
            };
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            user?: components["schemas"]["webhooks_user"];
        };
        /** organization member_removed event */
        "webhook-organization-member-removed": {
            /** @enum {string} */
            action: "member_removed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            membership: components["schemas"]["webhooks_membership"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** organization renamed event */
        "webhook-organization-renamed": {
            /** @enum {string} */
            action: "renamed";
            changes?: {
                login?: {
                    from?: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            membership?: components["schemas"]["webhooks_membership"];
            organization: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Ruby Gems metadata */
        "webhook-rubygems-metadata": {
            name?: string;
            description?: string;
            readme?: string;
            homepage?: string;
            version_info?: {
                version?: string;
            };
            platform?: string;
            metadata?: {
                [key: string]: string;
            };
            repo?: string;
            dependencies?: {
                [key: string]: string;
            }[];
            commit_oid?: string;
        };
        /** package published event */
        "webhook-package-published": {
            /** @enum {string} */
            action: "published";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** @description Information about the package. */
            package: {
                created_at: string | null;
                description: string | null;
                ecosystem: string;
                /** Format: uri */
                html_url: string;
                id: number;
                name: string;
                namespace: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                package_type: string;
                package_version: {
                    /** User */
                    author?: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    body?: string | Record<string, never>;
                    body_html?: string;
                    container_metadata?: {
                        labels?: Record<string, never> | null;
                        manifest?: Record<string, never> | null;
                        tag?: {
                            digest?: string;
                            name?: string;
                        };
                    } | null;
                    created_at?: string;
                    description: string;
                    docker_metadata?: {
                        tags?: string[];
                    }[];
                    draft?: boolean;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    installation_command: string;
                    manifest?: string;
                    metadata: {
                        [key: string]: unknown;
                    }[];
                    name: string;
                    npm_metadata?: {
                        name?: string;
                        version?: string;
                        npm_user?: string;
                        author?: Record<string, never> | null;
                        bugs?: Record<string, never> | null;
                        dependencies?: Record<string, never>;
                        dev_dependencies?: Record<string, never>;
                        peer_dependencies?: Record<string, never>;
                        optional_dependencies?: Record<string, never>;
                        description?: string;
                        dist?: Record<string, never> | null;
                        git_head?: string;
                        homepage?: string;
                        license?: string;
                        main?: string;
                        repository?: Record<string, never> | null;
                        scripts?: Record<string, never>;
                        id?: string;
                        node_version?: string;
                        npm_version?: string;
                        has_shrinkwrap?: boolean;
                        maintainers?: Record<string, never>[];
                        contributors?: Record<string, never>[];
                        engines?: Record<string, never>;
                        keywords?: string[];
                        files?: string[];
                        bin?: Record<string, never>;
                        man?: Record<string, never>;
                        directories?: Record<string, never> | null;
                        os?: string[];
                        cpu?: string[];
                        readme?: string;
                        installation_command?: string;
                        release_id?: number;
                        commit_oid?: string;
                        published_via_actions?: boolean;
                        deleted_by_id?: number;
                    } | null;
                    nuget_metadata?: {
                        id?: number | string;
                        name?: string;
                        value?: boolean | string | number | {
                            url?: string;
                            branch?: string;
                            commit?: string;
                            type?: string;
                        };
                    }[] | null;
                    package_files: {
                        content_type: string;
                        created_at: string;
                        /** Format: uri */
                        download_url: string;
                        id: number;
                        md5: string | null;
                        name: string;
                        sha1: string | null;
                        sha256: string | null;
                        size: number;
                        state: string | null;
                        updated_at: string;
                    }[];
                    package_url?: string;
                    prerelease?: boolean;
                    release?: {
                        /** User */
                        author: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        created_at: string;
                        draft: boolean;
                        /** Format: uri */
                        html_url: string;
                        id: number;
                        name: string | null;
                        prerelease: boolean;
                        published_at: string;
                        tag_name: string;
                        target_commitish: string;
                        /** Format: uri */
                        url: string;
                    };
                    rubygems_metadata?: components["schemas"]["webhook-rubygems-metadata"][];
                    source_url?: string;
                    summary: string;
                    tag_name?: string;
                    target_commitish?: string;
                    target_oid?: string;
                    updated_at?: string;
                    version: string;
                } | null;
                registry: {
                    /** Format: uri */
                    about_url: string;
                    name: string;
                    type: string;
                    /** Format: uri */
                    url: string;
                    vendor: string;
                } | null;
                updated_at: string | null;
            };
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** package updated event */
        "webhook-package-updated": {
            /** @enum {string} */
            action: "updated";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** @description Information about the package. */
            package: {
                created_at: string;
                description: string | null;
                ecosystem: string;
                /** Format: uri */
                html_url: string;
                id: number;
                name: string;
                namespace: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                package_type: string;
                package_version: {
                    /** User */
                    author: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    body: string;
                    body_html: string;
                    created_at: string;
                    description: string;
                    docker_metadata?: {
                        tags?: string[];
                    }[];
                    draft?: boolean;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    installation_command: string;
                    manifest?: string;
                    metadata: {
                        [key: string]: unknown;
                    }[];
                    name: string;
                    package_files: {
                        content_type: string;
                        created_at: string;
                        /** Format: uri */
                        download_url: string;
                        id: number;
                        md5: string | null;
                        name: string;
                        sha1: string | null;
                        sha256: string;
                        size: number;
                        state: string;
                        updated_at: string;
                    }[];
                    package_url?: string;
                    prerelease?: boolean;
                    release?: {
                        /** User */
                        author: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        created_at: string;
                        draft: boolean;
                        /** Format: uri */
                        html_url: string;
                        id: number;
                        name: string;
                        prerelease: boolean;
                        published_at: string;
                        tag_name: string;
                        target_commitish: string;
                        /** Format: uri */
                        url: string;
                    };
                    rubygems_metadata?: components["schemas"]["webhook-rubygems-metadata"][];
                    /** Format: uri */
                    source_url?: string;
                    summary: string;
                    tag_name?: string;
                    target_commitish: string;
                    target_oid: string;
                    updated_at: string;
                    version: string;
                };
                registry: {
                    /** Format: uri */
                    about_url: string;
                    name: string;
                    type: string;
                    /** Format: uri */
                    url: string;
                    vendor: string;
                } | null;
                updated_at: string;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** page_build event */
        "webhook-page-build": {
            /** @description The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself. */
            build: {
                commit: string | null;
                created_at: string;
                duration: number;
                error: {
                    message: string | null;
                };
                /** User */
                pusher: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                status: string;
                updated_at: string;
                /** Format: uri */
                url: string;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            id: number;
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** personal_access_token_request approved event */
        "webhook-personal-access-token-request-approved": {
            /** @enum {string} */
            action: "approved";
            personal_access_token_request: components["schemas"]["personal-access-token-request"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            organization: components["schemas"]["organization-simple-webhooks"];
            sender: components["schemas"]["simple-user"];
            installation: components["schemas"]["simple-installation"];
        };
        /** personal_access_token_request cancelled event */
        "webhook-personal-access-token-request-cancelled": {
            /** @enum {string} */
            action: "cancelled";
            personal_access_token_request: components["schemas"]["personal-access-token-request"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            organization: components["schemas"]["organization-simple-webhooks"];
            sender: components["schemas"]["simple-user"];
            installation: components["schemas"]["simple-installation"];
        };
        /** personal_access_token_request created event */
        "webhook-personal-access-token-request-created": {
            /** @enum {string} */
            action: "created";
            personal_access_token_request: components["schemas"]["personal-access-token-request"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            organization: components["schemas"]["organization-simple-webhooks"];
            sender: components["schemas"]["simple-user"];
            installation?: components["schemas"]["simple-installation"];
        };
        /** personal_access_token_request denied event */
        "webhook-personal-access-token-request-denied": {
            /** @enum {string} */
            action: "denied";
            personal_access_token_request: components["schemas"]["personal-access-token-request"];
            organization: components["schemas"]["organization-simple-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            sender: components["schemas"]["simple-user"];
            installation: components["schemas"]["simple-installation"];
        };
        "webhook-ping": {
            /**
             * Webhook
             * @description The webhook that is being pinged
             */
            hook?: {
                /** @description Determines whether the hook is actually triggered for the events it subscribes to. */
                active: boolean;
                /** @description Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app. */
                app_id?: number;
                config: {
                    content_type?: components["schemas"]["webhook-config-content-type"];
                    insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                    secret?: components["schemas"]["webhook-config-secret"];
                    url?: components["schemas"]["webhook-config-url"];
                };
                /** Format: date-time */
                created_at: string;
                /** Format: uri */
                deliveries_url?: string;
                /** @description Determines what events the hook is triggered for. Default: ['push']. */
                events: string[];
                /** @description Unique identifier of the webhook. */
                id: number;
                last_response?: components["schemas"]["hook-response"];
                /**
                 * @description The type of webhook. The only valid value is 'web'.
                 * @enum {string}
                 */
                name: "web";
                /** Format: uri */
                ping_url?: string;
                /** Format: uri */
                test_url?: string;
                type: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url?: string;
            };
            /** @description The ID of the webhook that triggered the ping. */
            hook_id?: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
            /** @description Random string of GitHub zen. */
            zen?: string;
        };
        /** @description The webhooks ping payload encoded with URL encoding. */
        "webhook-ping-form-encoded": {
            /** @description A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object. */
            payload: string;
        };
        /** project_card converted event */
        "webhook-project-card-converted": {
            /** @enum {string} */
            action: "converted";
            changes: {
                note: {
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_card: components["schemas"]["webhooks_project_card"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project_card created event */
        "webhook-project-card-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_card: components["schemas"]["webhooks_project_card"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project_card deleted event */
        "webhook-project-card-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Project Card */
            project_card: {
                after_id?: number | null;
                /** @description Whether or not the card is archived */
                archived: boolean;
                column_id: number | null;
                /** Format: uri */
                column_url: string;
                /** Format: uri */
                content_url?: string;
                /** Format: date-time */
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** @description The project card's ID */
                id: number;
                node_id: string;
                note: string | null;
                /** Format: uri */
                project_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
            };
            repository?: components["schemas"]["nullable-repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project_card edited event */
        "webhook-project-card-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                note: {
                    from: string | null;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_card: components["schemas"]["webhooks_project_card"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project_card moved event */
        "webhook-project-card-moved": {
            /** @enum {string} */
            action: "moved";
            changes?: {
                column_id: {
                    from: number;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_card: {
                after_id?: number | null;
                /** @description Whether or not the card is archived */
                archived: boolean;
                column_id: number;
                /** Format: uri */
                column_url: string;
                /** Format: uri */
                content_url?: string;
                /** Format: date-time */
                created_at: string;
                /** User */
                creator: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** @description The project card's ID */
                id: number;
                node_id: string;
                note: string | null;
                /** Format: uri */
                project_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
            } & {
                after_id: number | null;
                archived?: boolean;
                column_id?: number;
                column_url?: string;
                created_at?: string;
                creator?: {
                    avatar_url?: string;
                    events_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    id?: number;
                    login?: string;
                    node_id?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    repos_url?: string;
                    site_admin?: boolean;
                    starred_url?: string;
                    subscriptions_url?: string;
                    type?: string;
                    url?: string;
                } | null;
                id?: number;
                node_id?: string;
                note?: string | null;
                project_url?: string;
                updated_at?: string;
                url?: string;
            };
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project closed event */
        "webhook-project-closed": {
            /** @enum {string} */
            action: "closed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project: components["schemas"]["webhooks_project"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project_column created event */
        "webhook-project-column-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_column: components["schemas"]["webhooks_project_column"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** project_column deleted event */
        "webhook-project-column-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_column: components["schemas"]["webhooks_project_column"];
            repository?: components["schemas"]["nullable-repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** project_column edited event */
        "webhook-project-column-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                name?: {
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_column: components["schemas"]["webhooks_project_column"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** project_column moved event */
        "webhook-project-column-moved": {
            /** @enum {string} */
            action: "moved";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project_column: components["schemas"]["webhooks_project_column"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project created event */
        "webhook-project-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project: components["schemas"]["webhooks_project"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** project deleted event */
        "webhook-project-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project: components["schemas"]["webhooks_project"];
            repository?: components["schemas"]["nullable-repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** project edited event */
        "webhook-project-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the project if the action was `edited`. */
            changes?: {
                body?: {
                    /** @description The previous version of the body if the action was `edited`. */
                    from: string;
                };
                name?: {
                    /** @description The changes to the project if the action was `edited`. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project: components["schemas"]["webhooks_project"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** project reopened event */
        "webhook-project-reopened": {
            /** @enum {string} */
            action: "reopened";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            project: components["schemas"]["webhooks_project"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Project Closed Event */
        "webhook-projects-v2-project-closed": {
            /** @enum {string} */
            action: "closed";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2: components["schemas"]["projects-v2"];
            sender: components["schemas"]["simple-user"];
        };
        /** @description A project was created */
        "webhook-projects-v2-project-created": {
            /** @enum {string} */
            action: "created";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2: components["schemas"]["projects-v2"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Project Deleted Event */
        "webhook-projects-v2-project-deleted": {
            /** @enum {string} */
            action: "deleted";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2: components["schemas"]["projects-v2"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Project Edited Event */
        "webhook-projects-v2-project-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                description?: {
                    from?: string | null;
                    to?: string | null;
                };
                public?: {
                    from?: boolean;
                    to?: boolean;
                };
                short_description?: {
                    from?: string | null;
                    to?: string | null;
                };
                title?: {
                    from?: string;
                    to?: string;
                };
            };
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2: components["schemas"]["projects-v2"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Archived Event */
        "webhook-projects-v2-item-archived": {
            /** @enum {string} */
            action: "archived";
            changes: components["schemas"]["webhooks_project_changes"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Converted Event */
        "webhook-projects-v2-item-converted": {
            /** @enum {string} */
            action: "converted";
            changes: {
                content_type?: {
                    from?: string | null;
                    to?: string;
                };
            };
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Created Event */
        "webhook-projects-v2-item-created": {
            /** @enum {string} */
            action: "created";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Deleted Event */
        "webhook-projects-v2-item-deleted": {
            /** @enum {string} */
            action: "deleted";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Edited Event */
        "webhook-projects-v2-item-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes made to the item may involve modifications in the item's fields and draft issue body.
             *     It includes altered values for text, number, date, single select, and iteration fields, along with the GraphQL node ID of the changed field. */
            changes?: {
                field_value: {
                    field_node_id?: string;
                    field_type?: string;
                    field_name?: string;
                    project_number?: number;
                    from?: (string | number | components["schemas"]["projects-v2-single-select-option"] | components["schemas"]["projects-v2-iteration-setting"]) | null;
                    to?: (string | number | components["schemas"]["projects-v2-single-select-option"] | components["schemas"]["projects-v2-iteration-setting"]) | null;
                };
            } | {
                body: {
                    from?: string | null;
                    to?: string | null;
                };
            };
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Reordered Event */
        "webhook-projects-v2-item-reordered": {
            /** @enum {string} */
            action: "reordered";
            changes: {
                previous_projects_v2_item_node_id?: {
                    from?: string | null;
                    to?: string | null;
                };
            };
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Item Restored Event */
        "webhook-projects-v2-item-restored": {
            /** @enum {string} */
            action: "restored";
            changes: components["schemas"]["webhooks_project_changes"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_item: components["schemas"]["projects-v2-item"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Project Reopened Event */
        "webhook-projects-v2-project-reopened": {
            /** @enum {string} */
            action: "reopened";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2: components["schemas"]["projects-v2"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Status Update Created Event */
        "webhook-projects-v2-status-update-created": {
            /** @enum {string} */
            action: "created";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_status_update: components["schemas"]["projects-v2-status-update"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Status Update Deleted Event */
        "webhook-projects-v2-status-update-deleted": {
            /** @enum {string} */
            action: "deleted";
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_status_update: components["schemas"]["projects-v2-status-update"];
            sender: components["schemas"]["simple-user"];
        };
        /** Projects v2 Status Update Edited Event */
        "webhook-projects-v2-status-update-edited": {
            /** @enum {string} */
            action: "edited";
            changes?: {
                body?: {
                    from?: string | null;
                    to?: string | null;
                };
                status?: {
                    /** @enum {string|null} */
                    from?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
                    /** @enum {string|null} */
                    to?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
                };
                start_date?: {
                    /** Format: date */
                    from?: string | null;
                    /** Format: date */
                    to?: string | null;
                };
                target_date?: {
                    /** Format: date */
                    from?: string | null;
                    /** Format: date */
                    to?: string | null;
                };
            };
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            projects_v2_status_update: components["schemas"]["projects-v2-status-update"];
            sender: components["schemas"]["simple-user"];
        };
        /** public event */
        "webhook-public": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request assigned event */
        "webhook-pull-request-assigned": {
            /** @enum {string} */
            action: "assigned";
            assignee: components["schemas"]["webhooks_user"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request auto_merge_disabled event */
        "webhook-pull-request-auto-merge-disabled": {
            /** @enum {string} */
            action: "auto_merge_disabled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            reason: string;
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request auto_merge_enabled event */
        "webhook-pull-request-auto-merge-enabled": {
            /** @enum {string} */
            action: "auto_merge_enabled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the repository */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            reason?: string;
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request closed event */
        "webhook-pull-request-closed": {
            /** @enum {string} */
            action: "closed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["pull-request-webhook"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request converted_to_draft event */
        "webhook-pull-request-converted-to-draft": {
            /** @enum {string} */
            action: "converted_to_draft";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["pull-request-webhook"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request demilestoned event */
        "webhook-pull-request-demilestoned": {
            /** @enum {string} */
            action: "demilestoned";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            milestone?: components["schemas"]["milestone"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["webhooks_pull_request_5"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** pull_request dequeued event */
        "webhook-pull-request-dequeued": {
            /** @enum {string} */
            action: "dequeued";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            /** @enum {string} */
            reason: "UNKNOWN_REMOVAL_REASON" | "MANUAL" | "MERGE" | "MERGE_CONFLICT" | "CI_FAILURE" | "CI_TIMEOUT" | "ALREADY_MERGED" | "QUEUE_CLEARED" | "ROLL_BACK" | "BRANCH_PROTECTIONS" | "GIT_TREE_INVALID" | "INVALID_MERGE_COMMIT";
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request edited event */
        "webhook-pull-request-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the comment if the action was `edited`. */
            changes: {
                base?: {
                    ref: {
                        from: string;
                    };
                    sha: {
                        from: string;
                    };
                };
                body?: {
                    /** @description The previous version of the body if the action was `edited`. */
                    from: string;
                };
                title?: {
                    /** @description The previous version of the title if the action was `edited`. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["pull-request-webhook"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** pull_request enqueued event */
        "webhook-pull-request-enqueued": {
            /** @enum {string} */
            action: "enqueued";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request labeled event */
        "webhook-pull-request-labeled": {
            /** @enum {string} */
            action: "labeled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label?: components["schemas"]["webhooks_label"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request locked event */
        "webhook-pull-request-locked": {
            /** @enum {string} */
            action: "locked";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request milestoned event */
        "webhook-pull-request-milestoned": {
            /** @enum {string} */
            action: "milestoned";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            milestone?: components["schemas"]["milestone"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["webhooks_pull_request_5"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** pull_request opened event */
        "webhook-pull-request-opened": {
            /** @enum {string} */
            action: "opened";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["pull-request-webhook"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request ready_for_review event */
        "webhook-pull-request-ready-for-review": {
            /** @enum {string} */
            action: "ready_for_review";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["pull-request-webhook"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request reopened event */
        "webhook-pull-request-reopened": {
            /** @enum {string} */
            action: "reopened";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: components["schemas"]["pull-request-webhook"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review_comment created event */
        "webhook-pull-request-review-comment-created": {
            /** @enum {string} */
            action: "created";
            /**
             * Pull Request Review Comment
             * @description The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
             */
            comment: {
                _links: {
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    pull_request: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description The text of the comment. */
                body: string;
                /** @description The SHA of the commit to which the comment applies. */
                commit_id: string;
                /** Format: date-time */
                created_at: string;
                /** @description The diff of the line that the comment refers to. */
                diff_hunk: string;
                /**
                 * Format: uri
                 * @description HTML URL for the pull request review comment.
                 */
                html_url: string;
                /** @description The ID of the pull request review comment. */
                id: number;
                /** @description The comment ID to reply to. */
                in_reply_to_id?: number;
                /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                line: number | null;
                /** @description The node ID of the pull request review comment. */
                node_id: string;
                /** @description The SHA of the original commit to which the comment applies. */
                original_commit_id: string;
                /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                original_line: number | null;
                /** @description The index of the original line in the diff to which the comment applies. */
                original_position: number;
                /** @description The first line of the range for a multi-line comment. */
                original_start_line: number | null;
                /** @description The relative path of the file to which the comment applies. */
                path: string;
                /** @description The line index in the diff to which the comment applies. */
                position: number | null;
                /** @description The ID of the pull request review to which the comment belongs. */
                pull_request_review_id: number | null;
                /**
                 * Format: uri
                 * @description URL for the pull request that the review comment belongs to.
                 */
                pull_request_url: string;
                /** Reactions */
                reactions: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /**
                 * @description The side of the first line of the range for a multi-line comment.
                 * @enum {string}
                 */
                side: "LEFT" | "RIGHT";
                /** @description The first line of the range for a multi-line comment. */
                start_line: number | null;
                /**
                 * @description The side of the first line of the range for a multi-line comment.
                 * @default RIGHT
                 * @enum {string|null}
                 */
                start_side: "LEFT" | "RIGHT" | null;
                /**
                 * @description The level at which the comment is targeted, can be a diff line or a file.
                 * @enum {string}
                 */
                subject_type?: "line" | "file";
                /** Format: date-time */
                updated_at: string;
                /**
                 * Format: uri
                 * @description URL for the pull request review comment
                 */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge?: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft?: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review_comment deleted event */
        "webhook-pull-request-review-comment-deleted": {
            /** @enum {string} */
            action: "deleted";
            comment: components["schemas"]["webhooks_review_comment"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge?: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft?: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review_comment edited event */
        "webhook-pull-request-review-comment-edited": {
            /** @enum {string} */
            action: "edited";
            changes: components["schemas"]["webhooks_changes"];
            comment: components["schemas"]["webhooks_review_comment"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge?: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft?: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    user_view_type?: string;
                    /** Format: uri */
                    url?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review dismissed event */
        "webhook-pull-request-review-dismissed": {
            /** @enum {string} */
            action: "dismissed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Simple Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            /** @description The review that was affected. */
            review: {
                _links: {
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    pull_request: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /** @description The text of the review. */
                body: string | null;
                /** @description A commit SHA for the review. */
                commit_id: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the review */
                id: number;
                node_id: string;
                /** Format: uri */
                pull_request_url: string;
                /** @enum {string} */
                state: "dismissed" | "approved" | "changes_requested";
                /** Format: date-time */
                submitted_at: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review edited event */
        "webhook-pull-request-review-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                body?: {
                    /** @description The previous version of the body if the action was `edited`. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Simple Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            review: components["schemas"]["webhooks_review"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request review_request_removed event */
        "webhook-pull-request-review-request-removed": {
            /** @enum {string} */
            action: "review_request_removed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The pull request number. */
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title.
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            /** User */
            requested_reviewer: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            sender: components["schemas"]["simple-user"];
        } | {
            /** @enum {string} */
            action: "review_request_removed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The pull request number. */
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            /**
             * Team
             * @description Groups of organization members that gives permissions on specified repositories.
             */
            requested_team: {
                deleted?: boolean;
                /** @description Description of the team */
                description: string | null;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                parent?: {
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                } | null;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
            };
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request review_requested event */
        "webhook-pull-request-review-requested": {
            /** @enum {string} */
            action: "review_requested";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The pull request number. */
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            /** User */
            requested_reviewer: {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: string | null;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
                user_view_type?: string;
            } | null;
            sender: components["schemas"]["simple-user"];
        } | {
            /** @enum {string} */
            action: "review_requested";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            /** @description The pull request number. */
            number: number;
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            /**
             * Team
             * @description Groups of organization members that gives permissions on specified repositories.
             */
            requested_team: {
                deleted?: boolean;
                /** @description Description of the team */
                description?: string | null;
                /** Format: uri */
                html_url?: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url?: string;
                /** @description Name of the team */
                name: string;
                node_id?: string;
                parent?: {
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                } | null;
                /** @description Permission that the team will have for its repositories */
                permission?: string;
                /** @enum {string} */
                privacy?: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url?: string;
                slug?: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url?: string;
            };
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review submitted event */
        "webhook-pull-request-review-submitted": {
            /** @enum {string} */
            action: "submitted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Simple Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            review: components["schemas"]["webhooks_review"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request_review_thread resolved event */
        "webhook-pull-request-review-thread-resolved": {
            /** @enum {string} */
            action: "resolved";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Simple Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
            thread: {
                comments: {
                    _links: {
                        /** Link */
                        html: {
                            /** Format: uri-template */
                            href: string;
                        };
                        /** Link */
                        pull_request: {
                            /** Format: uri-template */
                            href: string;
                        };
                        /** Link */
                        self: {
                            /** Format: uri-template */
                            href: string;
                        };
                    };
                    /**
                     * AuthorAssociation
                     * @description How the author is associated with the repository.
                     * @enum {string}
                     */
                    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                    /** @description The text of the comment. */
                    body: string;
                    /** @description The SHA of the commit to which the comment applies. */
                    commit_id: string;
                    /** Format: date-time */
                    created_at: string;
                    /** @description The diff of the line that the comment refers to. */
                    diff_hunk: string;
                    /**
                     * Format: uri
                     * @description HTML URL for the pull request review comment.
                     */
                    html_url: string;
                    /** @description The ID of the pull request review comment. */
                    id: number;
                    /** @description The comment ID to reply to. */
                    in_reply_to_id?: number;
                    /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                    line: number | null;
                    /** @description The node ID of the pull request review comment. */
                    node_id: string;
                    /** @description The SHA of the original commit to which the comment applies. */
                    original_commit_id: string;
                    /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                    original_line: number | null;
                    /** @description The index of the original line in the diff to which the comment applies. */
                    original_position: number;
                    /** @description The first line of the range for a multi-line comment. */
                    original_start_line: number | null;
                    /** @description The relative path of the file to which the comment applies. */
                    path: string;
                    /** @description The line index in the diff to which the comment applies. */
                    position: number | null;
                    /** @description The ID of the pull request review to which the comment belongs. */
                    pull_request_review_id: number | null;
                    /**
                     * Format: uri
                     * @description URL for the pull request that the review comment belongs to.
                     */
                    pull_request_url: string;
                    /** Reactions */
                    reactions: {
                        "+1": number;
                        "-1": number;
                        confused: number;
                        eyes: number;
                        heart: number;
                        hooray: number;
                        laugh: number;
                        rocket: number;
                        total_count: number;
                        /** Format: uri */
                        url: string;
                    };
                    /**
                     * @description The side of the first line of the range for a multi-line comment.
                     * @enum {string}
                     */
                    side: "LEFT" | "RIGHT";
                    /** @description The first line of the range for a multi-line comment. */
                    start_line: number | null;
                    /**
                     * @description The side of the first line of the range for a multi-line comment.
                     * @default RIGHT
                     * @enum {string|null}
                     */
                    start_side: "LEFT" | "RIGHT" | null;
                    /**
                     * @description The level at which the comment is targeted, can be a diff line or a file.
                     * @enum {string}
                     */
                    subject_type?: "line" | "file";
                    /** Format: date-time */
                    updated_at: string;
                    /**
                     * Format: uri
                     * @description URL for the pull request review comment
                     */
                    url: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                }[];
                node_id: string;
            };
        };
        /** pull_request_review_thread unresolved event */
        "webhook-pull-request-review-thread-unresolved": {
            /** @enum {string} */
            action: "unresolved";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Simple Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                closed_at: string | null;
                /** Format: uri */
                comments_url: string;
                /** Format: uri */
                commits_url: string;
                created_at: string;
                /** Format: uri */
                diff_url: string;
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                merge_commit_sha: string | null;
                merged_at: string | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                number: number;
                /** Format: uri */
                patch_url: string;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                /** Format: uri */
                review_comments_url: string;
                /** @enum {string} */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                title: string;
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
            thread: {
                comments: {
                    _links: {
                        /** Link */
                        html: {
                            /** Format: uri-template */
                            href: string;
                        };
                        /** Link */
                        pull_request: {
                            /** Format: uri-template */
                            href: string;
                        };
                        /** Link */
                        self: {
                            /** Format: uri-template */
                            href: string;
                        };
                    };
                    /**
                     * AuthorAssociation
                     * @description How the author is associated with the repository.
                     * @enum {string}
                     */
                    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                    /** @description The text of the comment. */
                    body: string;
                    /** @description The SHA of the commit to which the comment applies. */
                    commit_id: string;
                    /** Format: date-time */
                    created_at: string;
                    /** @description The diff of the line that the comment refers to. */
                    diff_hunk: string;
                    /**
                     * Format: uri
                     * @description HTML URL for the pull request review comment.
                     */
                    html_url: string;
                    /** @description The ID of the pull request review comment. */
                    id: number;
                    /** @description The comment ID to reply to. */
                    in_reply_to_id?: number;
                    /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                    line: number | null;
                    /** @description The node ID of the pull request review comment. */
                    node_id: string;
                    /** @description The SHA of the original commit to which the comment applies. */
                    original_commit_id: string;
                    /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
                    original_line: number;
                    /** @description The index of the original line in the diff to which the comment applies. */
                    original_position: number;
                    /** @description The first line of the range for a multi-line comment. */
                    original_start_line: number | null;
                    /** @description The relative path of the file to which the comment applies. */
                    path: string;
                    /** @description The line index in the diff to which the comment applies. */
                    position: number | null;
                    /** @description The ID of the pull request review to which the comment belongs. */
                    pull_request_review_id: number | null;
                    /**
                     * Format: uri
                     * @description URL for the pull request that the review comment belongs to.
                     */
                    pull_request_url: string;
                    /** Reactions */
                    reactions: {
                        "+1": number;
                        "-1": number;
                        confused: number;
                        eyes: number;
                        heart: number;
                        hooray: number;
                        laugh: number;
                        rocket: number;
                        total_count: number;
                        /** Format: uri */
                        url: string;
                    };
                    /**
                     * @description The side of the first line of the range for a multi-line comment.
                     * @enum {string}
                     */
                    side: "LEFT" | "RIGHT";
                    /** @description The first line of the range for a multi-line comment. */
                    start_line: number | null;
                    /**
                     * @description The side of the first line of the range for a multi-line comment.
                     * @default RIGHT
                     * @enum {string|null}
                     */
                    start_side: "LEFT" | "RIGHT" | null;
                    /**
                     * @description The level at which the comment is targeted, can be a diff line or a file.
                     * @enum {string}
                     */
                    subject_type?: "line" | "file";
                    /** Format: date-time */
                    updated_at: string;
                    /**
                     * Format: uri
                     * @description URL for the pull request review comment
                     */
                    url: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                }[];
                node_id: string;
            };
        };
        /** pull_request synchronize event */
        "webhook-pull-request-synchronize": {
            /** @enum {string} */
            action: "synchronize";
            after: string;
            before: string;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit message title.
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request unassigned event */
        "webhook-pull-request-unassigned": {
            /** @enum {string} */
            action: "unassigned";
            assignee?: components["schemas"]["webhooks_user_mannequin"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** pull_request unlabeled event */
        "webhook-pull-request-unlabeled": {
            /** @enum {string} */
            action: "unlabeled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            label?: components["schemas"]["webhooks_label"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string | null;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string | null;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit message title.
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description: string | null;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** pull_request unlocked event */
        "webhook-pull-request-unlocked": {
            /** @enum {string} */
            action: "unlocked";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            number: components["schemas"]["webhooks_number"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /** Pull Request */
            pull_request: {
                _links: {
                    /** Link */
                    comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    commits: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    html: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    issue: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comment: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    review_comments: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    self: {
                        /** Format: uri-template */
                        href: string;
                    };
                    /** Link */
                    statuses: {
                        /** Format: uri-template */
                        href: string;
                    };
                };
                /** @enum {string|null} */
                active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
                additions?: number;
                /** User */
                assignee: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                assignees: ({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null)[];
                /**
                 * AuthorAssociation
                 * @description How the author is associated with the repository.
                 * @enum {string}
                 */
                author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
                /**
                 * PullRequestAutoMerge
                 * @description The status of auto merging a pull request.
                 */
                auto_merge: {
                    /** @description Commit message for the merge commit. */
                    commit_message: string | null;
                    /** @description Title for the merge commit message. */
                    commit_title: string;
                    /** User */
                    enabled_by: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /**
                     * @description The merge method to use.
                     * @enum {string}
                     */
                    merge_method: "merge" | "squash" | "rebase";
                } | null;
                base: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    };
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                body: string | null;
                changed_files?: number;
                /** Format: date-time */
                closed_at: string | null;
                comments?: number;
                /** Format: uri */
                comments_url: string;
                commits?: number;
                /** Format: uri */
                commits_url: string;
                /** Format: date-time */
                created_at: string;
                deletions?: number;
                /** Format: uri */
                diff_url: string;
                /** @description Indicates whether or not the pull request is a draft. */
                draft: boolean;
                head: {
                    label: string;
                    ref: string;
                    /**
                     * Repository
                     * @description A git repository
                     */
                    repo: {
                        /**
                         * @description Whether to allow auto-merge for pull requests.
                         * @default false
                         */
                        allow_auto_merge: boolean;
                        /** @description Whether to allow private forks */
                        allow_forking?: boolean;
                        /**
                         * @description Whether to allow merge commits for pull requests.
                         * @default true
                         */
                        allow_merge_commit: boolean;
                        /**
                         * @description Whether to allow rebase merges for pull requests.
                         * @default true
                         */
                        allow_rebase_merge: boolean;
                        /**
                         * @description Whether to allow squash merges for pull requests.
                         * @default true
                         */
                        allow_squash_merge: boolean;
                        allow_update_branch?: boolean;
                        /** Format: uri-template */
                        archive_url: string;
                        /**
                         * @description Whether the repository is archived.
                         * @default false
                         */
                        archived: boolean;
                        /** Format: uri-template */
                        assignees_url: string;
                        /** Format: uri-template */
                        blobs_url: string;
                        /** Format: uri-template */
                        branches_url: string;
                        /** Format: uri */
                        clone_url: string;
                        /** Format: uri-template */
                        collaborators_url: string;
                        /** Format: uri-template */
                        comments_url: string;
                        /** Format: uri-template */
                        commits_url: string;
                        /** Format: uri-template */
                        compare_url: string;
                        /** Format: uri-template */
                        contents_url: string;
                        /** Format: uri */
                        contributors_url: string;
                        created_at: number | string;
                        /** @description The default branch of the repository. */
                        default_branch: string;
                        /**
                         * @description Whether to delete head branches when pull requests are merged
                         * @default false
                         */
                        delete_branch_on_merge: boolean;
                        /** Format: uri */
                        deployments_url: string;
                        description: string | null;
                        /** @description Returns whether or not this repository is disabled. */
                        disabled?: boolean;
                        /** Format: uri */
                        downloads_url: string;
                        /** Format: uri */
                        events_url: string;
                        fork: boolean;
                        forks: number;
                        forks_count: number;
                        /** Format: uri */
                        forks_url: string;
                        full_name: string;
                        /** Format: uri-template */
                        git_commits_url: string;
                        /** Format: uri-template */
                        git_refs_url: string;
                        /** Format: uri-template */
                        git_tags_url: string;
                        /** Format: uri */
                        git_url: string;
                        /**
                         * @description Whether downloads are enabled.
                         * @default true
                         */
                        has_downloads: boolean;
                        /**
                         * @description Whether issues are enabled.
                         * @default true
                         */
                        has_issues: boolean;
                        has_pages: boolean;
                        /**
                         * @description Whether projects are enabled.
                         * @default true
                         */
                        has_projects: boolean;
                        /**
                         * @description Whether the wiki is enabled.
                         * @default true
                         */
                        has_wiki: boolean;
                        /**
                         * @description Whether discussions are enabled.
                         * @default false
                         */
                        has_discussions: boolean;
                        homepage: string | null;
                        /** Format: uri */
                        hooks_url: string;
                        /** Format: uri */
                        html_url: string;
                        /**
                         * Format: int64
                         * @description Unique identifier of the repository
                         */
                        id: number;
                        is_template?: boolean;
                        /** Format: uri-template */
                        issue_comment_url: string;
                        /** Format: uri-template */
                        issue_events_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        labels_url: string;
                        language: string | null;
                        /** Format: uri */
                        languages_url: string;
                        /** License */
                        license: {
                            key: string;
                            name: string;
                            node_id: string;
                            spdx_id: string;
                            /** Format: uri */
                            url: string | null;
                        } | null;
                        master_branch?: string;
                        /**
                         * @description The default value for a merge commit message.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                        /**
                         * @description The default value for a merge commit title.
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                         * @enum {string}
                         */
                        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                        /** Format: uri */
                        merges_url: string;
                        /** Format: uri-template */
                        milestones_url: string;
                        /** Format: uri */
                        mirror_url: string | null;
                        /** @description The name of the repository. */
                        name: string;
                        node_id: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        open_issues: number;
                        open_issues_count: number;
                        organization?: string;
                        /** User */
                        owner: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                        permissions?: {
                            admin: boolean;
                            maintain?: boolean;
                            pull: boolean;
                            push: boolean;
                            triage?: boolean;
                        };
                        /** @description Whether the repository is private or public. */
                        private: boolean;
                        public?: boolean;
                        /** Format: uri-template */
                        pulls_url: string;
                        pushed_at: (number | string) | null;
                        /** Format: uri-template */
                        releases_url: string;
                        role_name?: string | null;
                        size: number;
                        /**
                         * @description The default value for a squash merge commit message:
                         *
                         *     - `PR_BODY` - default to the pull request's body.
                         *     - `COMMIT_MESSAGES` - default to the branch's commit messages.
                         *     - `BLANK` - default to a blank commit message.
                         * @enum {string}
                         */
                        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                        /**
                         * @description The default value for a squash merge commit title:
                         *
                         *     - `PR_TITLE` - default to the pull request's title.
                         *     - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                         * @enum {string}
                         */
                        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                        ssh_url: string;
                        stargazers?: number;
                        stargazers_count: number;
                        /** Format: uri */
                        stargazers_url: string;
                        /** Format: uri-template */
                        statuses_url: string;
                        /** Format: uri */
                        subscribers_url: string;
                        /** Format: uri */
                        subscription_url: string;
                        /** Format: uri */
                        svn_url: string;
                        /** Format: uri */
                        tags_url: string;
                        /** Format: uri */
                        teams_url: string;
                        topics: string[];
                        /** Format: uri-template */
                        trees_url: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: uri */
                        url: string;
                        /**
                         * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
                         * @default false
                         */
                        use_squash_pr_title_as_default: boolean;
                        /** @enum {string} */
                        visibility: "public" | "private" | "internal";
                        watchers: number;
                        watchers_count: number;
                        /** @description Whether to require contributors to sign off on web-based commits */
                        web_commit_signoff_required?: boolean;
                    } | null;
                    sha: string;
                    /** User */
                    user: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        /** Format: int64 */
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                };
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                issue_url: string;
                labels: {
                    /** @description 6-character hex code, without the leading #, identifying the color */
                    color: string;
                    default: boolean;
                    description: string | null;
                    id: number;
                    /** @description The name of the label. */
                    name: string;
                    node_id: string;
                    /**
                     * Format: uri
                     * @description URL for the label
                     */
                    url: string;
                }[];
                locked: boolean;
                /** @description Indicates whether maintainers can modify the pull request. */
                maintainer_can_modify?: boolean;
                merge_commit_sha: string | null;
                mergeable?: boolean | null;
                mergeable_state?: string;
                merged?: boolean | null;
                /** Format: date-time */
                merged_at: string | null;
                /** User */
                merged_by?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /**
                 * Milestone
                 * @description A collection of related issues and pull requests.
                 */
                milestone: {
                    /** Format: date-time */
                    closed_at: string | null;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    description: string | null;
                    /** Format: date-time */
                    due_on: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                } | null;
                node_id: string;
                /** @description Number uniquely identifying the pull request within its repository. */
                number: number;
                /** Format: uri */
                patch_url: string;
                rebaseable?: boolean | null;
                requested_reviewers: (({
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null) | {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                })[];
                requested_teams: {
                    deleted?: boolean;
                    /** @description Description of the team */
                    description?: string | null;
                    /** Format: uri */
                    html_url?: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url?: string;
                    /** @description Name of the team */
                    name: string;
                    node_id?: string;
                    parent?: {
                        /** @description Description of the team */
                        description: string | null;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                    } | null;
                    /** @description Permission that the team will have for its repositories */
                    permission?: string;
                    /** @enum {string} */
                    privacy?: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url?: string;
                    slug?: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url?: string;
                }[];
                /** Format: uri-template */
                review_comment_url: string;
                review_comments?: number;
                /** Format: uri */
                review_comments_url: string;
                /**
                 * @description State of this Pull Request. Either `open` or `closed`.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** Format: uri */
                statuses_url: string;
                /** @description The title of the pull request. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** User */
                user: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    /** Format: int64 */
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** push event */
        "webhook-push": {
            /** @description The SHA of the most recent commit on `ref` after the push. */
            after: string;
            base_ref: components["schemas"]["webhooks_nullable_string"];
            /** @description The SHA of the most recent commit on `ref` before the push. */
            before: string;
            /** @description An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits. */
            commits: {
                /** @description An array of files added in the commit. A maximum of 3000 changed files will be reported per commit. */
                added?: string[];
                /**
                 * Committer
                 * @description Metaproperties for Git author/committer information.
                 */
                author: {
                    /** Format: date-time */
                    date?: string;
                    /** Format: email */
                    email: string | null;
                    /** @description The git author's name. */
                    name: string;
                    username?: string;
                };
                /**
                 * Committer
                 * @description Metaproperties for Git author/committer information.
                 */
                committer: {
                    /** Format: date-time */
                    date?: string;
                    /** Format: email */
                    email: string | null;
                    /** @description The git author's name. */
                    name: string;
                    username?: string;
                };
                /** @description Whether this commit is distinct from any that have been pushed before. */
                distinct: boolean;
                id: string;
                /** @description The commit message. */
                message: string;
                /** @description An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit. */
                modified?: string[];
                /** @description An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit. */
                removed?: string[];
                /**
                 * Format: date-time
                 * @description The ISO 8601 timestamp of the commit.
                 */
                timestamp: string;
                tree_id: string;
                /**
                 * Format: uri
                 * @description URL that points to the commit API resource.
                 */
                url: string;
            }[];
            /** @description URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit. */
            compare: string;
            /** @description Whether this push created the `ref`. */
            created: boolean;
            /** @description Whether this push deleted the `ref`. */
            deleted: boolean;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            /** @description Whether this push was a force push of the `ref`. */
            forced: boolean;
            /** Commit */
            head_commit: {
                /** @description An array of files added in the commit. */
                added?: string[];
                /**
                 * Committer
                 * @description Metaproperties for Git author/committer information.
                 */
                author: {
                    /** Format: date-time */
                    date?: string;
                    /** Format: email */
                    email: string | null;
                    /** @description The git author's name. */
                    name: string;
                    username?: string;
                };
                /**
                 * Committer
                 * @description Metaproperties for Git author/committer information.
                 */
                committer: {
                    /** Format: date-time */
                    date?: string;
                    /** Format: email */
                    email: string | null;
                    /** @description The git author's name. */
                    name: string;
                    username?: string;
                };
                /** @description Whether this commit is distinct from any that have been pushed before. */
                distinct: boolean;
                id: string;
                /** @description The commit message. */
                message: string;
                /** @description An array of files modified by the commit. */
                modified?: string[];
                /** @description An array of files removed in the commit. */
                removed?: string[];
                /**
                 * Format: date-time
                 * @description The ISO 8601 timestamp of the commit.
                 */
                timestamp: string;
                tree_id: string;
                /**
                 * Format: uri
                 * @description URL that points to the commit API resource.
                 */
                url: string;
            } | null;
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /**
             * Committer
             * @description Metaproperties for Git author/committer information.
             */
            pusher: {
                /** Format: date-time */
                date?: string;
                /** Format: email */
                email?: string | null;
                /** @description The git author's name. */
                name: string;
                username?: string;
            };
            /** @description The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`. */
            ref: string;
            /**
             * Repository
             * @description A git repository
             */
            repository: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                custom_properties?: {
                    [key: string]: unknown;
                };
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
            };
            sender?: components["schemas"]["simple-user"];
        };
        "webhook-registry-package-published": {
            /** @enum {string} */
            action: "published";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            registry_package: {
                created_at: string | null;
                description: string | null;
                ecosystem: string;
                html_url: string;
                id: number;
                name: string;
                namespace: string;
                owner: {
                    avatar_url: string;
                    events_url: string;
                    followers_url: string;
                    following_url: string;
                    gists_url: string;
                    gravatar_id: string;
                    html_url: string;
                    id: number;
                    login: string;
                    node_id: string;
                    organizations_url: string;
                    received_events_url: string;
                    repos_url: string;
                    site_admin: boolean;
                    starred_url: string;
                    subscriptions_url: string;
                    type: string;
                    url: string;
                    user_view_type?: string;
                };
                package_type: string;
                package_version: {
                    author?: {
                        avatar_url: string;
                        events_url: string;
                        followers_url: string;
                        following_url: string;
                        gists_url: string;
                        gravatar_id: string;
                        html_url: string;
                        id: number;
                        login: string;
                        node_id: string;
                        organizations_url: string;
                        received_events_url: string;
                        repos_url: string;
                        site_admin: boolean;
                        starred_url: string;
                        subscriptions_url: string;
                        type: string;
                        url: string;
                        user_view_type?: string;
                    };
                    body?: string | Record<string, never>;
                    body_html?: string;
                    container_metadata?: {
                        labels?: Record<string, never> | null;
                        manifest?: Record<string, never> | null;
                        tag?: {
                            digest?: string;
                            name?: string;
                        };
                    };
                    created_at?: string;
                    description: string;
                    docker_metadata?: {
                        tags?: string[];
                    }[];
                    draft?: boolean;
                    html_url: string;
                    id: number;
                    installation_command: string;
                    manifest?: string;
                    metadata: {
                        [key: string]: unknown;
                    }[];
                    name: string;
                    npm_metadata?: {
                        name?: string;
                        version?: string;
                        npm_user?: string;
                        author?: (string | Record<string, never>) | null;
                        bugs?: (string | Record<string, never>) | null;
                        dependencies?: Record<string, never>;
                        dev_dependencies?: Record<string, never>;
                        peer_dependencies?: Record<string, never>;
                        optional_dependencies?: Record<string, never>;
                        description?: string;
                        dist?: (string | Record<string, never>) | null;
                        git_head?: string;
                        homepage?: string;
                        license?: string;
                        main?: string;
                        repository?: (string | Record<string, never>) | null;
                        scripts?: Record<string, never>;
                        id?: string;
                        node_version?: string;
                        npm_version?: string;
                        has_shrinkwrap?: boolean;
                        maintainers?: string[];
                        contributors?: string[];
                        engines?: Record<string, never>;
                        keywords?: string[];
                        files?: string[];
                        bin?: Record<string, never>;
                        man?: Record<string, never>;
                        directories?: (string | Record<string, never>) | null;
                        os?: string[];
                        cpu?: string[];
                        readme?: string;
                        installation_command?: string;
                        release_id?: number;
                        commit_oid?: string;
                        published_via_actions?: boolean;
                        deleted_by_id?: number;
                    } | null;
                    nuget_metadata?: {
                        id?: (string | Record<string, never> | number) | null;
                        name?: string;
                        value?: boolean | string | number | {
                            url?: string;
                            branch?: string;
                            commit?: string;
                            type?: string;
                        };
                    }[] | null;
                    package_files: {
                        content_type: string;
                        created_at: string;
                        download_url: string;
                        id: number;
                        md5: string | null;
                        name: string;
                        sha1: string | null;
                        sha256: string | null;
                        size: number;
                        state: string | null;
                        updated_at: string;
                    }[];
                    package_url: string;
                    prerelease?: boolean;
                    release?: {
                        author?: {
                            avatar_url?: string;
                            events_url?: string;
                            followers_url?: string;
                            following_url?: string;
                            gists_url?: string;
                            gravatar_id?: string;
                            html_url?: string;
                            id?: number;
                            login?: string;
                            node_id?: string;
                            organizations_url?: string;
                            received_events_url?: string;
                            repos_url?: string;
                            site_admin?: boolean;
                            starred_url?: string;
                            subscriptions_url?: string;
                            type?: string;
                            url?: string;
                            user_view_type?: string;
                        };
                        created_at?: string;
                        draft?: boolean;
                        html_url?: string;
                        id?: number;
                        name?: string | null;
                        prerelease?: boolean;
                        published_at?: string;
                        tag_name?: string;
                        target_commitish?: string;
                        url?: string;
                    };
                    rubygems_metadata?: components["schemas"]["webhook-rubygems-metadata"][];
                    summary: string;
                    tag_name?: string;
                    target_commitish?: string;
                    target_oid?: string;
                    updated_at?: string;
                    version: string;
                } | null;
                registry: {
                    about_url?: string;
                    name?: string;
                    type?: string;
                    url?: string;
                    vendor?: string;
                } | null;
                updated_at: string | null;
            };
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        "webhook-registry-package-updated": {
            /** @enum {string} */
            action: "updated";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            registry_package: {
                created_at: string;
                description: unknown;
                ecosystem: string;
                html_url: string;
                id: number;
                name: string;
                namespace: string;
                owner: {
                    avatar_url: string;
                    events_url: string;
                    followers_url: string;
                    following_url: string;
                    gists_url: string;
                    gravatar_id: string;
                    html_url: string;
                    id: number;
                    login: string;
                    node_id: string;
                    organizations_url: string;
                    received_events_url: string;
                    repos_url: string;
                    site_admin: boolean;
                    starred_url: string;
                    subscriptions_url: string;
                    type: string;
                    url: string;
                    user_view_type?: string;
                };
                package_type: string;
                package_version: {
                    author: {
                        avatar_url: string;
                        events_url: string;
                        followers_url: string;
                        following_url: string;
                        gists_url: string;
                        gravatar_id: string;
                        html_url: string;
                        id: number;
                        login: string;
                        node_id: string;
                        organizations_url: string;
                        received_events_url: string;
                        repos_url: string;
                        site_admin: boolean;
                        starred_url: string;
                        subscriptions_url: string;
                        type: string;
                        url: string;
                        user_view_type?: string;
                    };
                    body: string;
                    body_html: string;
                    created_at: string;
                    description: string;
                    docker_metadata?: ({
                        tags?: string[];
                    } | null)[];
                    draft?: boolean;
                    html_url: string;
                    id: number;
                    installation_command: string;
                    manifest?: string;
                    metadata: {
                        [key: string]: unknown;
                    }[];
                    name: string;
                    package_files: {
                        content_type?: string;
                        created_at?: string;
                        download_url?: string;
                        id?: number;
                        md5?: string | null;
                        name?: string;
                        sha1?: string | null;
                        sha256?: string;
                        size?: number;
                        state?: string;
                        updated_at?: string;
                    }[];
                    package_url: string;
                    prerelease?: boolean;
                    release?: {
                        author: {
                            avatar_url: string;
                            events_url: string;
                            followers_url: string;
                            following_url: string;
                            gists_url: string;
                            gravatar_id: string;
                            html_url: string;
                            id: number;
                            login: string;
                            node_id: string;
                            organizations_url: string;
                            received_events_url: string;
                            repos_url: string;
                            site_admin: boolean;
                            starred_url: string;
                            subscriptions_url: string;
                            type: string;
                            url: string;
                            user_view_type?: string;
                        };
                        created_at: string;
                        draft: boolean;
                        html_url: string;
                        id: number;
                        name: string;
                        prerelease: boolean;
                        published_at: string;
                        tag_name: string;
                        target_commitish: string;
                        url: string;
                    };
                    rubygems_metadata?: components["schemas"]["webhook-rubygems-metadata"][];
                    summary: string;
                    tag_name?: string;
                    target_commitish: string;
                    target_oid: string;
                    updated_at: string;
                    version: string;
                };
                registry: Record<string, never> | null;
                updated_at: string;
            };
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** release created event */
        "webhook-release-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            release: components["schemas"]["webhooks_release"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** release deleted event */
        "webhook-release-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            release: components["schemas"]["webhooks_release"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** release edited event */
        "webhook-release-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                body?: {
                    /** @description The previous version of the body if the action was `edited`. */
                    from: string;
                };
                name?: {
                    /** @description The previous version of the name if the action was `edited`. */
                    from: string;
                };
                tag_name?: {
                    /** @description The previous version of the tag_name if the action was `edited`. */
                    from: string;
                };
                make_latest?: {
                    /** @description Whether this release was explicitly `edited` to be the latest. */
                    to: boolean;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            release: components["schemas"]["webhooks_release"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** release prereleased event */
        "webhook-release-prereleased": {
            /** @enum {string} */
            action: "prereleased";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            /**
             * Release
             * @description The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
             */
            release: {
                assets: ({
                    /** Format: uri */
                    browser_download_url: string;
                    content_type: string;
                    /** Format: date-time */
                    created_at: string;
                    download_count: number;
                    id: number;
                    label: string | null;
                    /** @description The file name of the asset. */
                    name: string;
                    node_id: string;
                    size: number;
                    digest: string | null;
                    /**
                     * @description State of the release asset.
                     * @enum {string}
                     */
                    state: "uploaded";
                    /** Format: date-time */
                    updated_at: string;
                    /** User */
                    uploader?: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                    } | null;
                    /** Format: uri */
                    url: string;
                } | null)[];
                /** Format: uri */
                assets_url: string;
                /** User */
                author: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                body: string | null;
                /** Format: date-time */
                created_at: string | null;
                /** Format: uri */
                discussion_url?: string;
                /** @description Whether the release is a draft or published */
                draft: boolean;
                /** Format: uri */
                html_url: string;
                id: number;
                /** @description Whether or not the release is immutable. */
                immutable: boolean;
                name: string | null;
                node_id: string;
                /**
                 * @description Whether the release is identified as a prerelease or a full release.
                 * @enum {boolean}
                 */
                prerelease: true;
                /** Format: date-time */
                published_at: string | null;
                /** Reactions */
                reactions?: {
                    "+1": number;
                    "-1": number;
                    confused: number;
                    eyes: number;
                    heart: number;
                    hooray: number;
                    laugh: number;
                    rocket: number;
                    total_count: number;
                    /** Format: uri */
                    url: string;
                };
                /** @description The name of the tag. */
                tag_name: string;
                /** Format: uri */
                tarball_url: string | null;
                /** @description Specifies the commitish value that determines where the Git tag is created from. */
                target_commitish: string;
                /** Format: uri-template */
                upload_url: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                zipball_url: string | null;
            };
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** release published event */
        "webhook-release-published": {
            /** @enum {string} */
            action: "published";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            release: components["schemas"]["webhooks_release_1"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** release released event */
        "webhook-release-released": {
            /** @enum {string} */
            action: "released";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            release: components["schemas"]["webhooks_release"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** release unpublished event */
        "webhook-release-unpublished": {
            /** @enum {string} */
            action: "unpublished";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            release: components["schemas"]["webhooks_release_1"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** Repository advisory published event */
        "webhook-repository-advisory-published": {
            /** @enum {string} */
            action: "published";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            repository_advisory: components["schemas"]["repository-advisory"];
            sender?: components["schemas"]["simple-user"];
        };
        /** Repository advisory reported event */
        "webhook-repository-advisory-reported": {
            /** @enum {string} */
            action: "reported";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            repository_advisory: components["schemas"]["repository-advisory"];
            sender?: components["schemas"]["simple-user"];
        };
        /** repository archived event */
        "webhook-repository-archived": {
            /** @enum {string} */
            action: "archived";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository created event */
        "webhook-repository-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository deleted event */
        "webhook-repository-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository_dispatch event */
        "webhook-repository-dispatch-sample": {
            /** @description The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
            action: string;
            branch: string;
            /** @description The `client_payload` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
            client_payload: {
                [key: string]: unknown;
            } | null;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository edited event */
        "webhook-repository-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                default_branch?: {
                    from: string;
                };
                description?: {
                    from: string | null;
                };
                homepage?: {
                    from: string | null;
                };
                topics?: {
                    from?: string[] | null;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository_import event */
        "webhook-repository-import": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            /** @enum {string} */
            status: "success" | "cancelled" | "failure";
        };
        /** repository privatized event */
        "webhook-repository-privatized": {
            /** @enum {string} */
            action: "privatized";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository publicized event */
        "webhook-repository-publicized": {
            /** @enum {string} */
            action: "publicized";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository renamed event */
        "webhook-repository-renamed": {
            /** @enum {string} */
            action: "renamed";
            changes: {
                repository: {
                    name: {
                        from: string;
                    };
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository ruleset created event */
        "webhook-repository-ruleset-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            repository_ruleset: components["schemas"]["repository-ruleset"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository ruleset deleted event */
        "webhook-repository-ruleset-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            repository_ruleset: components["schemas"]["repository-ruleset"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository ruleset edited event */
        "webhook-repository-ruleset-edited": {
            /** @enum {string} */
            action: "edited";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            repository_ruleset: components["schemas"]["repository-ruleset"];
            changes?: {
                name?: {
                    from?: string;
                };
                enforcement?: {
                    from?: string;
                };
                conditions?: {
                    added?: components["schemas"]["repository-ruleset-conditions"][];
                    deleted?: components["schemas"]["repository-ruleset-conditions"][];
                    updated?: {
                        condition?: components["schemas"]["repository-ruleset-conditions"];
                        changes?: {
                            condition_type?: {
                                from?: string;
                            };
                            target?: {
                                from?: string;
                            };
                            include?: {
                                from?: string[];
                            };
                            exclude?: {
                                from?: string[];
                            };
                        };
                    }[];
                };
                rules?: {
                    added?: components["schemas"]["repository-rule"][];
                    deleted?: components["schemas"]["repository-rule"][];
                    updated?: {
                        rule?: components["schemas"]["repository-rule"];
                        changes?: {
                            configuration?: {
                                from?: string;
                            };
                            rule_type?: {
                                from?: string;
                            };
                            pattern?: {
                                from?: string;
                            };
                        };
                    }[];
                };
            };
            sender: components["schemas"]["simple-user"];
        };
        /** repository transferred event */
        "webhook-repository-transferred": {
            /** @enum {string} */
            action: "transferred";
            changes: {
                owner: {
                    from: {
                        /** Organization */
                        organization?: {
                            /** Format: uri */
                            avatar_url: string;
                            description: string | null;
                            /** Format: uri */
                            events_url: string;
                            /** Format: uri */
                            hooks_url: string;
                            /** Format: uri */
                            html_url?: string;
                            id: number;
                            /** Format: uri */
                            issues_url: string;
                            login: string;
                            /** Format: uri-template */
                            members_url: string;
                            node_id: string;
                            /** Format: uri-template */
                            public_members_url: string;
                            /** Format: uri */
                            repos_url: string;
                            /** Format: uri */
                            url: string;
                        };
                        /** User */
                        user?: {
                            /** Format: uri */
                            avatar_url?: string;
                            deleted?: boolean;
                            email?: string | null;
                            /** Format: uri-template */
                            events_url?: string;
                            /** Format: uri */
                            followers_url?: string;
                            /** Format: uri-template */
                            following_url?: string;
                            /** Format: uri-template */
                            gists_url?: string;
                            gravatar_id?: string;
                            /** Format: uri */
                            html_url?: string;
                            /** Format: int64 */
                            id: number;
                            login: string;
                            name?: string;
                            node_id?: string;
                            /** Format: uri */
                            organizations_url?: string;
                            /** Format: uri */
                            received_events_url?: string;
                            /** Format: uri */
                            repos_url?: string;
                            site_admin?: boolean;
                            /** Format: uri-template */
                            starred_url?: string;
                            /** Format: uri */
                            subscriptions_url?: string;
                            /** @enum {string} */
                            type?: "Bot" | "User" | "Organization";
                            /** Format: uri */
                            url?: string;
                            user_view_type?: string;
                        } | null;
                    };
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository unarchived event */
        "webhook-repository-unarchived": {
            /** @enum {string} */
            action: "unarchived";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository_vulnerability_alert create event */
        "webhook-repository-vulnerability-alert-create": {
            /** @enum {string} */
            action: "create";
            alert: components["schemas"]["webhooks_alert"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository_vulnerability_alert dismiss event */
        "webhook-repository-vulnerability-alert-dismiss": {
            /** @enum {string} */
            action: "dismiss";
            /**
             * Repository Vulnerability Alert Alert
             * @description The security alert of the vulnerable dependency.
             */
            alert: {
                affected_package_name: string;
                affected_range: string;
                created_at: string;
                dismiss_comment?: string | null;
                dismiss_reason: string;
                dismissed_at: string;
                /** User */
                dismisser: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                external_identifier: string;
                /** Format: uri */
                external_reference: string | null;
                fix_reason?: string;
                /** Format: date-time */
                fixed_at?: string;
                fixed_in?: string;
                ghsa_id: string;
                id: number;
                node_id: string;
                number: number;
                severity: string;
                /** @enum {string} */
                state: "dismissed";
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository_vulnerability_alert reopen event */
        "webhook-repository-vulnerability-alert-reopen": {
            /** @enum {string} */
            action: "reopen";
            alert: components["schemas"]["webhooks_alert"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** repository_vulnerability_alert resolve event */
        "webhook-repository-vulnerability-alert-resolve": {
            /** @enum {string} */
            action: "resolve";
            /**
             * Repository Vulnerability Alert Alert
             * @description The security alert of the vulnerable dependency.
             */
            alert: {
                affected_package_name: string;
                affected_range: string;
                created_at: string;
                dismiss_reason?: string;
                dismissed_at?: string;
                /** User */
                dismisser?: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                external_identifier: string;
                /** Format: uri */
                external_reference: string | null;
                fix_reason?: string;
                /** Format: date-time */
                fixed_at?: string;
                fixed_in?: string;
                ghsa_id: string;
                id: number;
                node_id: string;
                number: number;
                severity: string;
                /** @enum {string} */
                state: "fixed" | "open";
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** secret_scanning_alert created event */
        "webhook-secret-scanning-alert-created": {
            /** @enum {string} */
            action: "created";
            alert: components["schemas"]["secret-scanning-alert-webhook"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** Secret Scanning Alert Location Created Event */
        "webhook-secret-scanning-alert-location-created": {
            /** @enum {string} */
            action?: "created";
            alert: components["schemas"]["secret-scanning-alert-webhook"];
            installation?: components["schemas"]["simple-installation"];
            location: components["schemas"]["secret-scanning-location"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** Secret Scanning Alert Location Created Event */
        "webhook-secret-scanning-alert-location-created-form-encoded": {
            /** @description A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object. */
            payload: string;
        };
        /** secret_scanning_alert publicly leaked event */
        "webhook-secret-scanning-alert-publicly-leaked": {
            /** @enum {string} */
            action: "publicly_leaked";
            alert: components["schemas"]["secret-scanning-alert-webhook"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** secret_scanning_alert reopened event */
        "webhook-secret-scanning-alert-reopened": {
            /** @enum {string} */
            action: "reopened";
            alert: components["schemas"]["secret-scanning-alert-webhook"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** secret_scanning_alert resolved event */
        "webhook-secret-scanning-alert-resolved": {
            /** @enum {string} */
            action: "resolved";
            alert: components["schemas"]["secret-scanning-alert-webhook"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** secret_scanning_alert validated event */
        "webhook-secret-scanning-alert-validated": {
            /** @enum {string} */
            action: "validated";
            alert: components["schemas"]["secret-scanning-alert-webhook"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** secret_scanning_scan completed event */
        "webhook-secret-scanning-scan-completed": {
            /** @enum {string} */
            action: "completed";
            /**
             * @description What type of scan was completed
             * @enum {string}
             */
            type: "backfill" | "custom-pattern-backfill" | "pattern-version-backfill";
            /**
             * @description What type of content was scanned
             * @enum {string}
             */
            source: "git" | "issues" | "pull-requests" | "discussions" | "wiki";
            /**
             * Format: date-time
             * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            started_at: string;
            /**
             * Format: date-time
             * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            completed_at: string;
            /** @description List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updates */
            secret_types?: string[] | null;
            /** @description If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updated */
            custom_pattern_name?: string | null;
            /**
             * @description If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updated
             * @enum {string|null}
             */
            custom_pattern_scope?: "repository" | "organization" | "enterprise" | null;
            repository?: components["schemas"]["repository-webhooks"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** security_advisory published event */
        "webhook-security-advisory-published": {
            /** @enum {string} */
            action: "published";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            security_advisory: components["schemas"]["webhooks_security_advisory"];
            sender?: components["schemas"]["simple-user"];
        };
        /** security_advisory updated event */
        "webhook-security-advisory-updated": {
            /** @enum {string} */
            action: "updated";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            security_advisory: components["schemas"]["webhooks_security_advisory"];
            sender?: components["schemas"]["simple-user"];
        };
        /** security_advisory withdrawn event */
        "webhook-security-advisory-withdrawn": {
            /** @enum {string} */
            action: "withdrawn";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            /** @description The details of the security advisory, including summary, description, and severity. */
            security_advisory: {
                cvss: {
                    score: number;
                    vector_string: string | null;
                };
                cvss_severities?: components["schemas"]["cvss-severities"];
                cwes: {
                    cwe_id: string;
                    name: string;
                }[];
                description: string;
                ghsa_id: string;
                identifiers: {
                    type: string;
                    value: string;
                }[];
                published_at: string;
                references: {
                    /** Format: uri */
                    url: string;
                }[];
                severity: string;
                summary: string;
                updated_at: string;
                vulnerabilities: {
                    first_patched_version: {
                        identifier: string;
                    } | null;
                    package: {
                        ecosystem: string;
                        name: string;
                    };
                    severity: string;
                    vulnerable_version_range: string;
                }[];
                withdrawn_at: string;
            };
            sender?: components["schemas"]["simple-user"];
        };
        /** security_and_analysis event */
        "webhook-security-and-analysis": {
            changes: {
                from?: {
                    security_and_analysis?: components["schemas"]["security-and-analysis"];
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["full-repository"];
            sender?: components["schemas"]["simple-user"];
        };
        /** sponsorship cancelled event */
        "webhook-sponsorship-cancelled": {
            /** @enum {string} */
            action: "cancelled";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            sponsorship: components["schemas"]["webhooks_sponsorship"];
        };
        /** sponsorship created event */
        "webhook-sponsorship-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            sponsorship: components["schemas"]["webhooks_sponsorship"];
        };
        /** sponsorship edited event */
        "webhook-sponsorship-edited": {
            /** @enum {string} */
            action: "edited";
            changes: {
                privacy_level?: {
                    /** @description The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy. */
                    from: string;
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            sponsorship: components["schemas"]["webhooks_sponsorship"];
        };
        /** sponsorship pending_cancellation event */
        "webhook-sponsorship-pending-cancellation": {
            /** @enum {string} */
            action: "pending_cancellation";
            effective_date?: components["schemas"]["webhooks_effective_date"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            sponsorship: components["schemas"]["webhooks_sponsorship"];
        };
        /** sponsorship pending_tier_change event */
        "webhook-sponsorship-pending-tier-change": {
            /** @enum {string} */
            action: "pending_tier_change";
            changes: components["schemas"]["webhooks_changes_8"];
            effective_date?: components["schemas"]["webhooks_effective_date"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            sponsorship: components["schemas"]["webhooks_sponsorship"];
        };
        /** sponsorship tier_changed event */
        "webhook-sponsorship-tier-changed": {
            /** @enum {string} */
            action: "tier_changed";
            changes: components["schemas"]["webhooks_changes_8"];
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            sponsorship: components["schemas"]["webhooks_sponsorship"];
        };
        /** star created event */
        "webhook-star-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            /** @description The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
            starred_at: string | null;
        };
        /** star deleted event */
        "webhook-star-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            /** @description The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
            starred_at: unknown;
        };
        /** status event */
        "webhook-status": {
            /** Format: uri */
            avatar_url?: string | null;
            /** @description An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches. */
            branches: {
                commit: {
                    sha: string | null;
                    /** Format: uri */
                    url: string | null;
                };
                name: string;
                protected: boolean;
            }[];
            commit: {
                /** User */
                author: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id?: number;
                    login?: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                /** Format: uri */
                comments_url: string;
                commit: {
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    } & {
                        date: string;
                        email?: string;
                        name?: string;
                    };
                    comment_count: number;
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    } & {
                        date: string;
                        email?: string;
                        name?: string;
                    };
                    message: string;
                    tree: {
                        sha: string;
                        /** Format: uri */
                        url: string;
                    };
                    /** Format: uri */
                    url: string;
                    verification: {
                        payload: string | null;
                        /** @enum {string} */
                        reason: "expired_key" | "not_signing_key" | "gpgverify_error" | "gpgverify_unavailable" | "unsigned" | "unknown_signature_type" | "no_user" | "unverified_email" | "bad_email" | "unknown_key" | "malformed_signature" | "invalid" | "valid" | "bad_cert" | "ocsp_pending";
                        signature: string | null;
                        verified: boolean;
                        verified_at: string | null;
                    };
                };
                /** User */
                committer: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id?: number;
                    login?: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                /** Format: uri */
                html_url: string;
                node_id: string;
                parents: {
                    /** Format: uri */
                    html_url: string;
                    sha: string;
                    /** Format: uri */
                    url: string;
                }[];
                sha: string;
                /** Format: uri */
                url: string;
            };
            context: string;
            created_at: string;
            /** @description The optional human-readable description added to the status. */
            description: string | null;
            enterprise?: components["schemas"]["enterprise-webhooks"];
            /** @description The unique identifier of the status. */
            id: number;
            installation?: components["schemas"]["simple-installation"];
            name: string;
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            /** @description The Commit SHA. */
            sha: string;
            /**
             * @description The new state. Can be `pending`, `success`, `failure`, or `error`.
             * @enum {string}
             */
            state: "pending" | "success" | "failure" | "error";
            /** @description The optional link added to the status. */
            target_url: string | null;
            updated_at: string;
        };
        /** parent issue added event */
        "webhook-sub-issues-parent-issue-added": {
            /** @enum {string} */
            action: "parent_issue_added";
            /** @description The ID of the parent issue. */
            parent_issue_id: number;
            parent_issue: components["schemas"]["issue"];
            parent_issue_repo: components["schemas"]["repository"];
            /** @description The ID of the sub-issue. */
            sub_issue_id: number;
            sub_issue: components["schemas"]["issue"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** parent issue removed event */
        "webhook-sub-issues-parent-issue-removed": {
            /** @enum {string} */
            action: "parent_issue_removed";
            /** @description The ID of the parent issue. */
            parent_issue_id: number;
            parent_issue: components["schemas"]["issue"];
            parent_issue_repo: components["schemas"]["repository"];
            /** @description The ID of the sub-issue. */
            sub_issue_id: number;
            sub_issue: components["schemas"]["issue"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** sub-issue added event */
        "webhook-sub-issues-sub-issue-added": {
            /** @enum {string} */
            action: "sub_issue_added";
            /** @description The ID of the sub-issue. */
            sub_issue_id: number;
            sub_issue: components["schemas"]["issue"];
            sub_issue_repo: components["schemas"]["repository"];
            /** @description The ID of the parent issue. */
            parent_issue_id: number;
            parent_issue: components["schemas"]["issue"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** sub-issue removed event */
        "webhook-sub-issues-sub-issue-removed": {
            /** @enum {string} */
            action: "sub_issue_removed";
            /** @description The ID of the sub-issue. */
            sub_issue_id: number;
            sub_issue: components["schemas"]["issue"];
            sub_issue_repo: components["schemas"]["repository"];
            /** @description The ID of the parent issue. */
            parent_issue_id: number;
            parent_issue: components["schemas"]["issue"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository?: components["schemas"]["repository-webhooks"];
            sender?: components["schemas"]["simple-user"];
        };
        /** team_add event */
        "webhook-team-add": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            team: components["schemas"]["webhooks_team_1"];
        };
        /** team added_to_repository event */
        "webhook-team-added-to-repository": {
            /** @enum {string} */
            action: "added_to_repository";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            /**
             * Repository
             * @description A git repository
             */
            repository?: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                custom_properties?: {
                    [key: string]: unknown;
                };
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
            };
            sender?: components["schemas"]["simple-user"];
            team: components["schemas"]["webhooks_team_1"];
        };
        /** team created event */
        "webhook-team-created": {
            /** @enum {string} */
            action: "created";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            /**
             * Repository
             * @description A git repository
             */
            repository?: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                custom_properties?: {
                    [key: string]: unknown;
                };
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
            };
            sender: components["schemas"]["simple-user"];
            team: components["schemas"]["webhooks_team_1"];
        };
        /** team deleted event */
        "webhook-team-deleted": {
            /** @enum {string} */
            action: "deleted";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            /**
             * Repository
             * @description A git repository
             */
            repository?: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                custom_properties?: {
                    [key: string]: unknown;
                };
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
            };
            sender?: components["schemas"]["simple-user"];
            team: components["schemas"]["webhooks_team_1"];
        };
        /** team edited event */
        "webhook-team-edited": {
            /** @enum {string} */
            action: "edited";
            /** @description The changes to the team if the action was `edited`. */
            changes: {
                description?: {
                    /** @description The previous version of the description if the action was `edited`. */
                    from: string;
                };
                name?: {
                    /** @description The previous version of the name if the action was `edited`. */
                    from: string;
                };
                privacy?: {
                    /** @description The previous version of the team's privacy if the action was `edited`. */
                    from: string;
                };
                notification_setting?: {
                    /** @description The previous version of the team's notification setting if the action was `edited`. */
                    from: string;
                };
                repository?: {
                    permissions: {
                        from: {
                            /** @description The previous version of the team member's `admin` permission on a repository, if the action was `edited`. */
                            admin?: boolean;
                            /** @description The previous version of the team member's `pull` permission on a repository, if the action was `edited`. */
                            pull?: boolean;
                            /** @description The previous version of the team member's `push` permission on a repository, if the action was `edited`. */
                            push?: boolean;
                        };
                    };
                };
            };
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            /**
             * Repository
             * @description A git repository
             */
            repository?: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                custom_properties?: {
                    [key: string]: unknown;
                };
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
            };
            sender: components["schemas"]["simple-user"];
            team: components["schemas"]["webhooks_team_1"];
        };
        /** team removed_from_repository event */
        "webhook-team-removed-from-repository": {
            /** @enum {string} */
            action: "removed_from_repository";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization: components["schemas"]["organization-simple-webhooks"];
            /**
             * Repository
             * @description A git repository
             */
            repository?: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
                custom_properties?: {
                    [key: string]: unknown;
                };
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge: boolean;
                /** Format: uri */
                deployments_url: string;
                description: string | null;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: string | null;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /**
                 * Format: int64
                 * @description Unique identifier of the repository
                 */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: string | null;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: {
                    key: string;
                    name: string;
                    node_id: string;
                    spdx_id: string;
                    /** Format: uri */
                    url: string | null;
                } | null;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: string | null;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                permissions?: {
                    admin: boolean;
                    maintain?: boolean;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: (number | string) | null;
                /** Format: uri-template */
                releases_url: string;
                role_name?: string | null;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
            };
            sender: components["schemas"]["simple-user"];
            team: components["schemas"]["webhooks_team_1"];
        };
        /** watch started event */
        "webhook-watch-started": {
            /** @enum {string} */
            action: "started";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
        };
        /** workflow_dispatch event */
        "webhook-workflow-dispatch": {
            enterprise?: components["schemas"]["enterprise-webhooks"];
            inputs: {
                [key: string]: unknown;
            } | null;
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            ref: string;
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow: string;
        };
        /** workflow_job completed event */
        "webhook-workflow-job-completed": {
            /** @enum {string} */
            action: "completed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow_job: {
                /** Format: uri */
                check_run_url: string;
                completed_at: string | null;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | null | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out";
                /** @description The time that the job created. */
                created_at: string;
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                /** @description Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
                labels: string[];
                name: string;
                node_id: string;
                run_attempt: number;
                run_id: number;
                /** Format: uri */
                run_url: string;
                /** @description The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_group_id: number | null;
                /** @description The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_group_name: string | null;
                /** @description The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_id: number | null;
                /** @description The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_name: string | null;
                started_at: string;
                /**
                 * @description The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
                 * @enum {string}
                 */
                status: "queued" | "in_progress" | "completed" | "waiting";
                /** @description The name of the current branch. */
                head_branch: string | null;
                /** @description The name of the workflow. */
                workflow_name: string | null;
                steps: {
                    completed_at: string | null;
                    /** @enum {string|null} */
                    conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
                    name: string;
                    number: number;
                    started_at: string | null;
                    /** @enum {string} */
                    status: "in_progress" | "completed" | "queued";
                }[];
                /** Format: uri */
                url: string;
            } & {
                check_run_url?: string;
                completed_at?: string;
                /** @enum {string} */
                conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out";
                /** @description The time that the job created. */
                created_at?: string;
                head_sha?: string;
                html_url?: string;
                id?: number;
                labels?: (string | null)[];
                name?: string;
                node_id?: string;
                run_attempt?: number;
                run_id?: number;
                run_url?: string;
                runner_group_id?: number | null;
                runner_group_name?: string | null;
                runner_id?: number | null;
                runner_name?: string | null;
                started_at?: string;
                status?: string;
                /** @description The name of the current branch. */
                head_branch?: string | null;
                /** @description The name of the workflow. */
                workflow_name?: string | null;
                steps?: (Record<string, never> | null)[];
                url?: string;
            };
            deployment?: components["schemas"]["deployment"];
        };
        /** workflow_job in_progress event */
        "webhook-workflow-job-in-progress": {
            /** @enum {string} */
            action: "in_progress";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow_job: {
                /** Format: uri */
                check_run_url: string;
                completed_at: string | null;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | null | "cancelled" | "neutral";
                /** @description The time that the job created. */
                created_at: string;
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                /** @description Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
                labels: string[];
                name: string;
                node_id: string;
                run_attempt: number;
                run_id: number;
                /** Format: uri */
                run_url: string;
                /** @description The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_group_id: number | null;
                /** @description The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_group_name: string | null;
                /** @description The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_id: number | null;
                /** @description The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
                runner_name: string | null;
                started_at: string;
                /**
                 * @description The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                 * @enum {string}
                 */
                status: "queued" | "in_progress" | "completed";
                /** @description The name of the current branch. */
                head_branch: string | null;
                /** @description The name of the workflow. */
                workflow_name: string | null;
                steps: {
                    completed_at: string | null;
                    /** @enum {string|null} */
                    conclusion: "failure" | "skipped" | "success" | null | "cancelled";
                    name: string;
                    number: number;
                    started_at: string | null;
                    /** @enum {string} */
                    status: "in_progress" | "completed" | "queued" | "pending";
                }[];
                /** Format: uri */
                url: string;
            } & {
                check_run_url?: string;
                completed_at?: string | null;
                conclusion?: string | null;
                /** @description The time that the job created. */
                created_at?: string;
                head_sha?: string;
                html_url?: string;
                id?: number;
                labels?: string[];
                name?: string;
                node_id?: string;
                run_attempt?: number;
                run_id?: number;
                run_url?: string;
                runner_group_id?: number | null;
                runner_group_name?: string | null;
                runner_id?: number | null;
                runner_name?: string | null;
                started_at?: string;
                /** @enum {string} */
                status: "in_progress" | "completed" | "queued";
                /** @description The name of the current branch. */
                head_branch?: string | null;
                /** @description The name of the workflow. */
                workflow_name?: string | null;
                steps: {
                    completed_at: string | null;
                    conclusion: string | null;
                    name: string;
                    number: number;
                    started_at: string | null;
                    /** @enum {string} */
                    status: "in_progress" | "completed" | "pending" | "queued";
                }[];
                url?: string;
            };
            deployment?: components["schemas"]["deployment"];
        };
        /** workflow_job queued event */
        "webhook-workflow-job-queued": {
            /** @enum {string} */
            action: "queued";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow_job: {
                /** Format: uri */
                check_run_url: string;
                completed_at: string | null;
                conclusion: string | null;
                /** @description The time that the job created. */
                created_at: string;
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                labels: string[];
                name: string;
                node_id: string;
                run_attempt: number;
                run_id: number;
                /** Format: uri */
                run_url: string;
                runner_group_id: number | null;
                runner_group_name: string | null;
                runner_id: number | null;
                runner_name: string | null;
                /** Format: date-time */
                started_at: string;
                /** @enum {string} */
                status: "queued" | "in_progress" | "completed" | "waiting";
                /** @description The name of the current branch. */
                head_branch: string | null;
                /** @description The name of the workflow. */
                workflow_name: string | null;
                steps: {
                    completed_at: string | null;
                    /** @enum {string|null} */
                    conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
                    name: string;
                    number: number;
                    started_at: string | null;
                    /** @enum {string} */
                    status: "completed" | "in_progress" | "queued" | "pending";
                }[];
                /** Format: uri */
                url: string;
            };
            deployment?: components["schemas"]["deployment"];
        };
        /** workflow_job waiting event */
        "webhook-workflow-job-waiting": {
            /** @enum {string} */
            action: "waiting";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow_job: {
                /** Format: uri */
                check_run_url: string;
                completed_at: string | null;
                conclusion: string | null;
                /** @description The time that the job created. */
                created_at: string;
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                labels: string[];
                name: string;
                node_id: string;
                run_attempt: number;
                run_id: number;
                /** Format: uri */
                run_url: string;
                runner_group_id: number | null;
                runner_group_name: string | null;
                runner_id: number | null;
                runner_name: string | null;
                /** Format: date-time */
                started_at: string;
                /** @description The name of the current branch. */
                head_branch: string | null;
                /** @description The name of the workflow. */
                workflow_name: string | null;
                /** @enum {string} */
                status: "queued" | "in_progress" | "completed" | "waiting";
                steps: {
                    completed_at: string | null;
                    /** @enum {string|null} */
                    conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
                    name: string;
                    number: number;
                    started_at: string | null;
                    /** @enum {string} */
                    status: "completed" | "in_progress" | "queued" | "pending" | "waiting";
                }[];
                /** Format: uri */
                url: string;
            };
            deployment?: components["schemas"]["deployment"];
        };
        /** workflow_run completed event */
        "webhook-workflow-run-completed": {
            /** @enum {string} */
            action: "completed";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow: components["schemas"]["webhooks_workflow"];
            /** Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: uri */
                artifacts_url: string;
                /** Format: uri */
                cancel_url: string;
                check_suite_id: number;
                check_suite_node_id: string;
                /** Format: uri */
                check_suite_url: string;
                /** @enum {string|null} */
                conclusion: "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "startup_failure" | null;
                /** Format: date-time */
                created_at: string;
                event: string;
                head_branch: string | null;
                /** SimpleCommit */
                head_commit: {
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    id: string;
                    message: string;
                    timestamp: string;
                    tree_id: string;
                };
                /** Repository Lite */
                head_repository: {
                    /** Format: uri-template */
                    archive_url: string;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the repository */
                    id: number;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    /** Format: uri-template */
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                jobs_url: string;
                /** Format: uri */
                logs_url: string;
                name: string | null;
                node_id: string;
                path: string;
                /** Format: uri */
                previous_attempt_url: string | null;
                pull_requests: ({
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                } | null)[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                /** Repository Lite */
                repository: {
                    /** Format: uri-template */
                    archive_url: string;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the repository */
                    id: number;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    /** Format: uri-template */
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                rerun_url: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                /** Format: uri */
                workflow_url: string;
                /**
                 * @description The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
                 * @example Simple Workflow
                 */
                display_title?: string;
            };
        };
        /** workflow_run in_progress event */
        "webhook-workflow-run-in-progress": {
            /** @enum {string} */
            action: "in_progress";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow: components["schemas"]["webhooks_workflow"];
            /** Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                /** Format: uri */
                artifacts_url: string;
                /** Format: uri */
                cancel_url: string;
                check_suite_id: number;
                check_suite_node_id: string;
                /** Format: uri */
                check_suite_url: string;
                /** @enum {string|null} */
                conclusion: "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | null;
                /** Format: date-time */
                created_at: string;
                event: string;
                head_branch: string | null;
                /** SimpleCommit */
                head_commit: {
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    id: string;
                    message: string;
                    timestamp: string;
                    tree_id: string;
                };
                /** Repository Lite */
                head_repository: {
                    /** Format: uri-template */
                    archive_url: string;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the repository */
                    id: number;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** @description The name of the repository. */
                    name: string | null;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                    } | null;
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    /** Format: uri-template */
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                jobs_url: string;
                /** Format: uri */
                logs_url: string;
                name: string | null;
                node_id: string;
                path: string;
                /** Format: uri */
                previous_attempt_url: string | null;
                pull_requests: ({
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                } | null)[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                /** Repository Lite */
                repository: {
                    /** Format: uri-template */
                    archive_url: string;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the repository */
                    id: number;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                    } | null;
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    /** Format: uri-template */
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                rerun_url: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "pending";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                /** Format: uri */
                workflow_url: string;
            };
        };
        /** workflow_run requested event */
        "webhook-workflow-run-requested": {
            /** @enum {string} */
            action: "requested";
            enterprise?: components["schemas"]["enterprise-webhooks"];
            installation?: components["schemas"]["simple-installation"];
            organization?: components["schemas"]["organization-simple-webhooks"];
            repository: components["schemas"]["repository-webhooks"];
            sender: components["schemas"]["simple-user"];
            workflow: components["schemas"]["webhooks_workflow"];
            /** Workflow Run */
            workflow_run: {
                /** User */
                actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: uri */
                artifacts_url: string;
                /** Format: uri */
                cancel_url: string;
                check_suite_id: number;
                check_suite_node_id: string;
                /** Format: uri */
                check_suite_url: string;
                /** @enum {string|null} */
                conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null | "skipped" | "startup_failure";
                /** Format: date-time */
                created_at: string;
                event: string;
                head_branch: string | null;
                /** SimpleCommit */
                head_commit: {
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    author: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    /**
                     * Committer
                     * @description Metaproperties for Git author/committer information.
                     */
                    committer: {
                        /** Format: date-time */
                        date?: string;
                        /** Format: email */
                        email: string | null;
                        /** @description The git author's name. */
                        name: string;
                        username?: string;
                    };
                    id: string;
                    message: string;
                    timestamp: string;
                    tree_id: string;
                };
                /** Repository Lite */
                head_repository: {
                    /** Format: uri-template */
                    archive_url: string;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the repository */
                    id: number;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    /** Format: uri-template */
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                };
                head_sha: string;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                jobs_url: string;
                /** Format: uri */
                logs_url: string;
                name: string | null;
                node_id: string;
                path: string;
                /** Format: uri */
                previous_attempt_url: string | null;
                pull_requests: {
                    base: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    head: {
                        ref: string;
                        /** Repo Ref */
                        repo: {
                            id: number;
                            name: string;
                            /** Format: uri */
                            url: string;
                        };
                        sha: string;
                    };
                    id: number;
                    number: number;
                    /** Format: uri */
                    url: string;
                }[];
                referenced_workflows?: {
                    path: string;
                    ref?: string;
                    sha: string;
                }[] | null;
                /** Repository Lite */
                repository: {
                    /** Format: uri-template */
                    archive_url: string;
                    /** Format: uri-template */
                    assignees_url: string;
                    /** Format: uri-template */
                    blobs_url: string;
                    /** Format: uri-template */
                    branches_url: string;
                    /** Format: uri-template */
                    collaborators_url: string;
                    /** Format: uri-template */
                    comments_url: string;
                    /** Format: uri-template */
                    commits_url: string;
                    /** Format: uri-template */
                    compare_url: string;
                    /** Format: uri-template */
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    /** Format: uri-template */
                    git_commits_url: string;
                    /** Format: uri-template */
                    git_refs_url: string;
                    /** Format: uri-template */
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the repository */
                    id: number;
                    /** Format: uri-template */
                    issue_comment_url: string;
                    /** Format: uri-template */
                    issue_events_url: string;
                    /** Format: uri-template */
                    issues_url: string;
                    /** Format: uri-template */
                    keys_url: string;
                    /** Format: uri-template */
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    /** Format: uri-template */
                    milestones_url: string;
                    /** @description The name of the repository. */
                    name: string;
                    node_id: string;
                    /** Format: uri-template */
                    notifications_url: string;
                    /** User */
                    owner: {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: string | null;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                        user_view_type?: string;
                    } | null;
                    /** @description Whether the repository is private or public. */
                    private: boolean;
                    /** Format: uri-template */
                    pulls_url: string;
                    /** Format: uri-template */
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    /** Format: uri-template */
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    /** Format: uri-template */
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                rerun_url: string;
                run_attempt: number;
                run_number: number;
                /** Format: date-time */
                run_started_at: string;
                /** @enum {string} */
                status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
                /** User */
                triggering_actor: {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: string | null;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                    user_view_type?: string;
                } | null;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                workflow_id: number;
                /** Format: uri */
                workflow_url: string;
                display_title: string;
            };
        };
    };
}
export type SchemaRoot = components['schemas']['root'];
export type SchemaSecurityAdvisoryEcosystems = components['schemas']['security-advisory-ecosystems'];
export type SchemaVulnerability = components['schemas']['vulnerability'];
export type SchemaCvssSeverities = components['schemas']['cvss-severities'];
export type SchemaSecurityAdvisoryEpss = components['schemas']['security-advisory-epss'];
export type SchemaSimpleUser = components['schemas']['simple-user'];
export type SchemaSecurityAdvisoryCreditTypes = components['schemas']['security-advisory-credit-types'];
export type SchemaGlobalAdvisory = components['schemas']['global-advisory'];
export type SchemaBasicError = components['schemas']['basic-error'];
export type SchemaValidationErrorSimple = components['schemas']['validation-error-simple'];
export type SchemaEnterprise = components['schemas']['enterprise'];
export type SchemaIntegration = components['schemas']['integration'];
export type SchemaWebhookConfigUrl = components['schemas']['webhook-config-url'];
export type SchemaWebhookConfigContentType = components['schemas']['webhook-config-content-type'];
export type SchemaWebhookConfigSecret = components['schemas']['webhook-config-secret'];
export type SchemaWebhookConfigInsecureSsl = components['schemas']['webhook-config-insecure-ssl'];
export type SchemaWebhookConfig = components['schemas']['webhook-config'];
export type SchemaHookDeliveryItem = components['schemas']['hook-delivery-item'];
export type SchemaScimError = components['schemas']['scim-error'];
export type SchemaValidationError = components['schemas']['validation-error'];
export type SchemaHookDelivery = components['schemas']['hook-delivery'];
export type SchemaIntegrationInstallationRequest = components['schemas']['integration-installation-request'];
export type SchemaAppPermissions = components['schemas']['app-permissions'];
export type SchemaNullableSimpleUser = components['schemas']['nullable-simple-user'];
export type SchemaInstallation = components['schemas']['installation'];
export type SchemaNullableLicenseSimple = components['schemas']['nullable-license-simple'];
export type SchemaRepository = components['schemas']['repository'];
export type SchemaInstallationToken = components['schemas']['installation-token'];
export type SchemaNullableScopedInstallation = components['schemas']['nullable-scoped-installation'];
export type SchemaAuthorization = components['schemas']['authorization'];
export type SchemaSimpleClassroomRepository = components['schemas']['simple-classroom-repository'];
export type SchemaSimpleClassroomOrganization = components['schemas']['simple-classroom-organization'];
export type SchemaClassroom = components['schemas']['classroom'];
export type SchemaClassroomAssignment = components['schemas']['classroom-assignment'];
export type SchemaSimpleClassroomUser = components['schemas']['simple-classroom-user'];
export type SchemaSimpleClassroom = components['schemas']['simple-classroom'];
export type SchemaSimpleClassroomAssignment = components['schemas']['simple-classroom-assignment'];
export type SchemaClassroomAcceptedAssignment = components['schemas']['classroom-accepted-assignment'];
export type SchemaClassroomAssignmentGrade = components['schemas']['classroom-assignment-grade'];
export type SchemaCodeOfConduct = components['schemas']['code-of-conduct'];
export type SchemaCodeSecurityConfiguration = components['schemas']['code-security-configuration'];
export type SchemaCodeScanningOptions = components['schemas']['code-scanning-options'];
export type SchemaCodeScanningDefaultSetupOptions = components['schemas']['code-scanning-default-setup-options'];
export type SchemaCodeSecurityDefaultConfigurations = components['schemas']['code-security-default-configurations'];
export type SchemaSimpleRepository = components['schemas']['simple-repository'];
export type SchemaCodeSecurityConfigurationRepositories = components['schemas']['code-security-configuration-repositories'];
export type SchemaAlertNumber = components['schemas']['alert-number'];
export type SchemaDependabotAlertPackage = components['schemas']['dependabot-alert-package'];
export type SchemaDependabotAlertSecurityVulnerability = components['schemas']['dependabot-alert-security-vulnerability'];
export type SchemaDependabotAlertSecurityAdvisory = components['schemas']['dependabot-alert-security-advisory'];
export type SchemaAlertUrl = components['schemas']['alert-url'];
export type SchemaAlertHtmlUrl = components['schemas']['alert-html-url'];
export type SchemaAlertCreatedAt = components['schemas']['alert-created-at'];
export type SchemaAlertUpdatedAt = components['schemas']['alert-updated-at'];
export type SchemaAlertDismissedAt = components['schemas']['alert-dismissed-at'];
export type SchemaAlertFixedAt = components['schemas']['alert-fixed-at'];
export type SchemaAlertAutoDismissedAt = components['schemas']['alert-auto-dismissed-at'];
export type SchemaDependabotAlertWithRepository = components['schemas']['dependabot-alert-with-repository'];
export type SchemaNullableAlertUpdatedAt = components['schemas']['nullable-alert-updated-at'];
export type SchemaSecretScanningAlertState = components['schemas']['secret-scanning-alert-state'];
export type SchemaSecretScanningAlertResolution = components['schemas']['secret-scanning-alert-resolution'];
export type SchemaSecretScanningLocationCommit = components['schemas']['secret-scanning-location-commit'];
export type SchemaSecretScanningLocationWikiCommit = components['schemas']['secret-scanning-location-wiki-commit'];
export type SchemaSecretScanningLocationIssueTitle = components['schemas']['secret-scanning-location-issue-title'];
export type SchemaSecretScanningLocationIssueBody = components['schemas']['secret-scanning-location-issue-body'];
export type SchemaSecretScanningLocationIssueComment = components['schemas']['secret-scanning-location-issue-comment'];
export type SchemaSecretScanningLocationDiscussionTitle = components['schemas']['secret-scanning-location-discussion-title'];
export type SchemaSecretScanningLocationDiscussionBody = components['schemas']['secret-scanning-location-discussion-body'];
export type SchemaSecretScanningLocationDiscussionComment = components['schemas']['secret-scanning-location-discussion-comment'];
export type SchemaSecretScanningLocationPullRequestTitle = components['schemas']['secret-scanning-location-pull-request-title'];
export type SchemaSecretScanningLocationPullRequestBody = components['schemas']['secret-scanning-location-pull-request-body'];
export type SchemaSecretScanningLocationPullRequestComment = components['schemas']['secret-scanning-location-pull-request-comment'];
export type SchemaSecretScanningLocationPullRequestReview = components['schemas']['secret-scanning-location-pull-request-review'];
export type SchemaSecretScanningLocationPullRequestReviewComment = components['schemas']['secret-scanning-location-pull-request-review-comment'];
export type SchemaNullableSecretScanningFirstDetectedLocation = components['schemas']['nullable-secret-scanning-first-detected-location'];
export type SchemaOrganizationSecretScanningAlert = components['schemas']['organization-secret-scanning-alert'];
export type SchemaActor = components['schemas']['actor'];
export type SchemaNullableMilestone = components['schemas']['nullable-milestone'];
export type SchemaIssueType = components['schemas']['issue-type'];
export type SchemaNullableIntegration = components['schemas']['nullable-integration'];
export type SchemaAuthorAssociation = components['schemas']['author-association'];
export type SchemaReactionRollup = components['schemas']['reaction-rollup'];
export type SchemaSubIssuesSummary = components['schemas']['sub-issues-summary'];
export type SchemaIssue = components['schemas']['issue'];
export type SchemaIssueComment = components['schemas']['issue-comment'];
export type SchemaEvent = components['schemas']['event'];
export type SchemaLinkWithType = components['schemas']['link-with-type'];
export type SchemaFeed = components['schemas']['feed'];
export type SchemaBaseGist = components['schemas']['base-gist'];
export type SchemaPublicUser = components['schemas']['public-user'];
export type SchemaGistHistory = components['schemas']['gist-history'];
export type SchemaGistSimple = components['schemas']['gist-simple'];
export type SchemaGistComment = components['schemas']['gist-comment'];
export type SchemaGistCommit = components['schemas']['gist-commit'];
export type SchemaGitignoreTemplate = components['schemas']['gitignore-template'];
export type SchemaLicenseSimple = components['schemas']['license-simple'];
export type SchemaLicense = components['schemas']['license'];
export type SchemaMarketplaceListingPlan = components['schemas']['marketplace-listing-plan'];
export type SchemaMarketplacePurchase = components['schemas']['marketplace-purchase'];
export type SchemaApiOverview = components['schemas']['api-overview'];
export type SchemaSecurityAndAnalysis = components['schemas']['security-and-analysis'];
export type SchemaMinimalRepository = components['schemas']['minimal-repository'];
export type SchemaThread = components['schemas']['thread'];
export type SchemaThreadSubscription = components['schemas']['thread-subscription'];
export type SchemaOrganizationSimple = components['schemas']['organization-simple'];
export type SchemaNullableSimpleRepository = components['schemas']['nullable-simple-repository'];
export type SchemaDependabotRepositoryAccessDetails = components['schemas']['dependabot-repository-access-details'];
export type SchemaBillingUsageReport = components['schemas']['billing-usage-report'];
export type SchemaOrganizationFull = components['schemas']['organization-full'];
export type SchemaActionsCacheUsageOrgEnterprise = components['schemas']['actions-cache-usage-org-enterprise'];
export type SchemaActionsCacheUsageByRepository = components['schemas']['actions-cache-usage-by-repository'];
export type SchemaNullableActionsHostedRunnerPoolImage = components['schemas']['nullable-actions-hosted-runner-pool-image'];
export type SchemaActionsHostedRunnerMachineSpec = components['schemas']['actions-hosted-runner-machine-spec'];
export type SchemaPublicIp = components['schemas']['public-ip'];
export type SchemaActionsHostedRunner = components['schemas']['actions-hosted-runner'];
export type SchemaActionsHostedRunnerImage = components['schemas']['actions-hosted-runner-image'];
export type SchemaActionsHostedRunnerLimits = components['schemas']['actions-hosted-runner-limits'];
export type SchemaOidcCustomSub = components['schemas']['oidc-custom-sub'];
export type SchemaEmptyObject = components['schemas']['empty-object'];
export type SchemaEnabledRepositories = components['schemas']['enabled-repositories'];
export type SchemaAllowedActions = components['schemas']['allowed-actions'];
export type SchemaSelectedActionsUrl = components['schemas']['selected-actions-url'];
export type SchemaActionsOrganizationPermissions = components['schemas']['actions-organization-permissions'];
export type SchemaSelectedActions = components['schemas']['selected-actions'];
export type SchemaActionsDefaultWorkflowPermissions = components['schemas']['actions-default-workflow-permissions'];
export type SchemaActionsCanApprovePullRequestReviews = components['schemas']['actions-can-approve-pull-request-reviews'];
export type SchemaActionsGetDefaultWorkflowPermissions = components['schemas']['actions-get-default-workflow-permissions'];
export type SchemaActionsSetDefaultWorkflowPermissions = components['schemas']['actions-set-default-workflow-permissions'];
export type SchemaRunnerGroupsOrg = components['schemas']['runner-groups-org'];
export type SchemaRunnerLabel = components['schemas']['runner-label'];
export type SchemaRunner = components['schemas']['runner'];
export type SchemaRunnerApplication = components['schemas']['runner-application'];
export type SchemaAuthenticationToken = components['schemas']['authentication-token'];
export type SchemaOrganizationActionsSecret = components['schemas']['organization-actions-secret'];
export type SchemaActionsPublicKey = components['schemas']['actions-public-key'];
export type SchemaOrganizationActionsVariable = components['schemas']['organization-actions-variable'];
export type SchemaCampaignState = components['schemas']['campaign-state'];
export type SchemaNullableTeamSimple = components['schemas']['nullable-team-simple'];
export type SchemaTeam = components['schemas']['team'];
export type SchemaCampaignSummary = components['schemas']['campaign-summary'];
export type SchemaCodeScanningAnalysisToolName = components['schemas']['code-scanning-analysis-tool-name'];
export type SchemaCodeScanningAnalysisToolGuid = components['schemas']['code-scanning-analysis-tool-guid'];
export type SchemaCodeScanningAlertStateQuery = components['schemas']['code-scanning-alert-state-query'];
export type SchemaCodeScanningAlertSeverity = components['schemas']['code-scanning-alert-severity'];
export type SchemaAlertInstancesUrl = components['schemas']['alert-instances-url'];
export type SchemaCodeScanningAlertState = components['schemas']['code-scanning-alert-state'];
export type SchemaCodeScanningAlertDismissedReason = components['schemas']['code-scanning-alert-dismissed-reason'];
export type SchemaCodeScanningAlertDismissedComment = components['schemas']['code-scanning-alert-dismissed-comment'];
export type SchemaCodeScanningAlertRuleSummary = components['schemas']['code-scanning-alert-rule-summary'];
export type SchemaCodeScanningAnalysisToolVersion = components['schemas']['code-scanning-analysis-tool-version'];
export type SchemaCodeScanningAnalysisTool = components['schemas']['code-scanning-analysis-tool'];
export type SchemaCodeScanningRef = components['schemas']['code-scanning-ref'];
export type SchemaCodeScanningAnalysisAnalysisKey = components['schemas']['code-scanning-analysis-analysis-key'];
export type SchemaCodeScanningAlertEnvironment = components['schemas']['code-scanning-alert-environment'];
export type SchemaCodeScanningAnalysisCategory = components['schemas']['code-scanning-analysis-category'];
export type SchemaCodeScanningAlertLocation = components['schemas']['code-scanning-alert-location'];
export type SchemaCodeScanningAlertClassification = components['schemas']['code-scanning-alert-classification'];
export type SchemaCodeScanningAlertInstance = components['schemas']['code-scanning-alert-instance'];
export type SchemaCodeScanningOrganizationAlertItems = components['schemas']['code-scanning-organization-alert-items'];
export type SchemaNullableCodespaceMachine = components['schemas']['nullable-codespace-machine'];
export type SchemaCodespace = components['schemas']['codespace'];
export type SchemaCodespacesOrgSecret = components['schemas']['codespaces-org-secret'];
export type SchemaCodespacesPublicKey = components['schemas']['codespaces-public-key'];
export type SchemaCopilotOrganizationSeatBreakdown = components['schemas']['copilot-organization-seat-breakdown'];
export type SchemaCopilotOrganizationDetails = components['schemas']['copilot-organization-details'];
export type SchemaNullableOrganizationSimple = components['schemas']['nullable-organization-simple'];
export type SchemaEnterpriseTeam = components['schemas']['enterprise-team'];
export type SchemaCopilotSeatDetails = components['schemas']['copilot-seat-details'];
export type SchemaCopilotIdeCodeCompletions = components['schemas']['copilot-ide-code-completions'];
export type SchemaCopilotIdeChat = components['schemas']['copilot-ide-chat'];
export type SchemaCopilotDotcomChat = components['schemas']['copilot-dotcom-chat'];
export type SchemaCopilotDotcomPullRequests = components['schemas']['copilot-dotcom-pull-requests'];
export type SchemaCopilotUsageMetricsDay = components['schemas']['copilot-usage-metrics-day'];
export type SchemaOrganizationDependabotSecret = components['schemas']['organization-dependabot-secret'];
export type SchemaDependabotPublicKey = components['schemas']['dependabot-public-key'];
export type SchemaNullableMinimalRepository = components['schemas']['nullable-minimal-repository'];
export type SchemaPackage = components['schemas']['package'];
export type SchemaOrganizationInvitation = components['schemas']['organization-invitation'];
export type SchemaOrgHook = components['schemas']['org-hook'];
export type SchemaApiInsightsRouteStats = components['schemas']['api-insights-route-stats'];
export type SchemaApiInsightsSubjectStats = components['schemas']['api-insights-subject-stats'];
export type SchemaApiInsightsSummaryStats = components['schemas']['api-insights-summary-stats'];
export type SchemaApiInsightsTimeStats = components['schemas']['api-insights-time-stats'];
export type SchemaApiInsightsUserStats = components['schemas']['api-insights-user-stats'];
export type SchemaInteractionGroup = components['schemas']['interaction-group'];
export type SchemaInteractionLimitResponse = components['schemas']['interaction-limit-response'];
export type SchemaInteractionExpiry = components['schemas']['interaction-expiry'];
export type SchemaInteractionLimit = components['schemas']['interaction-limit'];
export type SchemaOrganizationCreateIssueType = components['schemas']['organization-create-issue-type'];
export type SchemaOrganizationUpdateIssueType = components['schemas']['organization-update-issue-type'];
export type SchemaOrgMembership = components['schemas']['org-membership'];
export type SchemaMigration = components['schemas']['migration'];
export type SchemaOrganizationRole = components['schemas']['organization-role'];
export type SchemaTeamRoleAssignment = components['schemas']['team-role-assignment'];
export type SchemaTeamSimple = components['schemas']['team-simple'];
export type SchemaUserRoleAssignment = components['schemas']['user-role-assignment'];
export type SchemaPackageVersion = components['schemas']['package-version'];
export type SchemaOrganizationProgrammaticAccessGrantRequest = components['schemas']['organization-programmatic-access-grant-request'];
export type SchemaOrganizationProgrammaticAccessGrant = components['schemas']['organization-programmatic-access-grant'];
export type SchemaOrgPrivateRegistryConfiguration = components['schemas']['org-private-registry-configuration'];
export type SchemaOrgPrivateRegistryConfigurationWithSelectedRepositories = components['schemas']['org-private-registry-configuration-with-selected-repositories'];
export type SchemaProject = components['schemas']['project'];
export type SchemaCustomProperty = components['schemas']['custom-property'];
export type SchemaCustomPropertySetPayload = components['schemas']['custom-property-set-payload'];
export type SchemaCustomPropertyValue = components['schemas']['custom-property-value'];
export type SchemaOrgRepoCustomPropertyValues = components['schemas']['org-repo-custom-property-values'];
export type SchemaNullableRepository = components['schemas']['nullable-repository'];
export type SchemaCodeOfConductSimple = components['schemas']['code-of-conduct-simple'];
export type SchemaFullRepository = components['schemas']['full-repository'];
export type SchemaRepositoryRuleEnforcement = components['schemas']['repository-rule-enforcement'];
export type SchemaRepositoryRulesetBypassActor = components['schemas']['repository-ruleset-bypass-actor'];
export type SchemaRepositoryRulesetConditions = components['schemas']['repository-ruleset-conditions'];
export type SchemaRepositoryRulesetConditionsRepositoryNameTarget = components['schemas']['repository-ruleset-conditions-repository-name-target'];
export type SchemaRepositoryRulesetConditionsRepositoryIdTarget = components['schemas']['repository-ruleset-conditions-repository-id-target'];
export type SchemaRepositoryRulesetConditionsRepositoryPropertySpec = components['schemas']['repository-ruleset-conditions-repository-property-spec'];
export type SchemaRepositoryRulesetConditionsRepositoryPropertyTarget = components['schemas']['repository-ruleset-conditions-repository-property-target'];
export type SchemaOrgRulesetConditions = components['schemas']['org-ruleset-conditions'];
export type SchemaRepositoryRuleCreation = components['schemas']['repository-rule-creation'];
export type SchemaRepositoryRuleUpdate = components['schemas']['repository-rule-update'];
export type SchemaRepositoryRuleDeletion = components['schemas']['repository-rule-deletion'];
export type SchemaRepositoryRuleRequiredLinearHistory = components['schemas']['repository-rule-required-linear-history'];
export type SchemaRepositoryRuleMergeQueue = components['schemas']['repository-rule-merge-queue'];
export type SchemaRepositoryRuleRequiredDeployments = components['schemas']['repository-rule-required-deployments'];
export type SchemaRepositoryRuleRequiredSignatures = components['schemas']['repository-rule-required-signatures'];
export type SchemaRepositoryRuleParamsReviewer = components['schemas']['repository-rule-params-reviewer'];
export type SchemaRepositoryRuleParamsRequiredReviewerConfiguration = components['schemas']['repository-rule-params-required-reviewer-configuration'];
export type SchemaRepositoryRulePullRequest = components['schemas']['repository-rule-pull-request'];
export type SchemaRepositoryRuleParamsStatusCheckConfiguration = components['schemas']['repository-rule-params-status-check-configuration'];
export type SchemaRepositoryRuleRequiredStatusChecks = components['schemas']['repository-rule-required-status-checks'];
export type SchemaRepositoryRuleNonFastForward = components['schemas']['repository-rule-non-fast-forward'];
export type SchemaRepositoryRuleCommitMessagePattern = components['schemas']['repository-rule-commit-message-pattern'];
export type SchemaRepositoryRuleCommitAuthorEmailPattern = components['schemas']['repository-rule-commit-author-email-pattern'];
export type SchemaRepositoryRuleCommitterEmailPattern = components['schemas']['repository-rule-committer-email-pattern'];
export type SchemaRepositoryRuleBranchNamePattern = components['schemas']['repository-rule-branch-name-pattern'];
export type SchemaRepositoryRuleTagNamePattern = components['schemas']['repository-rule-tag-name-pattern'];
export type SchemaRepositoryRuleFilePathRestriction = components['schemas']['repository-rule-file-path-restriction'];
export type SchemaRepositoryRuleMaxFilePathLength = components['schemas']['repository-rule-max-file-path-length'];
export type SchemaRepositoryRuleFileExtensionRestriction = components['schemas']['repository-rule-file-extension-restriction'];
export type SchemaRepositoryRuleMaxFileSize = components['schemas']['repository-rule-max-file-size'];
export type SchemaRepositoryRuleParamsRestrictedCommits = components['schemas']['repository-rule-params-restricted-commits'];
export type SchemaRepositoryRuleParamsWorkflowFileReference = components['schemas']['repository-rule-params-workflow-file-reference'];
export type SchemaRepositoryRuleWorkflows = components['schemas']['repository-rule-workflows'];
export type SchemaRepositoryRuleParamsCodeScanningTool = components['schemas']['repository-rule-params-code-scanning-tool'];
export type SchemaRepositoryRuleCodeScanning = components['schemas']['repository-rule-code-scanning'];
export type SchemaRepositoryRule = components['schemas']['repository-rule'];
export type SchemaRepositoryRuleset = components['schemas']['repository-ruleset'];
export type SchemaOrgRules = components['schemas']['org-rules'];
export type SchemaRuleSuites = components['schemas']['rule-suites'];
export type SchemaRuleSuite = components['schemas']['rule-suite'];
export type SchemaRulesetVersion = components['schemas']['ruleset-version'];
export type SchemaRulesetVersionWithState = components['schemas']['ruleset-version-with-state'];
export type SchemaRepositoryAdvisoryVulnerability = components['schemas']['repository-advisory-vulnerability'];
export type SchemaRepositoryAdvisoryCredit = components['schemas']['repository-advisory-credit'];
export type SchemaRepositoryAdvisory = components['schemas']['repository-advisory'];
export type SchemaActionsBillingUsage = components['schemas']['actions-billing-usage'];
export type SchemaPackagesBillingUsage = components['schemas']['packages-billing-usage'];
export type SchemaCombinedBillingUsage = components['schemas']['combined-billing-usage'];
export type SchemaNetworkConfiguration = components['schemas']['network-configuration'];
export type SchemaNetworkSettings = components['schemas']['network-settings'];
export type SchemaTeamOrganization = components['schemas']['team-organization'];
export type SchemaTeamFull = components['schemas']['team-full'];
export type SchemaTeamDiscussion = components['schemas']['team-discussion'];
export type SchemaTeamDiscussionComment = components['schemas']['team-discussion-comment'];
export type SchemaReaction = components['schemas']['reaction'];
export type SchemaTeamMembership = components['schemas']['team-membership'];
export type SchemaTeamProject = components['schemas']['team-project'];
export type SchemaTeamRepository = components['schemas']['team-repository'];
export type SchemaProjectCard = components['schemas']['project-card'];
export type SchemaProjectColumn = components['schemas']['project-column'];
export type SchemaProjectCollaboratorPermission = components['schemas']['project-collaborator-permission'];
export type SchemaRateLimit = components['schemas']['rate-limit'];
export type SchemaRateLimitOverview = components['schemas']['rate-limit-overview'];
export type SchemaArtifact = components['schemas']['artifact'];
export type SchemaActionsCacheList = components['schemas']['actions-cache-list'];
export type SchemaJob = components['schemas']['job'];
export type SchemaOidcCustomSubRepo = components['schemas']['oidc-custom-sub-repo'];
export type SchemaActionsSecret = components['schemas']['actions-secret'];
export type SchemaActionsVariable = components['schemas']['actions-variable'];
export type SchemaActionsEnabled = components['schemas']['actions-enabled'];
export type SchemaActionsRepositoryPermissions = components['schemas']['actions-repository-permissions'];
export type SchemaActionsWorkflowAccessToRepository = components['schemas']['actions-workflow-access-to-repository'];
export type SchemaReferencedWorkflow = components['schemas']['referenced-workflow'];
export type SchemaPullRequestMinimal = components['schemas']['pull-request-minimal'];
export type SchemaNullableSimpleCommit = components['schemas']['nullable-simple-commit'];
export type SchemaWorkflowRun = components['schemas']['workflow-run'];
export type SchemaEnvironmentApprovals = components['schemas']['environment-approvals'];
export type SchemaReviewCustomGatesCommentRequired = components['schemas']['review-custom-gates-comment-required'];
export type SchemaReviewCustomGatesStateRequired = components['schemas']['review-custom-gates-state-required'];
export type SchemaDeploymentReviewerType = components['schemas']['deployment-reviewer-type'];
export type SchemaPendingDeployment = components['schemas']['pending-deployment'];
export type SchemaDeployment = components['schemas']['deployment'];
export type SchemaWorkflowRunUsage = components['schemas']['workflow-run-usage'];
export type SchemaWorkflow = components['schemas']['workflow'];
export type SchemaWorkflowUsage = components['schemas']['workflow-usage'];
export type SchemaActivity = components['schemas']['activity'];
export type SchemaAutolink = components['schemas']['autolink'];
export type SchemaCheckAutomatedSecurityFixes = components['schemas']['check-automated-security-fixes'];
export type SchemaProtectedBranchRequiredStatusCheck = components['schemas']['protected-branch-required-status-check'];
export type SchemaProtectedBranchAdminEnforced = components['schemas']['protected-branch-admin-enforced'];
export type SchemaProtectedBranchPullRequestReview = components['schemas']['protected-branch-pull-request-review'];
export type SchemaBranchRestrictionPolicy = components['schemas']['branch-restriction-policy'];
export type SchemaBranchProtection = components['schemas']['branch-protection'];
export type SchemaShortBranch = components['schemas']['short-branch'];
export type SchemaNullableGitUser = components['schemas']['nullable-git-user'];
export type SchemaVerification = components['schemas']['verification'];
export type SchemaDiffEntry = components['schemas']['diff-entry'];
export type SchemaCommit = components['schemas']['commit'];
export type SchemaBranchWithProtection = components['schemas']['branch-with-protection'];
export type SchemaStatusCheckPolicy = components['schemas']['status-check-policy'];
export type SchemaProtectedBranch = components['schemas']['protected-branch'];
export type SchemaDeploymentSimple = components['schemas']['deployment-simple'];
export type SchemaCheckRun = components['schemas']['check-run'];
export type SchemaCheckAnnotation = components['schemas']['check-annotation'];
export type SchemaSimpleCommit = components['schemas']['simple-commit'];
export type SchemaCheckSuite = components['schemas']['check-suite'];
export type SchemaCheckSuitePreference = components['schemas']['check-suite-preference'];
export type SchemaCodeScanningAlertItems = components['schemas']['code-scanning-alert-items'];
export type SchemaCodeScanningAlertRule = components['schemas']['code-scanning-alert-rule'];
export type SchemaCodeScanningAlert = components['schemas']['code-scanning-alert'];
export type SchemaCodeScanningAlertSetState = components['schemas']['code-scanning-alert-set-state'];
export type SchemaCodeScanningAlertCreateRequest = components['schemas']['code-scanning-alert-create-request'];
export type SchemaCodeScanningAutofixStatus = components['schemas']['code-scanning-autofix-status'];
export type SchemaCodeScanningAutofixDescription = components['schemas']['code-scanning-autofix-description'];
export type SchemaCodeScanningAutofixStartedAt = components['schemas']['code-scanning-autofix-started-at'];
export type SchemaCodeScanningAutofix = components['schemas']['code-scanning-autofix'];
export type SchemaCodeScanningAutofixCommits = components['schemas']['code-scanning-autofix-commits'];
export type SchemaCodeScanningAutofixCommitsResponse = components['schemas']['code-scanning-autofix-commits-response'];
export type SchemaCodeScanningAnalysisSarifId = components['schemas']['code-scanning-analysis-sarif-id'];
export type SchemaCodeScanningAnalysisCommitSha = components['schemas']['code-scanning-analysis-commit-sha'];
export type SchemaCodeScanningAnalysisEnvironment = components['schemas']['code-scanning-analysis-environment'];
export type SchemaCodeScanningAnalysisCreatedAt = components['schemas']['code-scanning-analysis-created-at'];
export type SchemaCodeScanningAnalysisUrl = components['schemas']['code-scanning-analysis-url'];
export type SchemaCodeScanningAnalysis = components['schemas']['code-scanning-analysis'];
export type SchemaCodeScanningAnalysisDeletion = components['schemas']['code-scanning-analysis-deletion'];
export type SchemaCodeScanningCodeqlDatabase = components['schemas']['code-scanning-codeql-database'];
export type SchemaCodeScanningVariantAnalysisLanguage = components['schemas']['code-scanning-variant-analysis-language'];
export type SchemaCodeScanningVariantAnalysisRepository = components['schemas']['code-scanning-variant-analysis-repository'];
export type SchemaCodeScanningVariantAnalysisStatus = components['schemas']['code-scanning-variant-analysis-status'];
export type SchemaCodeScanningVariantAnalysisSkippedRepoGroup = components['schemas']['code-scanning-variant-analysis-skipped-repo-group'];
export type SchemaCodeScanningVariantAnalysis = components['schemas']['code-scanning-variant-analysis'];
export type SchemaCodeScanningVariantAnalysisRepoTask = components['schemas']['code-scanning-variant-analysis-repo-task'];
export type SchemaCodeScanningDefaultSetup = components['schemas']['code-scanning-default-setup'];
export type SchemaCodeScanningDefaultSetupUpdate = components['schemas']['code-scanning-default-setup-update'];
export type SchemaCodeScanningDefaultSetupUpdateResponse = components['schemas']['code-scanning-default-setup-update-response'];
export type SchemaCodeScanningRefFull = components['schemas']['code-scanning-ref-full'];
export type SchemaCodeScanningAnalysisSarifFile = components['schemas']['code-scanning-analysis-sarif-file'];
export type SchemaCodeScanningSarifsReceipt = components['schemas']['code-scanning-sarifs-receipt'];
export type SchemaCodeScanningSarifsStatus = components['schemas']['code-scanning-sarifs-status'];
export type SchemaCodeSecurityConfigurationForRepository = components['schemas']['code-security-configuration-for-repository'];
export type SchemaCodeownersErrors = components['schemas']['codeowners-errors'];
export type SchemaCodespaceMachine = components['schemas']['codespace-machine'];
export type SchemaCodespacesPermissionsCheckForDevcontainer = components['schemas']['codespaces-permissions-check-for-devcontainer'];
export type SchemaRepoCodespacesSecret = components['schemas']['repo-codespaces-secret'];
export type SchemaCollaborator = components['schemas']['collaborator'];
export type SchemaRepositoryInvitation = components['schemas']['repository-invitation'];
export type SchemaNullableCollaborator = components['schemas']['nullable-collaborator'];
export type SchemaRepositoryCollaboratorPermission = components['schemas']['repository-collaborator-permission'];
export type SchemaCommitComment = components['schemas']['commit-comment'];
export type SchemaBranchShort = components['schemas']['branch-short'];
export type SchemaLink = components['schemas']['link'];
export type SchemaAutoMerge = components['schemas']['auto-merge'];
export type SchemaPullRequestSimple = components['schemas']['pull-request-simple'];
export type SchemaSimpleCommitStatus = components['schemas']['simple-commit-status'];
export type SchemaCombinedCommitStatus = components['schemas']['combined-commit-status'];
export type SchemaStatus = components['schemas']['status'];
export type SchemaNullableCodeOfConductSimple = components['schemas']['nullable-code-of-conduct-simple'];
export type SchemaNullableCommunityHealthFile = components['schemas']['nullable-community-health-file'];
export type SchemaCommunityProfile = components['schemas']['community-profile'];
export type SchemaCommitComparison = components['schemas']['commit-comparison'];
export type SchemaContentTree = components['schemas']['content-tree'];
export type SchemaContentDirectory = components['schemas']['content-directory'];
export type SchemaContentFile = components['schemas']['content-file'];
export type SchemaContentSymlink = components['schemas']['content-symlink'];
export type SchemaContentSubmodule = components['schemas']['content-submodule'];
export type SchemaFileCommit = components['schemas']['file-commit'];
export type SchemaSecretScanningPushProtectionBypassPlaceholderId = components['schemas']['secret-scanning-push-protection-bypass-placeholder-id'];
export type SchemaRepositoryRuleViolationError = components['schemas']['repository-rule-violation-error'];
export type SchemaContributor = components['schemas']['contributor'];
export type SchemaDependabotAlert = components['schemas']['dependabot-alert'];
export type SchemaDependabotSecret = components['schemas']['dependabot-secret'];
export type SchemaDependencyGraphDiff = components['schemas']['dependency-graph-diff'];
export type SchemaDependencyGraphSpdxSbom = components['schemas']['dependency-graph-spdx-sbom'];
export type SchemaMetadata = components['schemas']['metadata'];
export type SchemaDependency = components['schemas']['dependency'];
export type SchemaManifest = components['schemas']['manifest'];
export type SchemaSnapshot = components['schemas']['snapshot'];
export type SchemaDeploymentStatus = components['schemas']['deployment-status'];
export type SchemaWaitTimer = components['schemas']['wait-timer'];
export type SchemaDeploymentBranchPolicySettings = components['schemas']['deployment-branch-policy-settings'];
export type SchemaEnvironment = components['schemas']['environment'];
export type SchemaPreventSelfReview = components['schemas']['prevent-self-review'];
export type SchemaDeploymentBranchPolicy = components['schemas']['deployment-branch-policy'];
export type SchemaDeploymentBranchPolicyNamePatternWithType = components['schemas']['deployment-branch-policy-name-pattern-with-type'];
export type SchemaDeploymentBranchPolicyNamePattern = components['schemas']['deployment-branch-policy-name-pattern'];
export type SchemaCustomDeploymentRuleApp = components['schemas']['custom-deployment-rule-app'];
export type SchemaDeploymentProtectionRule = components['schemas']['deployment-protection-rule'];
export type SchemaShortBlob = components['schemas']['short-blob'];
export type SchemaBlob = components['schemas']['blob'];
export type SchemaGitCommit = components['schemas']['git-commit'];
export type SchemaGitRef = components['schemas']['git-ref'];
export type SchemaGitTag = components['schemas']['git-tag'];
export type SchemaGitTree = components['schemas']['git-tree'];
export type SchemaHookResponse = components['schemas']['hook-response'];
export type SchemaHook = components['schemas']['hook'];
export type SchemaImport = components['schemas']['import'];
export type SchemaPorterAuthor = components['schemas']['porter-author'];
export type SchemaPorterLargeFile = components['schemas']['porter-large-file'];
export type SchemaNullableIssue = components['schemas']['nullable-issue'];
export type SchemaIssueEventLabel = components['schemas']['issue-event-label'];
export type SchemaIssueEventDismissedReview = components['schemas']['issue-event-dismissed-review'];
export type SchemaIssueEventMilestone = components['schemas']['issue-event-milestone'];
export type SchemaIssueEventProjectCard = components['schemas']['issue-event-project-card'];
export type SchemaIssueEventRename = components['schemas']['issue-event-rename'];
export type SchemaIssueEvent = components['schemas']['issue-event'];
export type SchemaLabeledIssueEvent = components['schemas']['labeled-issue-event'];
export type SchemaUnlabeledIssueEvent = components['schemas']['unlabeled-issue-event'];
export type SchemaAssignedIssueEvent = components['schemas']['assigned-issue-event'];
export type SchemaUnassignedIssueEvent = components['schemas']['unassigned-issue-event'];
export type SchemaMilestonedIssueEvent = components['schemas']['milestoned-issue-event'];
export type SchemaDemilestonedIssueEvent = components['schemas']['demilestoned-issue-event'];
export type SchemaRenamedIssueEvent = components['schemas']['renamed-issue-event'];
export type SchemaReviewRequestedIssueEvent = components['schemas']['review-requested-issue-event'];
export type SchemaReviewRequestRemovedIssueEvent = components['schemas']['review-request-removed-issue-event'];
export type SchemaReviewDismissedIssueEvent = components['schemas']['review-dismissed-issue-event'];
export type SchemaLockedIssueEvent = components['schemas']['locked-issue-event'];
export type SchemaAddedToProjectIssueEvent = components['schemas']['added-to-project-issue-event'];
export type SchemaMovedColumnInProjectIssueEvent = components['schemas']['moved-column-in-project-issue-event'];
export type SchemaRemovedFromProjectIssueEvent = components['schemas']['removed-from-project-issue-event'];
export type SchemaConvertedNoteToIssueIssueEvent = components['schemas']['converted-note-to-issue-issue-event'];
export type SchemaIssueEventForIssue = components['schemas']['issue-event-for-issue'];
export type SchemaLabel = components['schemas']['label'];
export type SchemaTimelineCommentEvent = components['schemas']['timeline-comment-event'];
export type SchemaTimelineCrossReferencedEvent = components['schemas']['timeline-cross-referenced-event'];
export type SchemaTimelineCommittedEvent = components['schemas']['timeline-committed-event'];
export type SchemaTimelineReviewedEvent = components['schemas']['timeline-reviewed-event'];
export type SchemaPullRequestReviewComment = components['schemas']['pull-request-review-comment'];
export type SchemaTimelineLineCommentedEvent = components['schemas']['timeline-line-commented-event'];
export type SchemaTimelineCommitCommentedEvent = components['schemas']['timeline-commit-commented-event'];
export type SchemaTimelineAssignedIssueEvent = components['schemas']['timeline-assigned-issue-event'];
export type SchemaTimelineUnassignedIssueEvent = components['schemas']['timeline-unassigned-issue-event'];
export type SchemaStateChangeIssueEvent = components['schemas']['state-change-issue-event'];
export type SchemaTimelineIssueEvents = components['schemas']['timeline-issue-events'];
export type SchemaDeployKey = components['schemas']['deploy-key'];
export type SchemaLanguage = components['schemas']['language'];
export type SchemaLicenseContent = components['schemas']['license-content'];
export type SchemaMergedUpstream = components['schemas']['merged-upstream'];
export type SchemaMilestone = components['schemas']['milestone'];
export type SchemaPagesSourceHash = components['schemas']['pages-source-hash'];
export type SchemaPagesHttpsCertificate = components['schemas']['pages-https-certificate'];
export type SchemaPage = components['schemas']['page'];
export type SchemaPageBuild = components['schemas']['page-build'];
export type SchemaPageBuildStatus = components['schemas']['page-build-status'];
export type SchemaPageDeployment = components['schemas']['page-deployment'];
export type SchemaPagesDeploymentStatus = components['schemas']['pages-deployment-status'];
export type SchemaPagesHealthCheck = components['schemas']['pages-health-check'];
export type SchemaPullRequest = components['schemas']['pull-request'];
export type SchemaPullRequestMergeResult = components['schemas']['pull-request-merge-result'];
export type SchemaPullRequestReviewRequest = components['schemas']['pull-request-review-request'];
export type SchemaPullRequestReview = components['schemas']['pull-request-review'];
export type SchemaReviewComment = components['schemas']['review-comment'];
export type SchemaReleaseAsset = components['schemas']['release-asset'];
export type SchemaRelease = components['schemas']['release'];
export type SchemaReleaseNotesContent = components['schemas']['release-notes-content'];
export type SchemaRepositoryRuleRulesetInfo = components['schemas']['repository-rule-ruleset-info'];
export type SchemaRepositoryRuleDetailed = components['schemas']['repository-rule-detailed'];
export type SchemaSecretScanningAlert = components['schemas']['secret-scanning-alert'];
export type SchemaSecretScanningAlertResolutionComment = components['schemas']['secret-scanning-alert-resolution-comment'];
export type SchemaSecretScanningLocation = components['schemas']['secret-scanning-location'];
export type SchemaSecretScanningPushProtectionBypassReason = components['schemas']['secret-scanning-push-protection-bypass-reason'];
export type SchemaSecretScanningPushProtectionBypass = components['schemas']['secret-scanning-push-protection-bypass'];
export type SchemaSecretScanningScan = components['schemas']['secret-scanning-scan'];
export type SchemaSecretScanningScanHistory = components['schemas']['secret-scanning-scan-history'];
export type SchemaRepositoryAdvisoryCreate = components['schemas']['repository-advisory-create'];
export type SchemaPrivateVulnerabilityReportCreate = components['schemas']['private-vulnerability-report-create'];
export type SchemaRepositoryAdvisoryUpdate = components['schemas']['repository-advisory-update'];
export type SchemaStargazer = components['schemas']['stargazer'];
export type SchemaCodeFrequencyStat = components['schemas']['code-frequency-stat'];
export type SchemaCommitActivity = components['schemas']['commit-activity'];
export type SchemaContributorActivity = components['schemas']['contributor-activity'];
export type SchemaParticipationStats = components['schemas']['participation-stats'];
export type SchemaRepositorySubscription = components['schemas']['repository-subscription'];
export type SchemaTag = components['schemas']['tag'];
export type SchemaTagProtection = components['schemas']['tag-protection'];
export type SchemaTopic = components['schemas']['topic'];
export type SchemaTraffic = components['schemas']['traffic'];
export type SchemaCloneTraffic = components['schemas']['clone-traffic'];
export type SchemaContentTraffic = components['schemas']['content-traffic'];
export type SchemaReferrerTraffic = components['schemas']['referrer-traffic'];
export type SchemaViewTraffic = components['schemas']['view-traffic'];
export type SchemaSearchResultTextMatches = components['schemas']['search-result-text-matches'];
export type SchemaCodeSearchResultItem = components['schemas']['code-search-result-item'];
export type SchemaCommitSearchResultItem = components['schemas']['commit-search-result-item'];
export type SchemaIssueSearchResultItem = components['schemas']['issue-search-result-item'];
export type SchemaLabelSearchResultItem = components['schemas']['label-search-result-item'];
export type SchemaRepoSearchResultItem = components['schemas']['repo-search-result-item'];
export type SchemaTopicSearchResultItem = components['schemas']['topic-search-result-item'];
export type SchemaUserSearchResultItem = components['schemas']['user-search-result-item'];
export type SchemaPrivateUser = components['schemas']['private-user'];
export type SchemaCodespacesSecret = components['schemas']['codespaces-secret'];
export type SchemaCodespacesUserPublicKey = components['schemas']['codespaces-user-public-key'];
export type SchemaCodespaceExportDetails = components['schemas']['codespace-export-details'];
export type SchemaCodespaceWithFullRepository = components['schemas']['codespace-with-full-repository'];
export type SchemaEmail = components['schemas']['email'];
export type SchemaGpgKey = components['schemas']['gpg-key'];
export type SchemaKey = components['schemas']['key'];
export type SchemaMarketplaceAccount = components['schemas']['marketplace-account'];
export type SchemaUserMarketplacePurchase = components['schemas']['user-marketplace-purchase'];
export type SchemaSocialAccount = components['schemas']['social-account'];
export type SchemaSshSigningKey = components['schemas']['ssh-signing-key'];
export type SchemaStarredRepository = components['schemas']['starred-repository'];
export type SchemaHovercard = components['schemas']['hovercard'];
export type SchemaKeySimple = components['schemas']['key-simple'];
export type SchemaBillingUsageReportUser = components['schemas']['billing-usage-report-user'];
export type SchemaEnterpriseWebhooks = components['schemas']['enterprise-webhooks'];
export type SchemaSimpleInstallation = components['schemas']['simple-installation'];
export type SchemaOrganizationSimpleWebhooks = components['schemas']['organization-simple-webhooks'];
export type SchemaRepositoryWebhooks = components['schemas']['repository-webhooks'];
export type SchemaWebhooksRule = components['schemas']['webhooks_rule'];
export type SchemaSimpleCheckSuite = components['schemas']['simple-check-suite'];
export type SchemaCheckRunWithSimpleCheckSuite = components['schemas']['check-run-with-simple-check-suite'];
export type SchemaWebhooksCodeScanningCommitOid = components['schemas']['webhooks_code_scanning_commit_oid'];
export type SchemaWebhooksCodeScanningRef = components['schemas']['webhooks_code_scanning_ref'];
export type SchemaWebhooksDeployPusherType = components['schemas']['webhooks_deploy_pusher_type'];
export type SchemaWebhooksRef_0 = components['schemas']['webhooks_ref_0'];
export type SchemaWebhooksDeployKey = components['schemas']['webhooks_deploy_key'];
export type SchemaWebhooksWorkflow = components['schemas']['webhooks_workflow'];
export type SchemaWebhooksApprover = components['schemas']['webhooks_approver'];
export type SchemaWebhooksReviewers = components['schemas']['webhooks_reviewers'];
export type SchemaWebhooksWorkflowJobRun = components['schemas']['webhooks_workflow_job_run'];
export type SchemaWebhooksUser = components['schemas']['webhooks_user'];
export type SchemaWebhooksAnswer = components['schemas']['webhooks_answer'];
export type SchemaDiscussion = components['schemas']['discussion'];
export type SchemaWebhooksComment = components['schemas']['webhooks_comment'];
export type SchemaWebhooksLabel = components['schemas']['webhooks_label'];
export type SchemaWebhooksRepositories = components['schemas']['webhooks_repositories'];
export type SchemaWebhooksRepositoriesAdded = components['schemas']['webhooks_repositories_added'];
export type SchemaWebhooksRepositorySelection = components['schemas']['webhooks_repository_selection'];
export type SchemaWebhooksIssueComment = components['schemas']['webhooks_issue_comment'];
export type SchemaWebhooksChanges = components['schemas']['webhooks_changes'];
export type SchemaWebhooksIssue = components['schemas']['webhooks_issue'];
export type SchemaWebhooksMilestone = components['schemas']['webhooks_milestone'];
export type SchemaWebhooksIssue_2 = components['schemas']['webhooks_issue_2'];
export type SchemaWebhooksUserMannequin = components['schemas']['webhooks_user_mannequin'];
export type SchemaWebhooksMarketplacePurchase = components['schemas']['webhooks_marketplace_purchase'];
export type SchemaWebhooksPreviousMarketplacePurchase = components['schemas']['webhooks_previous_marketplace_purchase'];
export type SchemaWebhooksTeam = components['schemas']['webhooks_team'];
export type SchemaMergeGroup = components['schemas']['merge-group'];
export type SchemaNullableRepositoryWebhooks = components['schemas']['nullable-repository-webhooks'];
export type SchemaWebhooksMilestone_3 = components['schemas']['webhooks_milestone_3'];
export type SchemaWebhooksMembership = components['schemas']['webhooks_membership'];
export type SchemaPersonalAccessTokenRequest = components['schemas']['personal-access-token-request'];
export type SchemaWebhooksProjectCard = components['schemas']['webhooks_project_card'];
export type SchemaWebhooksProject = components['schemas']['webhooks_project'];
export type SchemaWebhooksProjectColumn = components['schemas']['webhooks_project_column'];
export type SchemaProjectsV2 = components['schemas']['projects-v2'];
export type SchemaWebhooksProjectChanges = components['schemas']['webhooks_project_changes'];
export type SchemaProjectsV2ItemContentType = components['schemas']['projects-v2-item-content-type'];
export type SchemaProjectsV2Item = components['schemas']['projects-v2-item'];
export type SchemaProjectsV2SingleSelectOption = components['schemas']['projects-v2-single-select-option'];
export type SchemaProjectsV2IterationSetting = components['schemas']['projects-v2-iteration-setting'];
export type SchemaProjectsV2StatusUpdate = components['schemas']['projects-v2-status-update'];
export type SchemaWebhooksNumber = components['schemas']['webhooks_number'];
export type SchemaPullRequestWebhook = components['schemas']['pull-request-webhook'];
export type SchemaWebhooksPullRequest_5 = components['schemas']['webhooks_pull_request_5'];
export type SchemaWebhooksReviewComment = components['schemas']['webhooks_review_comment'];
export type SchemaWebhooksReview = components['schemas']['webhooks_review'];
export type SchemaWebhooksNullableString = components['schemas']['webhooks_nullable_string'];
export type SchemaWebhooksRelease = components['schemas']['webhooks_release'];
export type SchemaWebhooksRelease_1 = components['schemas']['webhooks_release_1'];
export type SchemaWebhooksAlert = components['schemas']['webhooks_alert'];
export type SchemaSecretScanningAlertResolutionWebhook = components['schemas']['secret-scanning-alert-resolution-webhook'];
export type SchemaSecretScanningAlertWebhook = components['schemas']['secret-scanning-alert-webhook'];
export type SchemaWebhooksSecurityAdvisory = components['schemas']['webhooks_security_advisory'];
export type SchemaWebhooksSponsorship = components['schemas']['webhooks_sponsorship'];
export type SchemaWebhooksEffectiveDate = components['schemas']['webhooks_effective_date'];
export type SchemaWebhooksChanges_8 = components['schemas']['webhooks_changes_8'];
export type SchemaWebhooksTeam_1 = components['schemas']['webhooks_team_1'];
export type SchemaWebhookBranchProtectionConfigurationDisabled = components['schemas']['webhook-branch-protection-configuration-disabled'];
export type SchemaWebhookBranchProtectionConfigurationEnabled = components['schemas']['webhook-branch-protection-configuration-enabled'];
export type SchemaWebhookBranchProtectionRuleCreated = components['schemas']['webhook-branch-protection-rule-created'];
export type SchemaWebhookBranchProtectionRuleDeleted = components['schemas']['webhook-branch-protection-rule-deleted'];
export type SchemaWebhookBranchProtectionRuleEdited = components['schemas']['webhook-branch-protection-rule-edited'];
export type SchemaWebhookCheckRunCompleted = components['schemas']['webhook-check-run-completed'];
export type SchemaWebhookCheckRunCompletedFormEncoded = components['schemas']['webhook-check-run-completed-form-encoded'];
export type SchemaWebhookCheckRunCreated = components['schemas']['webhook-check-run-created'];
export type SchemaWebhookCheckRunCreatedFormEncoded = components['schemas']['webhook-check-run-created-form-encoded'];
export type SchemaWebhookCheckRunRequestedAction = components['schemas']['webhook-check-run-requested-action'];
export type SchemaWebhookCheckRunRequestedActionFormEncoded = components['schemas']['webhook-check-run-requested-action-form-encoded'];
export type SchemaWebhookCheckRunRerequested = components['schemas']['webhook-check-run-rerequested'];
export type SchemaWebhookCheckRunRerequestedFormEncoded = components['schemas']['webhook-check-run-rerequested-form-encoded'];
export type SchemaWebhookCheckSuiteCompleted = components['schemas']['webhook-check-suite-completed'];
export type SchemaWebhookCheckSuiteRequested = components['schemas']['webhook-check-suite-requested'];
export type SchemaWebhookCheckSuiteRerequested = components['schemas']['webhook-check-suite-rerequested'];
export type SchemaWebhookCodeScanningAlertAppearedInBranch = components['schemas']['webhook-code-scanning-alert-appeared-in-branch'];
export type SchemaWebhookCodeScanningAlertClosedByUser = components['schemas']['webhook-code-scanning-alert-closed-by-user'];
export type SchemaWebhookCodeScanningAlertCreated = components['schemas']['webhook-code-scanning-alert-created'];
export type SchemaWebhookCodeScanningAlertFixed = components['schemas']['webhook-code-scanning-alert-fixed'];
export type SchemaWebhookCodeScanningAlertReopened = components['schemas']['webhook-code-scanning-alert-reopened'];
export type SchemaWebhookCodeScanningAlertReopenedByUser = components['schemas']['webhook-code-scanning-alert-reopened-by-user'];
export type SchemaWebhookCommitCommentCreated = components['schemas']['webhook-commit-comment-created'];
export type SchemaWebhookCreate = components['schemas']['webhook-create'];
export type SchemaWebhookCustomPropertyCreated = components['schemas']['webhook-custom-property-created'];
export type SchemaWebhookCustomPropertyDeleted = components['schemas']['webhook-custom-property-deleted'];
export type SchemaWebhookCustomPropertyPromotedToEnterprise = components['schemas']['webhook-custom-property-promoted-to-enterprise'];
export type SchemaWebhookCustomPropertyUpdated = components['schemas']['webhook-custom-property-updated'];
export type SchemaWebhookCustomPropertyValuesUpdated = components['schemas']['webhook-custom-property-values-updated'];
export type SchemaWebhookDelete = components['schemas']['webhook-delete'];
export type SchemaWebhookDependabotAlertAutoDismissed = components['schemas']['webhook-dependabot-alert-auto-dismissed'];
export type SchemaWebhookDependabotAlertAutoReopened = components['schemas']['webhook-dependabot-alert-auto-reopened'];
export type SchemaWebhookDependabotAlertCreated = components['schemas']['webhook-dependabot-alert-created'];
export type SchemaWebhookDependabotAlertDismissed = components['schemas']['webhook-dependabot-alert-dismissed'];
export type SchemaWebhookDependabotAlertFixed = components['schemas']['webhook-dependabot-alert-fixed'];
export type SchemaWebhookDependabotAlertReintroduced = components['schemas']['webhook-dependabot-alert-reintroduced'];
export type SchemaWebhookDependabotAlertReopened = components['schemas']['webhook-dependabot-alert-reopened'];
export type SchemaWebhookDeployKeyCreated = components['schemas']['webhook-deploy-key-created'];
export type SchemaWebhookDeployKeyDeleted = components['schemas']['webhook-deploy-key-deleted'];
export type SchemaWebhookDeploymentCreated = components['schemas']['webhook-deployment-created'];
export type SchemaWebhookDeploymentProtectionRuleRequested = components['schemas']['webhook-deployment-protection-rule-requested'];
export type SchemaWebhookDeploymentReviewApproved = components['schemas']['webhook-deployment-review-approved'];
export type SchemaWebhookDeploymentReviewRejected = components['schemas']['webhook-deployment-review-rejected'];
export type SchemaWebhookDeploymentReviewRequested = components['schemas']['webhook-deployment-review-requested'];
export type SchemaWebhookDeploymentStatusCreated = components['schemas']['webhook-deployment-status-created'];
export type SchemaWebhookDiscussionAnswered = components['schemas']['webhook-discussion-answered'];
export type SchemaWebhookDiscussionCategoryChanged = components['schemas']['webhook-discussion-category-changed'];
export type SchemaWebhookDiscussionClosed = components['schemas']['webhook-discussion-closed'];
export type SchemaWebhookDiscussionCommentCreated = components['schemas']['webhook-discussion-comment-created'];
export type SchemaWebhookDiscussionCommentDeleted = components['schemas']['webhook-discussion-comment-deleted'];
export type SchemaWebhookDiscussionCommentEdited = components['schemas']['webhook-discussion-comment-edited'];
export type SchemaWebhookDiscussionCreated = components['schemas']['webhook-discussion-created'];
export type SchemaWebhookDiscussionDeleted = components['schemas']['webhook-discussion-deleted'];
export type SchemaWebhookDiscussionEdited = components['schemas']['webhook-discussion-edited'];
export type SchemaWebhookDiscussionLabeled = components['schemas']['webhook-discussion-labeled'];
export type SchemaWebhookDiscussionLocked = components['schemas']['webhook-discussion-locked'];
export type SchemaWebhookDiscussionPinned = components['schemas']['webhook-discussion-pinned'];
export type SchemaWebhookDiscussionReopened = components['schemas']['webhook-discussion-reopened'];
export type SchemaWebhookDiscussionTransferred = components['schemas']['webhook-discussion-transferred'];
export type SchemaWebhookDiscussionUnanswered = components['schemas']['webhook-discussion-unanswered'];
export type SchemaWebhookDiscussionUnlabeled = components['schemas']['webhook-discussion-unlabeled'];
export type SchemaWebhookDiscussionUnlocked = components['schemas']['webhook-discussion-unlocked'];
export type SchemaWebhookDiscussionUnpinned = components['schemas']['webhook-discussion-unpinned'];
export type SchemaWebhookFork = components['schemas']['webhook-fork'];
export type SchemaWebhookGithubAppAuthorizationRevoked = components['schemas']['webhook-github-app-authorization-revoked'];
export type SchemaWebhookGollum = components['schemas']['webhook-gollum'];
export type SchemaWebhookInstallationCreated = components['schemas']['webhook-installation-created'];
export type SchemaWebhookInstallationDeleted = components['schemas']['webhook-installation-deleted'];
export type SchemaWebhookInstallationNewPermissionsAccepted = components['schemas']['webhook-installation-new-permissions-accepted'];
export type SchemaWebhookInstallationRepositoriesAdded = components['schemas']['webhook-installation-repositories-added'];
export type SchemaWebhookInstallationRepositoriesRemoved = components['schemas']['webhook-installation-repositories-removed'];
export type SchemaWebhookInstallationSuspend = components['schemas']['webhook-installation-suspend'];
export type SchemaWebhookInstallationTargetRenamed = components['schemas']['webhook-installation-target-renamed'];
export type SchemaWebhookInstallationUnsuspend = components['schemas']['webhook-installation-unsuspend'];
export type SchemaWebhookIssueCommentCreated = components['schemas']['webhook-issue-comment-created'];
export type SchemaWebhookIssueCommentDeleted = components['schemas']['webhook-issue-comment-deleted'];
export type SchemaWebhookIssueCommentEdited = components['schemas']['webhook-issue-comment-edited'];
export type SchemaWebhookIssuesAssigned = components['schemas']['webhook-issues-assigned'];
export type SchemaWebhookIssuesClosed = components['schemas']['webhook-issues-closed'];
export type SchemaWebhookIssuesDeleted = components['schemas']['webhook-issues-deleted'];
export type SchemaWebhookIssuesDemilestoned = components['schemas']['webhook-issues-demilestoned'];
export type SchemaWebhookIssuesEdited = components['schemas']['webhook-issues-edited'];
export type SchemaWebhookIssuesLabeled = components['schemas']['webhook-issues-labeled'];
export type SchemaWebhookIssuesLocked = components['schemas']['webhook-issues-locked'];
export type SchemaWebhookIssuesMilestoned = components['schemas']['webhook-issues-milestoned'];
export type SchemaWebhookIssuesOpened = components['schemas']['webhook-issues-opened'];
export type SchemaWebhookIssuesPinned = components['schemas']['webhook-issues-pinned'];
export type SchemaWebhookIssuesReopened = components['schemas']['webhook-issues-reopened'];
export type SchemaWebhookIssuesTransferred = components['schemas']['webhook-issues-transferred'];
export type SchemaWebhookIssuesTyped = components['schemas']['webhook-issues-typed'];
export type SchemaWebhookIssuesUnassigned = components['schemas']['webhook-issues-unassigned'];
export type SchemaWebhookIssuesUnlabeled = components['schemas']['webhook-issues-unlabeled'];
export type SchemaWebhookIssuesUnlocked = components['schemas']['webhook-issues-unlocked'];
export type SchemaWebhookIssuesUnpinned = components['schemas']['webhook-issues-unpinned'];
export type SchemaWebhookIssuesUntyped = components['schemas']['webhook-issues-untyped'];
export type SchemaWebhookLabelCreated = components['schemas']['webhook-label-created'];
export type SchemaWebhookLabelDeleted = components['schemas']['webhook-label-deleted'];
export type SchemaWebhookLabelEdited = components['schemas']['webhook-label-edited'];
export type SchemaWebhookMarketplacePurchaseCancelled = components['schemas']['webhook-marketplace-purchase-cancelled'];
export type SchemaWebhookMarketplacePurchaseChanged = components['schemas']['webhook-marketplace-purchase-changed'];
export type SchemaWebhookMarketplacePurchasePendingChange = components['schemas']['webhook-marketplace-purchase-pending-change'];
export type SchemaWebhookMarketplacePurchasePendingChangeCancelled = components['schemas']['webhook-marketplace-purchase-pending-change-cancelled'];
export type SchemaWebhookMarketplacePurchasePurchased = components['schemas']['webhook-marketplace-purchase-purchased'];
export type SchemaWebhookMemberAdded = components['schemas']['webhook-member-added'];
export type SchemaWebhookMemberEdited = components['schemas']['webhook-member-edited'];
export type SchemaWebhookMemberRemoved = components['schemas']['webhook-member-removed'];
export type SchemaWebhookMembershipAdded = components['schemas']['webhook-membership-added'];
export type SchemaWebhookMembershipRemoved = components['schemas']['webhook-membership-removed'];
export type SchemaWebhookMergeGroupChecksRequested = components['schemas']['webhook-merge-group-checks-requested'];
export type SchemaWebhookMergeGroupDestroyed = components['schemas']['webhook-merge-group-destroyed'];
export type SchemaWebhookMetaDeleted = components['schemas']['webhook-meta-deleted'];
export type SchemaWebhookMilestoneClosed = components['schemas']['webhook-milestone-closed'];
export type SchemaWebhookMilestoneCreated = components['schemas']['webhook-milestone-created'];
export type SchemaWebhookMilestoneDeleted = components['schemas']['webhook-milestone-deleted'];
export type SchemaWebhookMilestoneEdited = components['schemas']['webhook-milestone-edited'];
export type SchemaWebhookMilestoneOpened = components['schemas']['webhook-milestone-opened'];
export type SchemaWebhookOrgBlockBlocked = components['schemas']['webhook-org-block-blocked'];
export type SchemaWebhookOrgBlockUnblocked = components['schemas']['webhook-org-block-unblocked'];
export type SchemaWebhookOrganizationDeleted = components['schemas']['webhook-organization-deleted'];
export type SchemaWebhookOrganizationMemberAdded = components['schemas']['webhook-organization-member-added'];
export type SchemaWebhookOrganizationMemberInvited = components['schemas']['webhook-organization-member-invited'];
export type SchemaWebhookOrganizationMemberRemoved = components['schemas']['webhook-organization-member-removed'];
export type SchemaWebhookOrganizationRenamed = components['schemas']['webhook-organization-renamed'];
export type SchemaWebhookRubygemsMetadata = components['schemas']['webhook-rubygems-metadata'];
export type SchemaWebhookPackagePublished = components['schemas']['webhook-package-published'];
export type SchemaWebhookPackageUpdated = components['schemas']['webhook-package-updated'];
export type SchemaWebhookPageBuild = components['schemas']['webhook-page-build'];
export type SchemaWebhookPersonalAccessTokenRequestApproved = components['schemas']['webhook-personal-access-token-request-approved'];
export type SchemaWebhookPersonalAccessTokenRequestCancelled = components['schemas']['webhook-personal-access-token-request-cancelled'];
export type SchemaWebhookPersonalAccessTokenRequestCreated = components['schemas']['webhook-personal-access-token-request-created'];
export type SchemaWebhookPersonalAccessTokenRequestDenied = components['schemas']['webhook-personal-access-token-request-denied'];
export type SchemaWebhookPing = components['schemas']['webhook-ping'];
export type SchemaWebhookPingFormEncoded = components['schemas']['webhook-ping-form-encoded'];
export type SchemaWebhookProjectCardConverted = components['schemas']['webhook-project-card-converted'];
export type SchemaWebhookProjectCardCreated = components['schemas']['webhook-project-card-created'];
export type SchemaWebhookProjectCardDeleted = components['schemas']['webhook-project-card-deleted'];
export type SchemaWebhookProjectCardEdited = components['schemas']['webhook-project-card-edited'];
export type SchemaWebhookProjectCardMoved = components['schemas']['webhook-project-card-moved'];
export type SchemaWebhookProjectClosed = components['schemas']['webhook-project-closed'];
export type SchemaWebhookProjectColumnCreated = components['schemas']['webhook-project-column-created'];
export type SchemaWebhookProjectColumnDeleted = components['schemas']['webhook-project-column-deleted'];
export type SchemaWebhookProjectColumnEdited = components['schemas']['webhook-project-column-edited'];
export type SchemaWebhookProjectColumnMoved = components['schemas']['webhook-project-column-moved'];
export type SchemaWebhookProjectCreated = components['schemas']['webhook-project-created'];
export type SchemaWebhookProjectDeleted = components['schemas']['webhook-project-deleted'];
export type SchemaWebhookProjectEdited = components['schemas']['webhook-project-edited'];
export type SchemaWebhookProjectReopened = components['schemas']['webhook-project-reopened'];
export type SchemaWebhookProjectsV2ProjectClosed = components['schemas']['webhook-projects-v2-project-closed'];
export type SchemaWebhookProjectsV2ProjectCreated = components['schemas']['webhook-projects-v2-project-created'];
export type SchemaWebhookProjectsV2ProjectDeleted = components['schemas']['webhook-projects-v2-project-deleted'];
export type SchemaWebhookProjectsV2ProjectEdited = components['schemas']['webhook-projects-v2-project-edited'];
export type SchemaWebhookProjectsV2ItemArchived = components['schemas']['webhook-projects-v2-item-archived'];
export type SchemaWebhookProjectsV2ItemConverted = components['schemas']['webhook-projects-v2-item-converted'];
export type SchemaWebhookProjectsV2ItemCreated = components['schemas']['webhook-projects-v2-item-created'];
export type SchemaWebhookProjectsV2ItemDeleted = components['schemas']['webhook-projects-v2-item-deleted'];
export type SchemaWebhookProjectsV2ItemEdited = components['schemas']['webhook-projects-v2-item-edited'];
export type SchemaWebhookProjectsV2ItemReordered = components['schemas']['webhook-projects-v2-item-reordered'];
export type SchemaWebhookProjectsV2ItemRestored = components['schemas']['webhook-projects-v2-item-restored'];
export type SchemaWebhookProjectsV2ProjectReopened = components['schemas']['webhook-projects-v2-project-reopened'];
export type SchemaWebhookProjectsV2StatusUpdateCreated = components['schemas']['webhook-projects-v2-status-update-created'];
export type SchemaWebhookProjectsV2StatusUpdateDeleted = components['schemas']['webhook-projects-v2-status-update-deleted'];
export type SchemaWebhookProjectsV2StatusUpdateEdited = components['schemas']['webhook-projects-v2-status-update-edited'];
export type SchemaWebhookPublic = components['schemas']['webhook-public'];
export type SchemaWebhookPullRequestAssigned = components['schemas']['webhook-pull-request-assigned'];
export type SchemaWebhookPullRequestAutoMergeDisabled = components['schemas']['webhook-pull-request-auto-merge-disabled'];
export type SchemaWebhookPullRequestAutoMergeEnabled = components['schemas']['webhook-pull-request-auto-merge-enabled'];
export type SchemaWebhookPullRequestClosed = components['schemas']['webhook-pull-request-closed'];
export type SchemaWebhookPullRequestConvertedToDraft = components['schemas']['webhook-pull-request-converted-to-draft'];
export type SchemaWebhookPullRequestDemilestoned = components['schemas']['webhook-pull-request-demilestoned'];
export type SchemaWebhookPullRequestDequeued = components['schemas']['webhook-pull-request-dequeued'];
export type SchemaWebhookPullRequestEdited = components['schemas']['webhook-pull-request-edited'];
export type SchemaWebhookPullRequestEnqueued = components['schemas']['webhook-pull-request-enqueued'];
export type SchemaWebhookPullRequestLabeled = components['schemas']['webhook-pull-request-labeled'];
export type SchemaWebhookPullRequestLocked = components['schemas']['webhook-pull-request-locked'];
export type SchemaWebhookPullRequestMilestoned = components['schemas']['webhook-pull-request-milestoned'];
export type SchemaWebhookPullRequestOpened = components['schemas']['webhook-pull-request-opened'];
export type SchemaWebhookPullRequestReadyForReview = components['schemas']['webhook-pull-request-ready-for-review'];
export type SchemaWebhookPullRequestReopened = components['schemas']['webhook-pull-request-reopened'];
export type SchemaWebhookPullRequestReviewCommentCreated = components['schemas']['webhook-pull-request-review-comment-created'];
export type SchemaWebhookPullRequestReviewCommentDeleted = components['schemas']['webhook-pull-request-review-comment-deleted'];
export type SchemaWebhookPullRequestReviewCommentEdited = components['schemas']['webhook-pull-request-review-comment-edited'];
export type SchemaWebhookPullRequestReviewDismissed = components['schemas']['webhook-pull-request-review-dismissed'];
export type SchemaWebhookPullRequestReviewEdited = components['schemas']['webhook-pull-request-review-edited'];
export type SchemaWebhookPullRequestReviewRequestRemoved = components['schemas']['webhook-pull-request-review-request-removed'];
export type SchemaWebhookPullRequestReviewRequested = components['schemas']['webhook-pull-request-review-requested'];
export type SchemaWebhookPullRequestReviewSubmitted = components['schemas']['webhook-pull-request-review-submitted'];
export type SchemaWebhookPullRequestReviewThreadResolved = components['schemas']['webhook-pull-request-review-thread-resolved'];
export type SchemaWebhookPullRequestReviewThreadUnresolved = components['schemas']['webhook-pull-request-review-thread-unresolved'];
export type SchemaWebhookPullRequestSynchronize = components['schemas']['webhook-pull-request-synchronize'];
export type SchemaWebhookPullRequestUnassigned = components['schemas']['webhook-pull-request-unassigned'];
export type SchemaWebhookPullRequestUnlabeled = components['schemas']['webhook-pull-request-unlabeled'];
export type SchemaWebhookPullRequestUnlocked = components['schemas']['webhook-pull-request-unlocked'];
export type SchemaWebhookPush = components['schemas']['webhook-push'];
export type SchemaWebhookRegistryPackagePublished = components['schemas']['webhook-registry-package-published'];
export type SchemaWebhookRegistryPackageUpdated = components['schemas']['webhook-registry-package-updated'];
export type SchemaWebhookReleaseCreated = components['schemas']['webhook-release-created'];
export type SchemaWebhookReleaseDeleted = components['schemas']['webhook-release-deleted'];
export type SchemaWebhookReleaseEdited = components['schemas']['webhook-release-edited'];
export type SchemaWebhookReleasePrereleased = components['schemas']['webhook-release-prereleased'];
export type SchemaWebhookReleasePublished = components['schemas']['webhook-release-published'];
export type SchemaWebhookReleaseReleased = components['schemas']['webhook-release-released'];
export type SchemaWebhookReleaseUnpublished = components['schemas']['webhook-release-unpublished'];
export type SchemaWebhookRepositoryAdvisoryPublished = components['schemas']['webhook-repository-advisory-published'];
export type SchemaWebhookRepositoryAdvisoryReported = components['schemas']['webhook-repository-advisory-reported'];
export type SchemaWebhookRepositoryArchived = components['schemas']['webhook-repository-archived'];
export type SchemaWebhookRepositoryCreated = components['schemas']['webhook-repository-created'];
export type SchemaWebhookRepositoryDeleted = components['schemas']['webhook-repository-deleted'];
export type SchemaWebhookRepositoryDispatchSample = components['schemas']['webhook-repository-dispatch-sample'];
export type SchemaWebhookRepositoryEdited = components['schemas']['webhook-repository-edited'];
export type SchemaWebhookRepositoryImport = components['schemas']['webhook-repository-import'];
export type SchemaWebhookRepositoryPrivatized = components['schemas']['webhook-repository-privatized'];
export type SchemaWebhookRepositoryPublicized = components['schemas']['webhook-repository-publicized'];
export type SchemaWebhookRepositoryRenamed = components['schemas']['webhook-repository-renamed'];
export type SchemaWebhookRepositoryRulesetCreated = components['schemas']['webhook-repository-ruleset-created'];
export type SchemaWebhookRepositoryRulesetDeleted = components['schemas']['webhook-repository-ruleset-deleted'];
export type SchemaWebhookRepositoryRulesetEdited = components['schemas']['webhook-repository-ruleset-edited'];
export type SchemaWebhookRepositoryTransferred = components['schemas']['webhook-repository-transferred'];
export type SchemaWebhookRepositoryUnarchived = components['schemas']['webhook-repository-unarchived'];
export type SchemaWebhookRepositoryVulnerabilityAlertCreate = components['schemas']['webhook-repository-vulnerability-alert-create'];
export type SchemaWebhookRepositoryVulnerabilityAlertDismiss = components['schemas']['webhook-repository-vulnerability-alert-dismiss'];
export type SchemaWebhookRepositoryVulnerabilityAlertReopen = components['schemas']['webhook-repository-vulnerability-alert-reopen'];
export type SchemaWebhookRepositoryVulnerabilityAlertResolve = components['schemas']['webhook-repository-vulnerability-alert-resolve'];
export type SchemaWebhookSecretScanningAlertCreated = components['schemas']['webhook-secret-scanning-alert-created'];
export type SchemaWebhookSecretScanningAlertLocationCreated = components['schemas']['webhook-secret-scanning-alert-location-created'];
export type SchemaWebhookSecretScanningAlertLocationCreatedFormEncoded = components['schemas']['webhook-secret-scanning-alert-location-created-form-encoded'];
export type SchemaWebhookSecretScanningAlertPubliclyLeaked = components['schemas']['webhook-secret-scanning-alert-publicly-leaked'];
export type SchemaWebhookSecretScanningAlertReopened = components['schemas']['webhook-secret-scanning-alert-reopened'];
export type SchemaWebhookSecretScanningAlertResolved = components['schemas']['webhook-secret-scanning-alert-resolved'];
export type SchemaWebhookSecretScanningAlertValidated = components['schemas']['webhook-secret-scanning-alert-validated'];
export type SchemaWebhookSecretScanningScanCompleted = components['schemas']['webhook-secret-scanning-scan-completed'];
export type SchemaWebhookSecurityAdvisoryPublished = components['schemas']['webhook-security-advisory-published'];
export type SchemaWebhookSecurityAdvisoryUpdated = components['schemas']['webhook-security-advisory-updated'];
export type SchemaWebhookSecurityAdvisoryWithdrawn = components['schemas']['webhook-security-advisory-withdrawn'];
export type SchemaWebhookSecurityAndAnalysis = components['schemas']['webhook-security-and-analysis'];
export type SchemaWebhookSponsorshipCancelled = components['schemas']['webhook-sponsorship-cancelled'];
export type SchemaWebhookSponsorshipCreated = components['schemas']['webhook-sponsorship-created'];
export type SchemaWebhookSponsorshipEdited = components['schemas']['webhook-sponsorship-edited'];
export type SchemaWebhookSponsorshipPendingCancellation = components['schemas']['webhook-sponsorship-pending-cancellation'];
export type SchemaWebhookSponsorshipPendingTierChange = components['schemas']['webhook-sponsorship-pending-tier-change'];
export type SchemaWebhookSponsorshipTierChanged = components['schemas']['webhook-sponsorship-tier-changed'];
export type SchemaWebhookStarCreated = components['schemas']['webhook-star-created'];
export type SchemaWebhookStarDeleted = components['schemas']['webhook-star-deleted'];
export type SchemaWebhookStatus = components['schemas']['webhook-status'];
export type SchemaWebhookSubIssuesParentIssueAdded = components['schemas']['webhook-sub-issues-parent-issue-added'];
export type SchemaWebhookSubIssuesParentIssueRemoved = components['schemas']['webhook-sub-issues-parent-issue-removed'];
export type SchemaWebhookSubIssuesSubIssueAdded = components['schemas']['webhook-sub-issues-sub-issue-added'];
export type SchemaWebhookSubIssuesSubIssueRemoved = components['schemas']['webhook-sub-issues-sub-issue-removed'];
export type SchemaWebhookTeamAdd = components['schemas']['webhook-team-add'];
export type SchemaWebhookTeamAddedToRepository = components['schemas']['webhook-team-added-to-repository'];
export type SchemaWebhookTeamCreated = components['schemas']['webhook-team-created'];
export type SchemaWebhookTeamDeleted = components['schemas']['webhook-team-deleted'];
export type SchemaWebhookTeamEdited = components['schemas']['webhook-team-edited'];
export type SchemaWebhookTeamRemovedFromRepository = components['schemas']['webhook-team-removed-from-repository'];
export type SchemaWebhookWatchStarted = components['schemas']['webhook-watch-started'];
export type SchemaWebhookWorkflowDispatch = components['schemas']['webhook-workflow-dispatch'];
export type SchemaWebhookWorkflowJobCompleted = components['schemas']['webhook-workflow-job-completed'];
export type SchemaWebhookWorkflowJobInProgress = components['schemas']['webhook-workflow-job-in-progress'];
export type SchemaWebhookWorkflowJobQueued = components['schemas']['webhook-workflow-job-queued'];
export type SchemaWebhookWorkflowJobWaiting = components['schemas']['webhook-workflow-job-waiting'];
export type SchemaWebhookWorkflowRunCompleted = components['schemas']['webhook-workflow-run-completed'];
export type SchemaWebhookWorkflowRunInProgress = components['schemas']['webhook-workflow-run-in-progress'];
export type SchemaWebhookWorkflowRunRequested = components['schemas']['webhook-workflow-run-requested'];
export type $defs = Record<string, never>;
